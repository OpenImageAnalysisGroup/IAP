/*******************************************************************************
 * 
 *    Copyright (c) 2003-2009 Plant Bioinformatics Group, IPK Gatersleben
 * 
 *******************************************************************************/
/*
 * Created on Jun 1, 2010 by Christian Klukas
 */
package rmi_server.analysis;

import java.io.File;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.List;

import javax.swing.SwingUtilities;

import org.BackgroundTaskStatusProviderSupportingExternalCall;
import org.ErrorMsg;
import org.HomeFolder;
import org.ReleaseInfo;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import de.ipk_gatersleben.ag_nw.graffiti.services.task.BackgroundTaskHelper;
import de.ipk_gatersleben.ag_nw.graffiti.services.task.BackgroundTaskStatusProviderSupportingExternalCallImpl;
import de.ipk_gatersleben.ag_pbi.dbe2.helper.DBE2_XmlFileHelper;
import de.ipk_gatersleben.ag_pbi.dbe2.webService.CallDBE2WebService;
import de.ipk_gatersleben.ag_pbi.dbe2.webService.enums.DBTable;
import de.ipk_gatersleben.ag_pbi.dbe2.webService.sets.BlobProperty;
import de.ipk_gatersleben.ag_pbi.utilityClasses.io.IO_files;

/**
 * @author klukas
 *
 */
public class DBE {

	public static void downloadPrimaryData(final String experimentName,
			final String login, final String pass, Document doc,
			Runnable finishAction) throws Exception {
			// get elements
			Element[] images = DBE2_XmlFileHelper.getElements(doc, DBTable.IMAGE);
			Element[] volumes = DBE2_XmlFileHelper.getElements(doc, DBTable.VOLUME);
			Element[] networks = DBE2_XmlFileHelper.getElements(doc, DBTable.NETWORK);
			
			// get md5s
			final String md5Tag = "md5sum";
			
			List<String> md5l = new ArrayList<String>();
			List<String> names = new ArrayList<String>();
			
			for(Element e : images)
			{
				md5l.add(e.getAttribute(md5Tag));
				names.add(DBE2_XmlFileHelper.getElementValue(e));
			}
			for(Element e : volumes)
			{
				md5l.add(e.getAttribute(md5Tag));
				names.add(DBE2_XmlFileHelper.getElementValue(e));
			}
			for(Element e : networks)
			{
				md5l.add(e.getAttribute(md5Tag));
				names.add(DBE2_XmlFileHelper.getElementValue(e));
			}
			
			if(md5l.size() == 0) {
				SwingUtilities.invokeLater(finishAction);
				return;
			}
			
			final String[] md5s		 = md5l.toArray(new String[md5l.size()]);
			final String[] fileNames = names.toArray(new String[names.size()]);
			
			// get blobs
			final Blob[] blobs = new Blob[md5s.length];
			final BlobProperty[] blobProperties = new BlobProperty[md5s.length];
			
			
			final BackgroundTaskStatusProviderSupportingExternalCall sp = new BackgroundTaskStatusProviderSupportingExternalCallImpl("Downloading primary data (binary files)", "");
			
			Runnable run1 = new Runnable()
			{
				public void run()
				{
					try
					{
						// ######################################################################################
						// get blob
						for(int i = 0; i < blobs.length; i++)
						{
							sp.setCurrentStatusText2("Loading binary " + i + " / " + blobs.length + "...");
							
							blobs[i] = CallDBE2WebService.getBlob(
									login,
									pass,
									md5s[i]);
							
							sp.setCurrentStatusText2("Loading binary " + (i + 1) + " / " + blobs.length + " complete");
						}
						sp.setCurrentStatusText1("Download of primary data (binary files) complete");
						
						// ######################################################################################
						// get properties
						sp.setCurrentStatusText2("Downloading properties");
						
						BlobProperty[] bpTemp = CallDBE2WebService.getBlobProperties(
								login,
								pass,
								md5s);
						
						// re-assign due to Threads...
						for(int i = 0; i < bpTemp.length; i++)
							blobProperties[i] = bpTemp[i];
						
						sp.setCurrentStatusText2("Downloading properties complete");
						
						// ######################################################################################
						// write blobs
						sp.setCurrentStatusText1("Writing primary data (binary files)");
						
						for(int i = 0; i < blobs.length; i++)
						{
							// get file
							File file = IO_files.getVantedPrimaryDataFile(experimentName, fileNames[i], HomeFolder.getTemporaryFolder(), ReleaseInfo.getFileSeparator());
							
							// write
							byte[] content = blobs[i].getBytes(1, (int) blobs[i].length());
							
							IO_files.writeFile(file, content);
						}
						sp.setCurrentStatusText1("Writing primary data (binary files) complete");
					}
					catch (Exception e)
					{
						ErrorMsg.addErrorMessage(e);
					}
				}
			};
			
			BackgroundTaskHelper.issueSimpleTask("Downloading primary data (binary files)", "", 
					run1, finishAction, sp);
	}

}
