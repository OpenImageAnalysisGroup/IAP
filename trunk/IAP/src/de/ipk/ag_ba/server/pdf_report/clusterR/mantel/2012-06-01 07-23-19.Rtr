##------ 01.06.2012 07:23:19 ------##

R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-mingw32/x64 (64-bit)

R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
Tippen Sie 'license()' or 'licence()' für Details dazu.

R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
Tippen Sie 'contributors()' für mehr Information und 'citation()',
um zu erfahren, wie R oder R packages in Publikationen zitiert werden können.

Tippen Sie 'demo()' für einige Demos, 'help()' für on-line Hilfe, oder
'help.start()' für eine HTML Browserschnittstelle zur Hilfe.
Tippen Sie 'q()', um R zu verlassen.

[Vorher gesicherter Workspace wiederhergestellt]

> rm(list=ls(all=TRUE))
> remove <- c("F047", "Mo17", "UH007")
> 
> #### dCNV ######
> data <- read.csv("CNV_Filtered list_cluster analysis_MMM_3col___FINAL.csv", header=TRUE, sep=";", row.names="Marker")
> data <- data[,!(colnames(data) %in% remove)]
> dCNV <- as.dist(1-cor(data))
> 
> 
> #### dSNP ######
> moses <- read.csv('CGH_SNP data_Moses_data.csv', sep=';', row.names='marker')
> moses <- moses[,!(colnames(moses) %in% remove)]
> 
> t(moses) -> x
> x[x=='AA'] <- 11
> x[x=='AC'] <- 12
> x[x=='AG'] <- 13
> x[x=='AT'] <- 14
> x[x=='CC'] <- 22
> x[x=='CG'] <- 23
> x[x=='CT'] <- 24
> x[x=='GG'] <- 33
> x[x=='GT'] <- 34
> x[x=='TT'] <- 44
> x[x=='']   <- NA
> # (not in the first moses-dataset)
> x[x=='CA'] <- 12
> x[x=='GA'] <- 13
> x[x=='TA'] <- 14
> x[x=='GC'] <- 23
> x[x=='TC'] <- 24
> x[x=='TG'] <- 34
> 
> dx <- apply(x,1,as.numeric) 
> dSNP <- as.dist(1-cor(dx, use="na.or.complete"))
> 
> 
> #### dCNV_Bio ####
> 
> 
> moses2 <- read.csv('CNV_Biomass_Dataxls.csv', sep=';', row.names='Genotype')
> moses2 <- moses2[,!(colnames(moses2) %in% remove)]
> 
> dCNV_Bio <- as.dist(1-cor(moses2))
> head(moses2)
                          A374 B101 B102 B106 B111 B112 CML103 CML91 Co158 D23
Maturity_group               1    3    3    3    3    3      3     3     1   1
Biomass_Rank                11   29   24   26   27   12      8    19    25  20
Mid_parent_Heterosis_Rank    1   20   18    5   15    3     22    26    12  30
                          D32 D67 FV356 Mo24W NC358 OH43 P029 P068 P079 P084
Maturity_group              2   2     1     3     3    3    2    3    2    2
Biomass_Rank                1   3     6    21    17   31   23    5   13    7
Mid_parent_Heterosis_Rank   8  19     4    28    29   21   31   23   27   16
                          P086 P087 P104 P128 S025 S034 S052 T8 UH300 W117
Maturity_group               2    2    2    3    2    3    2  3     1    1
Biomass_Rank                18   16   10    4    9   14    2 22    15   30
Mid_parent_Heterosis_Rank   13   10    2   25    7   17    6 24    11   14
                          W182E
Maturity_group                2
Biomass_Rank                 28
Mid_parent_Heterosis_Rank     9
> moses2_Maturity_Biomass <- moses2[c("Maturity_group", "Biomass_Rank"),]
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> head(moses2_Maturity_Biomass)
               A374 B101 B102 B106 B111 B112 CML103 CML91 Co158 D23 D32 D67
Maturity_group    1    3    3    3    3    3      3     3     1   1   2   2
Biomass_Rank     11   29   24   26   27   12      8    19    25  20   1   3
               FV356 Mo24W NC358 OH43 P029 P068 P079 P084 P086 P087 P104 P128
Maturity_group     1     3     3    3    2    3    2    2    2    2    2    3
Biomass_Rank       6    21    17   31   23    5   13    7   18   16   10    4
               S025 S034 S052 T8 UH300 W117 W182E
Maturity_group    2    3    2  3     1    1     2
Biomass_Rank      9   14    2 22    15   30    28
> moses2_Maturity_Biomass <- moses2[c("Maturity_group", "Biomass_Rank"),]
> moses2_Maturity_Heterosis <- moses2[c("Maturity_group", "Mid_parent_Heterosis_Rank"),]
> moses2_Biomass_Heterosis <- moses2[c("Biomass_Rank", "Mid_parent_Heterosis_Rank"),]
> library("ade4")

Attache Paket: 'ade4'

The following object(s) are masked from 'package:base':

    within

Warnmeldungen:
1: In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
2: In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
3: In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
4: In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> 
> dSNPm <- as.matrix(dSNP) 
> dSNPms <- dSNPm[order(attr(dSNP, "Labels")),order(attr(dSNP, "Labels"))]
> 
> dCNVm <- as.matrix(dCNV)
> dCNVms <- dCNVm[order(attr(dCNV, "Labels")),order(attr(dCNV, "Labels"))]
> 
> dCNV_Biom <- as.matrix(dCNV_Bio) 
> dCNV_Bioms <- dCNV_Biom[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio, "Labels"))]
> ###
> dCNV_Bio_MB_m <- as.matrix(dCNV_Bio_MB) 
Fehler in as.matrix(dCNV_Bio_MB) : Objekt 'dCNV_Bio_MB' nicht gefunden
> dCNV_Bio_MB_ms <- dCNV_Bio_MB_m[order(attr(dCNV_Bio_MB, "Labels")),order(attr(dCNV_Bio_MB, "Labels"))]
Fehler: Objekt 'dCNV_Bio_MB_m' nicht gefunden
> 
> dCNV_Bio_MH_m <- as.matrix(dCNV_Bio_MH) 
Fehler in as.matrix(dCNV_Bio_MH) : Objekt 'dCNV_Bio_MH' nicht gefunden
> dCNV_Bio_MH_ms <- dCNV_Bio_MH_m[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio_MH_m, "Labels"))]
Fehler: Objekt 'dCNV_Bio_MH_m' nicht gefunden
> 
> dCNV_Bio_BH_m <- as.matrix(dCNV_Bio_BH) 
Fehler in as.matrix(dCNV_Bio_BH) : Objekt 'dCNV_Bio_BH' nicht gefunden
> dCNV_Bio_BH_ms <- dCNV_Biom[order(attr(dCNV_Bio_BH, "Labels")),order(attr(dCNV_Bio_BH, "Labels"))]
Fehler in order(attr(dCNV_Bio_BH, "Labels")) : 
  Objekt 'dCNV_Bio_BH' nicht gefunden
> rm(list=ls(all=TRUE))
> remove <- c("F047", "Mo17", "UH007")
> 
> #### dCNV ######
> data <- read.csv("CNV_Filtered list_cluster analysis_MMM_3col___FINAL.csv", header=TRUE, sep=";", row.names="Marker")
> data <- data[,!(colnames(data) %in% remove)]
> dCNV <- as.dist(1-cor(data))
> 
> 
> #### dSNP ######
> moses <- read.csv('CGH_SNP data_Moses_data.csv', sep=';', row.names='marker')
> moses <- moses[,!(colnames(moses) %in% remove)]
> 
> t(moses) -> x
> x[x=='AA'] <- 11
> x[x=='AC'] <- 12
> x[x=='AG'] <- 13
> x[x=='AT'] <- 14
> x[x=='CC'] <- 22
> x[x=='CG'] <- 23
> x[x=='CT'] <- 24
> x[x=='GG'] <- 33
> x[x=='GT'] <- 34
> x[x=='TT'] <- 44
> x[x=='']   <- NA
> # (not in the first moses-dataset)
> x[x=='CA'] <- 12
> x[x=='GA'] <- 13
> x[x=='TA'] <- 14
> x[x=='GC'] <- 23
> x[x=='TC'] <- 24
> x[x=='TG'] <- 34
> 
> dx <- apply(x,1,as.numeric) 
> dSNP <- as.dist(1-cor(dx, use="na.or.complete"))
> 
> 
> #### dCNV_Bio ####
> 
> 
> moses2 <- read.csv('CNV_Biomass_Dataxls.csv', sep=';', row.names='Genotype')
> moses2 <- moses2[,!(colnames(moses2) %in% remove)]
> moses2_Maturity_Biomass <- moses2[c("Maturity_group", "Biomass_Rank"),]
> moses2_Maturity_Heterosis <- moses2[c("Maturity_group", "Mid_parent_Heterosis_Rank"),]
> moses2_Biomass_Heterosis <- moses2[c("Biomass_Rank", "Mid_parent_Heterosis_Rank"),]
> 
> dCNV_Bio <- as.dist(1-cor(moses2))
> dCNV_Bio_MB <- as.dist(1-cor(moses2_Maturity_Biomass))
Warnmeldung:
In cor(moses2_Maturity_Biomass) : Standardabweichung ist Null
> dCNV_Bio_MH <- as.dist(1-cor(moses2_Maturity_Heterosis))
Warnmeldung:
In cor(moses2_Maturity_Heterosis) : Standardabweichung ist Null
> dCNV_Bio_BH <- as.dist(1-cor(moses2_Biomass_Heterosis))
> 
> #moses2_BioRow1 <- moses2[1,] # Maturity_group
> #moses2_BioRow2 <- moses2[2,] # Biomass_rank
> #moses2_BioRow3 <- moses2[3,] # Mid Parent Heterosis_rank
> #dCNV_BioRow1 <- as.dist(1-cor(moses2_BioRow1))
> #dCNV_BioRow2 <- as.dist(1-cor(moses2_BioRow2))
> #dCNV_BioRow3 <- as.dist(1-cor(moses2_BioRow3))
> 
> ###### mantel.rtest ############
> library("ade4")
> 
> dSNPm <- as.matrix(dSNP) 
> dSNPms <- dSNPm[order(attr(dSNP, "Labels")),order(attr(dSNP, "Labels"))]
> 
> dCNVm <- as.matrix(dCNV)
> dCNVms <- dCNVm[order(attr(dCNV, "Labels")),order(attr(dCNV, "Labels"))]
> 
> dCNV_Biom <- as.matrix(dCNV_Bio) 
> dCNV_Bioms <- dCNV_Biom[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio, "Labels"))]
> ###
> dCNV_Bio_MB_m <- as.matrix(dCNV_Bio_MB) 
> dCNV_Bio_MB_ms <- dCNV_Bio_MB_m[order(attr(dCNV_Bio_MB, "Labels")),order(attr(dCNV_Bio_MB, "Labels"))]
> 
> dCNV_Bio_MH_m <- as.matrix(dCNV_Bio_MH) 
> dCNV_Bio_MH_ms <- dCNV_Bio_MH_m[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio_MH_m, "Labels"))]
Fehler in order(attr(dCNV_Bio_MH_m, "Labels")) : 
  Argument 1 ist kein Vektor
> 
> dCNV_Bio_BH_m <- as.matrix(dCNV_Bio_BH) 
> dCNV_Bio_BH_ms <- dCNV_Biom[order(attr(dCNV_Bio_BH, "Labels")),order(attr(dCNV_Bio_BH, "Labels"))]
> dCNV_Bio_MB
               A374         B101         B102         B106         B111
B101   0.000000e+00                                                    
B102   0.000000e+00 0.000000e+00                                       
B106   0.000000e+00 0.000000e+00 0.000000e+00                          
B111   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00             
B112   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML91  2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
Co158  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
FV356  1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
Mo24W  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
OH43   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P029   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P079   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P086   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P087   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P104   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P128   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S025   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA           NA           NA           NA           NA
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               B112       CML103        CML91        Co158          D23
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103 0.000000e+00                                                    
CML91  0.000000e+00 2.220446e-16                                       
Co158  0.000000e+00 0.000000e+00 0.000000e+00                          
D23    0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00             
D32    2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
FV356  0.000000e+00 1.110223e-16 2.220446e-16 0.000000e+00 0.000000e+00
Mo24W  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
OH43   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
P029   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
P079   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   0.000000e+00 1.110223e-16 2.220446e-16 0.000000e+00 0.000000e+00
P086   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
P087   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
P104   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
P128   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
S025   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA           NA           NA           NA           NA
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
                D32          D67        FV356        Mo24W        NC358
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67    2.000000e+00                                                    
FV356  2.000000e+00 2.220446e-16                                       
Mo24W  2.000000e+00 0.000000e+00 0.000000e+00                          
NC358  2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00             
OH43   2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
P029   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
P079   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.000000e+00 2.220446e-16 1.110223e-16 0.000000e+00 0.000000e+00
P086   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
P087   2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
P104   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
P128   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
S025   2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
S034   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA           NA           NA           NA           NA
T8     2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
W117   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               OH43         P029         P068         P079         P084
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67                                                                    
FV356                                                                  
Mo24W                                                                  
NC358                                                                  
OH43                                                                   
P029   0.000000e+00                                                    
P068   1.110223e-16 0.000000e+00                                       
P079   0.000000e+00 0.000000e+00 0.000000e+00                          
P084   0.000000e+00 0.000000e+00 2.220446e-16 0.000000e+00             
P086   1.110223e-16 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P087   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
P104   1.110223e-16 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P128   1.110223e-16 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
S025   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA           NA           NA           NA           NA
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P086         P087         P104         P128         S025
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67                                                                    
FV356                                                                  
Mo24W                                                                  
NC358                                                                  
OH43                                                                   
P029                                                                   
P068                                                                   
P079                                                                   
P084                                                                   
P086                                                                   
P087   1.110223e-16                                                    
P104   2.220446e-16 1.110223e-16                                       
P128   2.220446e-16 1.110223e-16 2.220446e-16                          
S025   1.110223e-16 0.000000e+00 1.110223e-16 1.110223e-16             
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA           NA           NA           NA           NA
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16 0.000000e+00 1.110223e-16 1.110223e-16 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               S034         S052           T8        UH300         W117
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67                                                                    
FV356                                                                  
Mo24W                                                                  
NC358                                                                  
OH43                                                                   
P029                                                                   
P068                                                                   
P079                                                                   
P084                                                                   
P086                                                                   
P087                                                                   
P104                                                                   
P128                                                                   
S025                                                                   
S034                                                                   
S052             NA                                                    
T8     0.000000e+00           NA                                       
UH300  0.000000e+00           NA 0.000000e+00                          
W117   0.000000e+00           NA 0.000000e+00 0.000000e+00             
W182E  0.000000e+00           NA 0.000000e+00 0.000000e+00 0.000000e+00
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> attr(dCNV_Bio_MB, "Labels")
 [1] "A374"   "B101"   "B102"   "B106"   "B111"   "B112"   "CML103" "CML91" 
 [9] "Co158"  "D23"    "D32"    "D67"    "FV356"  "Mo24W"  "NC358"  "OH43"  
[17] "P029"   "P068"   "P079"   "P084"   "P086"   "P087"   "P104"   "P128"  
[25] "S025"   "S034"   "S052"   "T8"     "UH300"  "W117"   "W182E" 
> order(attr(dCNV_Bio_MB, "Labels")
+ )
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> attr(dSNP, "Labels")
 [1] "FV356"  "B112"   "NC358"  "P068"   "S025"   "S052"   "D32"    "Mo24W" 
 [9] "P084"   "P086"   "W182E"  "A374"   "OH43"   "P029"   "P128"   "CO158" 
[17] "W117"   "P079"   "B106"   "P104"   "D67"    "CML103" "S034"   "B102"  
[25] "B111"   "P087"   "UH300"  "B101"   "CML91"  "T8"     "D23"   
> attr(dSNP, "Labels")
 [1] "FV356"  "B112"   "NC358"  "P068"   "S025"   "S052"   "D32"    "Mo24W" 
 [9] "P084"   "P086"   "W182E"  "A374"   "OH43"   "P029"   "P128"   "CO158" 
[17] "W117"   "P079"   "B106"   "P104"   "D67"    "CML103" "S034"   "B102"  
[25] "B111"   "P087"   "UH300"  "B101"   "CML91"  "T8"     "D23"   
> attr(dCNV_Bio, "Labels")
 [1] "A374"   "B101"   "B102"   "B106"   "B111"   "B112"   "CML103" "CML91" 
 [9] "Co158"  "D23"    "D32"    "D67"    "FV356"  "Mo24W"  "NC358"  "OH43"  
[17] "P029"   "P068"   "P079"   "P084"   "P086"   "P087"   "P104"   "P128"  
[25] "S025"   "S034"   "S052"   "T8"     "UH300"  "W117"   "W182E" 
> attr(dCNV_Bio, "Labels")
 [1] "A374"   "B101"   "B102"   "B106"   "B111"   "B112"   "CML103" "CML91" 
 [9] "Co158"  "D23"    "D32"    "D67"    "FV356"  "Mo24W"  "NC358"  "OH43"  
[17] "P029"   "P068"   "P079"   "P084"   "P086"   "P087"   "P104"   "P128"  
[25] "S025"   "S034"   "S052"   "T8"     "UH300"  "W117"   "W182E" 
> attr(dCNV_Bio_MB, "Labels")
 [1] "A374"   "B101"   "B102"   "B106"   "B111"   "B112"   "CML103" "CML91" 
 [9] "Co158"  "D23"    "D32"    "D67"    "FV356"  "Mo24W"  "NC358"  "OH43"  
[17] "P029"   "P068"   "P079"   "P084"   "P086"   "P087"   "P104"   "P128"  
[25] "S025"   "S034"   "S052"   "T8"     "UH300"  "W117"   "W182E" 
> attr(dCNV_Bio_MB, "Labels")
 [1] "A374"   "B101"   "B102"   "B106"   "B111"   "B112"   "CML103" "CML91" 
 [9] "Co158"  "D23"    "D32"    "D67"    "FV356"  "Mo24W"  "NC358"  "OH43"  
[17] "P029"   "P068"   "P079"   "P084"   "P086"   "P087"   "P104"   "P128"  
[25] "S025"   "S034"   "S052"   "T8"     "UH300"  "W117"   "W182E" 
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> rm(list=ls(all=TRUE))
> remove <- c("F047", "Mo17", "UH007")
> 
> #### dCNV ######
> data <- read.csv("CNV_Filtered list_cluster analysis_MMM_3col___FINAL.csv", header=TRUE, sep=";", row.names="Marker")
> data <- data[,!(colnames(data) %in% remove)]
> dCNV <- as.dist(1-cor(data))
> 
> 
> #### dSNP ######
> moses <- read.csv('CGH_SNP data_Moses_data.csv', sep=';', row.names='marker')
> moses <- moses[,!(colnames(moses) %in% remove)]
> 
> t(moses) -> x
> x[x=='AA'] <- 11
> x[x=='AC'] <- 12
> x[x=='AG'] <- 13
> x[x=='AT'] <- 14
> x[x=='CC'] <- 22
> x[x=='CG'] <- 23
> x[x=='CT'] <- 24
> x[x=='GG'] <- 33
> x[x=='GT'] <- 34
> x[x=='TT'] <- 44
> x[x=='']   <- NA
> # (not in the first moses-dataset)
> x[x=='CA'] <- 12
> x[x=='GA'] <- 13
> x[x=='TA'] <- 14
> x[x=='GC'] <- 23
> x[x=='TC'] <- 24
> x[x=='TG'] <- 34
> 
> dx <- apply(x,1,as.numeric) 
> dSNP <- as.dist(1-cor(dx, use="na.or.complete"))
> 
> 
> #### dCNV_Bio ####
> 
> 
> moses2 <- read.csv('CNV_Biomass_Dataxls.csv', sep=';', row.names='Genotype')
> moses2 <- moses2[,!(colnames(moses2) %in% remove)]
> moses2_Maturity_Biomass <- moses2[c("Maturity_group", "Biomass_Rank"),]
> moses2_Maturity_Heterosis <- moses2[c("Maturity_group", "Mid_parent_Heterosis_Rank"),]
> moses2_Biomass_Heterosis <- moses2[c("Biomass_Rank", "Mid_parent_Heterosis_Rank"),]
> 
> dCNV_Bio <- as.dist(1-cor(moses2))
> dCNV_Bio_MB <- as.dist(1-cor(moses2_Maturity_Biomass))
Warnmeldung:
In cor(moses2_Maturity_Biomass) : Standardabweichung ist Null
> dCNV_Bio_MH <- as.dist(1-cor(moses2_Maturity_Heterosis))
Warnmeldung:
In cor(moses2_Maturity_Heterosis) : Standardabweichung ist Null
> dCNV_Bio_BH <- as.dist(1-cor(moses2_Biomass_Heterosis))
> 
> #moses2_BioRow1 <- moses2[1,] # Maturity_group
> #moses2_BioRow2 <- moses2[2,] # Biomass_rank
> #moses2_BioRow3 <- moses2[3,] # Mid Parent Heterosis_rank
> #dCNV_BioRow1 <- as.dist(1-cor(moses2_BioRow1))
> #dCNV_BioRow2 <- as.dist(1-cor(moses2_BioRow2))
> #dCNV_BioRow3 <- as.dist(1-cor(moses2_BioRow3))
> 
> ###### mantel.rtest ############
> library("ade4")
> 
> dSNPm <- as.matrix(dSNP) 
> dSNPms <- dSNPm[order(attr(dSNP, "Labels")),order(attr(dSNP, "Labels"))]
> 
> dCNVm <- as.matrix(dCNV)
> dCNVms <- dCNVm[order(attr(dCNV, "Labels")),order(attr(dCNV, "Labels"))]
> 
> dCNV_Biom <- as.matrix(dCNV_Bio) 
> dCNV_Bioms <- dCNV_Biom[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio, "Labels"))]
> ###
> dCNV_Bio_MB_m <- as.matrix(dCNV_Bio_MB) 
> dCNV_Bio_MB_ms <- dCNV_Bio_MB_m[order(attr(dCNV_Bio_MB, "Labels")),order(attr(dCNV_Bio_MB, "Labels"))]
> 
> dCNV_Bio_MH_m <- as.matrix(dCNV_Bio_MH) 
> dCNV_Bio_MH_ms <- dCNV_Bio_MH_m[order(attr(dCNV_Bio_MH, "Labels")),order(attr(dCNV_Bio_MH, "Labels"))]
> 
> dCNV_Bio_BH_m <- as.matrix(dCNV_Bio_BH) 
> dCNV_Bio_BH_ms <- dCNV_Biom[order(attr(dCNV_Bio_BH, "Labels")),order(attr(dCNV_Bio_BH, "Labels"))]
> mantel.rtest(m1=as.dist(dCNVms), m2=as.dist(dSNPms),nrepet=10000)
Monte-Carlo test
Observation: 0.6791568 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 10000 replicates
Simulated p-value: 9.999e-05 
> mantel.rtest(m1=as.dist(dCNVms), m2=as.dist(dCNV_Bioms),nrepet=10000)
Monte-Carlo test
Observation: 0.1169655 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 10000 replicates
Simulated p-value: 0.06159384 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bioms),nrepet=10000)
Monte-Carlo test
Observation: -0.006044359 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 10000 replicates
Simulated p-value: 0.520348 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> moses2_BioRow1 <- moses2[1,] # Maturity_group
> moses2_BioRow1
               A374 B101 B102 B106 B111 B112 CML103 CML91 Co158 D23 D32 D67
Maturity_group    1    3    3    3    3    3      3     3     1   1   2   2
               FV356 Mo24W NC358 OH43 P029 P068 P079 P084 P086 P087 P104 P128
Maturity_group     1     3     3    3    2    3    2    2    2    2    2    3
               S025 S034 S052 T8 UH300 W117 W182E
Maturity_group    2    3    2  3     1    1     2
> dCNV_BioRow1 <- as.dist(1-cor(moses2_BioRow1))
> dCNV_BioRow1
       A374 B101 B102 B106 B111 B112 CML103 CML91 Co158 D23 D32 D67 FV356 Mo24W
B101     NA                                                                    
B102     NA   NA                                                               
B106     NA   NA   NA                                                          
B111     NA   NA   NA   NA                                                     
B112     NA   NA   NA   NA   NA                                                
CML103   NA   NA   NA   NA   NA   NA                                           
CML91    NA   NA   NA   NA   NA   NA     NA                                    
Co158    NA   NA   NA   NA   NA   NA     NA    NA                              
D23      NA   NA   NA   NA   NA   NA     NA    NA    NA                        
D32      NA   NA   NA   NA   NA   NA     NA    NA    NA  NA                    
D67      NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA                
FV356    NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA            
Mo24W    NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA      
NC358    NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
OH43     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P029     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P068     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P079     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P084     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P086     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P087     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P104     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
P128     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
S025     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
S034     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
S052     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
T8       NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
UH300    NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
W117     NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
W182E    NA   NA   NA   NA   NA   NA     NA    NA    NA  NA  NA  NA    NA    NA
       NC358 OH43 P029 P068 P079 P084 P086 P087 P104 P128 S025 S034 S052 T8
B101                                                                       
B102                                                                       
B106                                                                       
B111                                                                       
B112                                                                       
CML103                                                                     
CML91                                                                      
Co158                                                                      
D23                                                                        
D32                                                                        
D67                                                                        
FV356                                                                      
Mo24W                                                                      
NC358                                                                      
OH43      NA                                                               
P029      NA   NA                                                          
P068      NA   NA   NA                                                     
P079      NA   NA   NA   NA                                                
P084      NA   NA   NA   NA   NA                                           
P086      NA   NA   NA   NA   NA   NA                                      
P087      NA   NA   NA   NA   NA   NA   NA                                 
P104      NA   NA   NA   NA   NA   NA   NA   NA                            
P128      NA   NA   NA   NA   NA   NA   NA   NA   NA                       
S025      NA   NA   NA   NA   NA   NA   NA   NA   NA   NA                  
S034      NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA             
S052      NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA        
T8        NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   
UH300     NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA NA
W117      NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA NA
W182E     NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA NA
       UH300 W117
B101             
B102             
B106             
B111             
B112             
CML103           
CML91            
Co158            
D23              
D32              
D67              
FV356            
Mo24W            
NC358            
OH43             
P029             
P068             
P079             
P084             
P086             
P087             
P104             
P128             
S025             
S034             
S052             
T8               
UH300            
W117      NA     
W182E     NA   NA
> ?NA
> mantel.rtest(m1=as.dist(dCNVms), m2=as.dist(dSNPms),nrepet=100000)
Monte-Carlo test
Observation: 0.6791568 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 100000 replicates
Simulated p-value: 9.9999e-06 
> mantel.rtest(m1=as.dist(dCNVms), m2=as.dist(dCNV_Bioms),nrepet=100000)
Monte-Carlo test
Observation: 0.1169655 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 100000 replicates
Simulated p-value: 0.06607934 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bioms),nrepet=100000)
Monte-Carlo test
Observation: -0.006044359 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 100000 replicates
Simulated p-value: 0.5244548 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bio_MB_ms),nrepet=100000)
Fehler in eigen(delta, symmetric = TRUE, only.values = TRUE) : 
  infinite or missing values in 'x'
Zusätzlich: Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bio_MH_ms),nrepet=100000)
Fehler in eigen(delta, symmetric = TRUE, only.values = TRUE) : 
  infinite or missing values in 'x'
Zusätzlich: Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bio_BH_ms),nrepet=100000)
Monte-Carlo test
Observation: -0.006044359 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 100000 replicates
Simulated p-value: 0.5273947 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> dCNV_Bio_MB_ms
               A374 B101 B102 B106 B111 B112       CML103        CML91 Co158
A374   0.000000e+00    0    0    0    0    0 1.110223e-16 2.220446e-16     0
B101   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B102   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B106   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B111   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B112   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
CML103 1.110223e-16    0    0    0    0    0 0.000000e+00 2.220446e-16     0
CML91  2.220446e-16    0    0    0    0    0 2.220446e-16 0.000000e+00     0
Co158  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D23    0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D32    2.000000e+00    2    2    2    2    2 2.000000e+00 2.000000e+00     2
D67    2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
FV356  1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
Mo24W  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
NC358  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
OH43   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P029   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P068   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P079   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P084   1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
P086   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P087   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P104   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P128   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
S025   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
S034   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
S052             NA   NA   NA   NA   NA   NA           NA           NA    NA
T8     0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
UH300  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
W117   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
W182E  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
       D23 D32          D67        FV356 Mo24W        NC358         OH43 P029
A374     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
B101     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B102     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B106     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B111     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B112     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
CML103   0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
CML91    0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
Co158    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D23      0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D32      2   0 2.000000e+00 2.000000e+00     2 2.000000e+00 2.000000e+00    2
D67      0   2 0.000000e+00 2.220446e-16     0 1.110223e-16 1.110223e-16    0
FV356    0   2 2.220446e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
Mo24W    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
NC358    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
OH43     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P029     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P068     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P079     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P084     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
P086     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P087     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P104     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P128     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
S025     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S034     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S052    NA  NA           NA           NA    NA           NA           NA   NA
T8       0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
UH300    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W117     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W182E    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
               P068 P079         P084         P086         P087         P104
A374   2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B106   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B112   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
CML91  2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00    2 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
FV356  2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
Mo24W  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
OH43   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
P079   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.220446e-16    0 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P086   2.220446e-16    0 2.220446e-16 0.000000e+00 1.110223e-16 2.220446e-16
P087   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P104   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 0.000000e+00
P128   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
S025   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
S034   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA   NA           NA           NA           NA           NA
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P128         S025 S034 S052 T8        UH300 W117 W182E
A374   2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
B101   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B102   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B106   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B111   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B112   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
CML103 2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
CML91  2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
Co158  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
D23    0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
D32    2.000000e+00 2.000000e+00    2   NA  2 2.000000e+00    2     2
D67    2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
FV356  2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
Mo24W  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
NC358  1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
OH43   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P029   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
P068   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P079   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
P084   2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P086   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P087   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P104   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P128   0.000000e+00 1.110223e-16    0   NA  0 1.110223e-16    0     0
S025   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
S034   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
S052             NA           NA   NA    0 NA           NA   NA    NA
T8     0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
UH300  1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
W117   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
W182E  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
> dCNV_Bio_MB_ms
               A374 B101 B102 B106 B111 B112       CML103        CML91 Co158
A374   0.000000e+00    0    0    0    0    0 1.110223e-16 2.220446e-16     0
B101   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B102   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B106   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B111   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B112   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
CML103 1.110223e-16    0    0    0    0    0 0.000000e+00 2.220446e-16     0
CML91  2.220446e-16    0    0    0    0    0 2.220446e-16 0.000000e+00     0
Co158  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D23    0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D32    2.000000e+00    2    2    2    2    2 2.000000e+00 2.000000e+00     2
D67    2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
FV356  1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
Mo24W  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
NC358  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
OH43   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P029   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P068   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P079   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P084   1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
P086   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P087   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P104   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P128   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
S025   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
S034   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
S052             NA   NA   NA   NA   NA   NA           NA           NA    NA
T8     0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
UH300  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
W117   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
W182E  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
       D23 D32          D67        FV356 Mo24W        NC358         OH43 P029
A374     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
B101     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B102     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B106     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B111     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B112     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
CML103   0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
CML91    0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
Co158    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D23      0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D32      2   0 2.000000e+00 2.000000e+00     2 2.000000e+00 2.000000e+00    2
D67      0   2 0.000000e+00 2.220446e-16     0 1.110223e-16 1.110223e-16    0
FV356    0   2 2.220446e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
Mo24W    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
NC358    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
OH43     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P029     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P068     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P079     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P084     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
P086     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P087     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P104     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P128     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
S025     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S034     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S052    NA  NA           NA           NA    NA           NA           NA   NA
T8       0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
UH300    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W117     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W182E    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
               P068 P079         P084         P086         P087         P104
A374   2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B106   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B112   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
CML91  2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00    2 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
FV356  2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
Mo24W  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
OH43   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
P079   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.220446e-16    0 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P086   2.220446e-16    0 2.220446e-16 0.000000e+00 1.110223e-16 2.220446e-16
P087   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P104   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 0.000000e+00
P128   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
S025   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
S034   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA   NA           NA           NA           NA           NA
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P128         S025 S034 S052 T8        UH300 W117 W182E
A374   2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
B101   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B102   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B106   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B111   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B112   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
CML103 2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
CML91  2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
Co158  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
D23    0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
D32    2.000000e+00 2.000000e+00    2   NA  2 2.000000e+00    2     2
D67    2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
FV356  2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
Mo24W  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
NC358  1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
OH43   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P029   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
P068   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P079   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
P084   2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P086   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P087   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P104   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P128   0.000000e+00 1.110223e-16    0   NA  0 1.110223e-16    0     0
S025   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
S034   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
S052             NA           NA   NA    0 NA           NA   NA    NA
T8     0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
UH300  1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
W117   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
W182E  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
> dCNV_Bio_BH_ms
               A374         B101         B102       B106        B111
A374   0.000000e+00 2.347784e-01 0.2794233079 0.00308484 0.133974596
B101   2.347784e-01 0.000000e+00 0.0022270718 0.18661186 0.015415181
B102   2.794233e-01 2.227072e-03 0.0000000000 0.22722543 0.029274657
B106   3.084840e-03 1.866119e-01 0.2272254273 0.00000000 0.097402789
B111   1.339746e-01 1.541518e-02 0.0292746566 0.09740279 0.000000000
B112   1.110223e-16 2.347784e-01 0.2794233079 0.00308484 0.133974596
CML103 1.263795e+00 5.808973e-01 0.5212691905 1.18727428 0.746163459
CML91  7.796341e-01 2.034298e-01 0.1648792458 0.70375655 0.321448856
Co158  1.109467e-01 2.495830e-02 0.0419391365 0.07775781 0.001155402
D23    8.236311e-01 2.313633e-01 0.1904066867 0.74691880 0.355097978
D32    1.609994e+00 9.566561e-01 0.8901130846 1.54591922 1.132067636
D67    1.453921e+00 7.737264e-01 0.7092580977 1.38258541 0.947585758
FV356  1.970449e-01 1.850862e-03 0.0081302162 0.15274073 0.006600732
Mo24W  7.537862e-01 1.876429e-01 0.1505540031 0.67847517 0.302164813
NC358  9.556322e-01 3.229157e-01 0.2753371259 0.87735962 0.462068704
OH43   2.269010e-01 7.597822e-05 0.0031251073 0.17950288 0.013333930
P029   7.494434e-01 1.850366e-01 0.1481968324 0.67423320 0.298960653
P068   1.419314e+00 7.364298e-01 0.6726731646 1.34676694 0.909215870
P079   1.069116e+00 4.106618e-01 0.3580865204 0.99060412 0.561052214
P084   1.162758e+00 4.893626e-01 0.4331495708 1.08481543 0.647619261
P086   2.593871e-01 6.994256e-04 0.0004306323 0.20893405 0.022644445
P087   1.780051e-01 4.369787e-03 0.0128160128 0.13584301 0.003384104
P104   0.000000e+00 2.347784e-01 0.2794233079 0.00308484 0.133974596
P128   1.464739e+00 7.856067e-01 0.7209330096 1.39380990 0.959752386
S025   2.794233e-01 2.227072e-03 0.0000000000 0.22722543 0.029274657
S034   6.866958e-01 1.488977e-01 0.1157745489 0.61312718 0.253844208
S052   1.500000e+00 8.250922e-01 0.7598077693 1.43048609 1.000000000
T8     5.765848e-01 9.278204e-02 0.0667434747 0.50678709 0.180343835
UH300  2.794233e-01 2.227072e-03 0.0000000000 0.22722543 0.029274657
W117   1.057053e-01 2.759453e-02 0.0453215913 0.07334293 0.001778833
W182E  3.443258e-02 9.364910e-02 0.1238510064 0.01699265 0.033717610
               B112      CML103        CML91        Co158         D23
A374   1.110223e-16 1.263794672 0.7796340519 1.109467e-01 0.823631095
B101   2.347784e-01 0.580897339 0.2034297767 2.495830e-02 0.231363314
B102   2.794233e-01 0.521269191 0.1648792458 4.193914e-02 0.190406687
B106   3.084840e-03 1.187274283 0.7037565494 7.775781e-02 0.746918797
B111   1.339746e-01 0.746163459 0.3214488563 1.155402e-03 0.355097978
B112   0.000000e+00 1.263794672 0.7796340519 1.109467e-01 0.823631095
CML103 1.263795e+00 0.000000000 0.1172644885 7.929397e-01 0.097066925
CML91  7.796341e-01 0.117264489 0.0000000000 3.575332e-01 0.001007536
Co158  1.109467e-01 0.792939673 0.3575332276 0.000000e+00 0.392571344
D23    8.236311e-01 0.097066925 0.0010075360 3.925713e-01 0.000000000
D32    1.609994e+00 0.074748863 0.3614956513 1.179551e+00 0.327599852
D67    1.453921e+00 0.020777770 0.2308907915 9.956372e-01 0.202983230
FV356  1.970449e-01 0.636888111 0.2416687645 1.326102e-02 0.271687567
Mo24W  7.537862e-01 0.130065077 0.0003532868 3.373923e-01 0.002553291
NC358  9.556322e-01 0.048074995 0.0157661022 5.032017e-01 0.008820057
OH43   2.269010e-01 0.592121187 0.2109424328 2.229556e-02 0.239307008
P029   7.494434e-01 0.132284815 0.0004824942 3.340411e-01 0.002883486
P068   1.419314e+00 0.013702696 0.2068784321 9.571792e-01 0.180343835
P079   1.069116e+00 0.019495306 0.0421462286 6.047391e-01 0.030219744
P084   1.162758e+00 0.005348158 0.0734551295 6.930008e-01 0.057506167
P086   2.593871e-01 0.547238390 0.1813801150 3.394271e-02 0.207980082
P087   1.780051e-01 0.667515244 0.2633652464 8.485852e-03 0.294458177
P104   0.000000e+00 1.263794672 0.7796340519 1.109467e-01 0.823631095
P128   1.464739e+00 0.023320280 0.2387319570 1.007817e+00 0.210398232
S025   2.794233e-01 0.521269191 0.1648792458 4.193914e-02 0.190406687
S034   6.866958e-01 0.166632936 0.0046506607 2.867012e-01 0.009976685
S052   1.500000e+00 0.032752870 0.2654468397 1.048057e+00 0.235734743
T8     5.765848e-01 0.237848182 0.0230283311 2.088206e-01 0.033588295
UH300  2.794233e-01 0.521269191 0.1648792458 4.193914e-02 0.190406687
W117   1.057053e-01 0.804281925 0.3664496861 6.704252e-05 0.401810377
W182E  3.443258e-02 1.003773504 0.5334641389 2.246013e-02 0.573629102
               D32          D67        FV356        Mo24W       NC358
A374   1.609994281 1.453921e+00 0.1970449315 7.537862e-01 0.955632175
B101   0.956656070 7.737264e-01 0.0018508625 1.876429e-01 0.322915727
B102   0.890113085 7.092581e-01 0.0081302162 1.505540e-01 0.275337126
B106   1.545919218 1.382585e+00 0.1527407331 6.784752e-01 0.877359617
B111   1.132067636 9.475858e-01 0.0066007322 3.021648e-01 0.462068704
B112   1.609994281 1.453921e+00 0.1970449315 7.537862e-01 0.955632175
CML103 0.074748863 2.077777e-02 0.6368881107 1.300651e-01 0.048074995
CML91  0.361495651 2.308908e-01 0.2416687645 3.532868e-04 0.015766102
Co158  1.179551033 9.956372e-01 0.0132610159 3.373923e-01 0.503201682
D23    0.327599852 2.029832e-01 0.2716875665 2.553291e-03 0.008820057
D32    0.000000000 1.704405e-02 1.0174927857 3.821770e-01 0.235438615
D67    0.017044049 0.000000e+00 0.8333815377 2.481497e-01 0.129974803
FV356  1.017492786 8.333815e-01 0.0000000000 2.246106e-01 0.368922011
Mo24W  0.382176991 2.481497e-01 0.2246105667 0.000000e+00 0.020814913
NC358  0.235438615 1.299748e-01 0.3689220111 2.081491e-02 0.000000000
OH43   0.968974606 7.857507e-01 0.0011770608 1.948931e-01 0.332038550
P029   0.385708465 2.511132e-01 0.2217872541 1.004987e-05 0.021734719
P068   0.024842173 7.399187e-04 0.7955809201 2.233470e-01 0.111656733
P079   0.167328560 7.971538e-02 0.4608831299 5.011964e-02 0.006440319
P084   0.118878807 4.695990e-02 0.5425951026 8.378111e-02 0.021526741
P086   0.919326851 7.374598e-01 0.0048231001 1.664040e-01 0.295870348
P087   1.050141221 8.656766e-01 0.0005335705 2.456503e-01 0.394595877
P104   1.609994281 1.453921e+00 0.1970449315 7.537862e-01 0.955632175
P128   0.014877866 7.417264e-05 0.8454031267 2.562358e-01 0.136043908
S025   0.890113085 7.092581e-01 0.0081302162 1.505540e-01 0.275337126
S034   0.438603336 2.960346e-01 0.1824001672 2.441908e-03 0.037381706
S052   0.008759293 1.374571e-03 0.8852921331 2.837416e-01 0.157011316
T8     0.540412060 3.849700e-01 0.1200430989 1.770232e-02 0.076170337
UH300  0.890113085 7.092581e-01 0.0081302162 1.505540e-01 0.275337126
W117   1.190930131 1.007217e+00 0.0152066665 3.461092e-01 0.513284283
W182E  1.382843893 1.206484e+00 0.0696312956 5.101197e-01 0.697263104
               OH43         P029         P068        P079        P084
A374   2.269010e-01 7.494434e-01 1.4193139347 1.069116352 1.162757692
B101   7.597822e-05 1.850366e-01 0.7364298012 0.410661827 0.489362644
B102   3.125107e-03 1.481968e-01 0.6726731646 0.358086520 0.433149571
B106   1.795029e-01 6.742332e-01 1.3467669378 0.990604117 1.084815433
B111   1.333393e-02 2.989607e-01 0.9092158701 0.561052214 0.647619261
B112   2.269010e-01 7.494434e-01 1.4193139347 1.069116352 1.162757692
CML103 5.921212e-01 1.322848e-01 0.0137026958 0.019495306 0.005348158
CML91  2.109424e-01 4.824942e-04 0.2068784321 0.042146229 0.073455129
Co158  2.229556e-02 3.340411e-01 0.9571792488 0.604739133 0.693000806
D23    2.393070e-01 2.883486e-03 0.1803438353 0.030219744 0.057506167
D32    9.689746e-01 3.857085e-01 0.0248421727 0.167328560 0.118878807
D67    7.857507e-01 2.511132e-01 0.0007399187 0.079715383 0.046959905
FV356  1.177061e-03 2.217873e-01 0.7955809201 0.460883130 0.542595103
Mo24W  1.948931e-01 1.004987e-05 0.2233469911 0.050119640 0.083781107
NC358  3.320386e-01 2.173472e-02 0.1116567332 0.006440319 0.021526741
OH43   0.000000e+00 1.922421e-01 0.7483407800 0.420665280 0.500000000
P029   1.922421e-01 0.000000e+00 0.2261789313 0.051530715 0.085586660
P068   7.483408e-01 2.261789e-01 0.0000000000 0.065348258 0.036017225
P079   4.206653e-01 5.153072e-02 0.0653482583 0.000000000 0.004444220
P084   5.000000e-01 8.558666e-02 0.0360172252 0.004444220 0.000000000
P086   1.236308e-03 1.639359e-01 0.7005417389 0.380863372 0.457567995
P087   3.294311e-03 2.427147e-01 0.8276630344 0.488680380 0.571884805
P104   2.269010e-01 7.494434e-01 1.4193139347 1.069116352 1.162757692
P128   7.976632e-01 2.592401e-01 0.0012824781 0.084548860 0.050719079
S025   3.125107e-03 1.481968e-01 0.6726731646 0.358086520 0.433149571
S034   1.554340e-01 2.138815e-03 0.2692387529 0.074272610 0.114002443
S052   8.372423e-01 2.868774e-01 0.0041294051 0.101487429 0.064143272
T8     9.803638e-02 1.687236e-02 0.3550979784 0.125495600 0.175057997
UH300  3.125107e-03 1.481968e-01 0.6726731646 0.358086520 0.433149571
W117   2.479260e-02 3.427238e-01 0.9687508138 0.615402031 0.704041536
W182E  8.850956e-02 5.062161e-01 1.1686982808 0.807205674 0.900469435
               P086         P087       P104         P128         S025
A374   0.2593871033 0.1780050635 0.00000000 1.464739e+00 0.2794233079
B101   0.0006994256 0.0043697873 0.23477843 7.856067e-01 0.0022270718
B102   0.0004306323 0.0128160128 0.27942331 7.209330e-01 0.0000000000
B106   0.2089340455 0.1358430113 0.00308484 1.393810e+00 0.2272254273
B111   0.0226444451 0.0033841045 0.13397460 9.597524e-01 0.0292746566
B112   0.2593871033 0.1780050635 0.00000000 1.464739e+00 0.2794233079
CML103 0.5472383896 0.6675152438 1.26379467 2.332028e-02 0.5212691905
CML91  0.1813801150 0.2633652464 0.77963405 2.387320e-01 0.1648792458
Co158  0.0339427077 0.0084858519 0.11094674 1.007817e+00 0.0419391365
D23    0.2079800824 0.2944581771 0.82363109 2.103982e-01 0.1904066867
D32    0.9193268515 1.0501412211 1.60999428 1.487787e-02 0.8901130846
D67    0.7374598291 0.8656766288 1.45392065 7.417264e-05 0.7092580977
FV356  0.0048231001 0.0005335705 0.19704493 8.454031e-01 0.0081302162
Mo24W  0.1664039936 0.2456502851 0.75378619 2.562358e-01 0.1505540031
NC358  0.2958703484 0.3945958772 0.95563217 1.360439e-01 0.2753371259
OH43   0.0012363084 0.0032943112 0.22690096 7.976632e-01 0.0031251073
P029   0.1639359313 0.2427147270 0.74944341 2.592401e-01 0.1481968324
P068   0.7005417389 0.8276630344 1.41931393 1.282478e-03 0.6726731646
P079   0.3808633717 0.4886803803 1.06911635 8.454886e-02 0.3580865204
P084   0.4575679951 0.5718848048 1.16275769 5.071908e-02 0.4331495708
P086   0.0000000000 0.0085582027 0.25938710 7.492315e-01 0.0004306323
P087   0.0085582027 0.0000000000 0.17800506 8.777557e-01 0.0128160128
P104   0.2593871033 0.1780050635 0.00000000 1.464739e+00 0.2794233079
P128   0.7492315411 0.8777556980 1.46473941 0.000000e+00 0.7209330096
S025   0.0004306323 0.0128160128 0.27942331 7.209330e-01 0.0000000000
S034   0.1298608140 0.2016432064 0.68669582 3.047371e-01 0.1157745489
S052   0.7883963152 0.9178005063 1.50000000 8.102635e-04 0.7598077693
T8     0.0776860955 0.1360291804 0.57658484 3.946192e-01 0.0667434747
UH300  0.0004306323 0.0128160128 0.27942331 7.209330e-01 0.0000000000
W117   0.0369987349 0.0100576228 0.10570529 1.019395e+00 0.0453215913
W182E  0.1100832382 0.0581527179 0.03443258 1.218385e+00 0.1238510064
              S034         S052          T8        UH300         W117
A374   0.686695820 1.5000000000 0.576584841 0.2794233079 1.057053e-01
B101   0.148897735 0.8250922122 0.092782042 0.0022270718 2.759453e-02
B102   0.115774549 0.7598077693 0.066743475 0.0000000000 4.532159e-02
B106   0.613127184 1.4304860917 0.506787088 0.2272254273 7.334293e-02
B111   0.253844208 1.0000000000 0.180343835 0.0292746566 1.778833e-03
B112   0.686695820 1.5000000000 0.576584841 0.2794233079 1.057053e-01
CML103 0.166632936 0.0327528701 0.237848182 0.5212691905 8.042819e-01
CML91  0.004650661 0.2654468397 0.023028331 0.1648792458 3.664497e-01
Co158  0.286701248 1.0480569331 0.208820561 0.0419391365 6.704252e-05
D23    0.009976685 0.2357347434 0.033588295 0.1904066867 4.018104e-01
D32    0.438603336 0.0087592928 0.540412060 0.8901130846 1.190930e+00
D67    0.296034577 0.0013745711 0.384969971 0.7092580977 1.007217e+00
FV356  0.182400167 0.8852921331 0.120043099 0.0081302162 1.520667e-02
Mo24W  0.002441908 0.2837416303 0.017702323 0.1505540031 3.461092e-01
NC358  0.037381706 0.1570113161 0.076170337 0.2753371259 5.132843e-01
OH43   0.155433983 0.8372423082 0.098036385 0.0031251073 2.479260e-02
P029   0.002138815 0.2868774063 0.016872361 0.1481968324 3.427238e-01
P068   0.269238753 0.0041294051 0.355097978 0.6726731646 9.687508e-01
P079   0.074272610 0.1014874287 0.125495600 0.3580865204 6.154020e-01
P084   0.114002443 0.0641432724 0.175057997 0.4331495708 7.040415e-01
P086   0.129860814 0.7883963152 0.077686096 0.0004306323 3.699873e-02
P087   0.201643206 0.9178005063 0.136029180 0.0128160128 1.005762e-02
P104   0.686695820 1.5000000000 0.576584841 0.2794233079 1.057053e-01
P128   0.304737078 0.0008102635 0.394619156 0.7209330096 1.019395e+00
S025   0.115774549 0.7598077693 0.066743475 0.0000000000 4.532159e-02
S034   0.000000000 0.3342286175 0.007017805 0.1157745489 2.948645e-01
S052   0.334228618 0.0000000000 0.427144196 0.7598077693 1.059620e+00
T8     0.007017805 0.4271441964 0.000000000 0.0667434747 2.159553e-01
UH300  0.115774549 0.7598077693 0.066743475 0.0000000000 4.532159e-02
W117   0.294864550 1.0596196475 0.215955328 0.0453215913 0.000000e+00
W182E  0.450428706 1.2574846453 0.355482255 0.1238510064 2.008532e-02
            W182E
A374   0.03443258
B101   0.09364910
B102   0.12385101
B106   0.01699265
B111   0.03371761
B112   0.03443258
CML103 1.00377350
CML91  0.53346414
Co158  0.02246013
D23    0.57362910
D32    1.38284389
D67    1.20648376
FV356  0.06963130
Mo24W  0.51011968
NC358  0.69726310
OH43   0.08850956
P029   0.50621614
P068   1.16869828
P079   0.80720567
P084   0.90046943
P086   0.11008324
P087   0.05815272
P104   0.03443258
P128   1.21838545
S025   0.12385101
S034   0.45042871
S052   1.25748465
T8     0.35548226
UH300  0.12385101
W117   0.02008532
W182E  0.00000000
> dCNV_Bio_MH_ms
       A374 B101         B102         B106 B111 B112 CML103 CML91 Co158 D23 D32
A374      0   NA           NA           NA   NA   NA     NA    NA    NA  NA  NA
B101     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
B102     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
B106     NA    0 1.110223e-16 0.000000e+00    0   NA      0     0     0   0   0
B111     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
B112     NA   NA           NA           NA   NA    0     NA    NA    NA  NA  NA
CML103   NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
CML91    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
Co158    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
D23      NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
D32      NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
D67      NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
FV356    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
Mo24W    NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
NC358    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
OH43     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
P029     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
P068     NA    0 0.000000e+00 2.220446e-16    0   NA      0     0     0   0   0
P079     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
P084     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
P086     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
P087     NA    0 1.110223e-16 2.220446e-16    0   NA      0     0     0   0   0
P104     NA   NA           NA           NA   NA   NA     NA    NA    NA  NA  NA
P128     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
S025     NA    0 0.000000e+00 2.220446e-16    0   NA      0     0     0   0   0
S034     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
S052     NA    0 1.110223e-16 2.220446e-16    0   NA      0     0     0   0   0
T8       NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
UH300    NA    0 0.000000e+00 2.220446e-16    0   NA      0     0     0   0   0
W117     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
W182E    NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
       D67 FV356        Mo24W NC358 OH43 P029         P068         P079
A374    NA    NA           NA    NA   NA   NA           NA           NA
B101     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
B102     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
B106     0     0 1.110223e-16     0    0    0 2.220446e-16 1.110223e-16
B111     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
B112    NA    NA           NA    NA   NA   NA           NA           NA
CML103   0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
CML91    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
Co158    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
D23      0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
D32      0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
D67      0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
FV356    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
Mo24W    0     0 0.000000e+00     0    0    0 1.110223e-16 0.000000e+00
NC358    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
OH43     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P029     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P068     0     0 1.110223e-16     0    0    0 0.000000e+00 1.110223e-16
P079     0     0 0.000000e+00     0    0    0 1.110223e-16 0.000000e+00
P084     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P086     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P087     0     0 1.110223e-16     0    0    0 2.220446e-16 1.110223e-16
P104    NA    NA           NA    NA   NA   NA           NA           NA
P128     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
S025     0     0 1.110223e-16     0    0    0 1.110223e-16 1.110223e-16
S034     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
S052     0     0 1.110223e-16     0    0    0 2.220446e-16 1.110223e-16
T8       0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
UH300    0     0 1.110223e-16     0    0    0 1.110223e-16 1.110223e-16
W117     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
W182E    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
               P084 P086         P087 P104 P128         S025         S034
A374             NA   NA           NA   NA   NA           NA           NA
B101   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
B106   1.110223e-16    0 2.220446e-16   NA    0 2.220446e-16 1.110223e-16
B111   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
B112             NA   NA           NA   NA   NA           NA           NA
CML103 0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
CML91  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
Co158  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
D32    0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
D67    0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
FV356  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
Mo24W  0.000000e+00    0 1.110223e-16   NA    0 1.110223e-16 0.000000e+00
NC358  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
OH43   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
P029   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16   NA    0 1.110223e-16 0.000000e+00
P079   0.000000e+00    0 1.110223e-16   NA    0 1.110223e-16 0.000000e+00
P084   0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
P086   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
P087   1.110223e-16    0 0.000000e+00   NA    0 2.220446e-16 1.110223e-16
P104             NA   NA           NA    0   NA           NA           NA
P128   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
S025   0.000000e+00    0 2.220446e-16   NA    0 0.000000e+00 0.000000e+00
S034   0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
S052   1.110223e-16    0 2.220446e-16   NA    0 2.220446e-16 1.110223e-16
T8     0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
UH300  0.000000e+00    0 2.220446e-16   NA    0 1.110223e-16 0.000000e+00
W117   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
               S052 T8        UH300 W117        W182E
A374             NA NA           NA   NA           NA
B101   0.000000e+00  0 0.000000e+00    0 0.000000e+00
B102   1.110223e-16  0 0.000000e+00    0 0.000000e+00
B106   2.220446e-16  0 2.220446e-16    0 1.110223e-16
B111   0.000000e+00  0 0.000000e+00    0 0.000000e+00
B112             NA NA           NA   NA           NA
CML103 0.000000e+00  0 0.000000e+00    0 0.000000e+00
CML91  0.000000e+00  0 0.000000e+00    0 0.000000e+00
Co158  0.000000e+00  0 0.000000e+00    0 0.000000e+00
D23    0.000000e+00  0 0.000000e+00    0 0.000000e+00
D32    0.000000e+00  0 0.000000e+00    0 0.000000e+00
D67    0.000000e+00  0 0.000000e+00    0 0.000000e+00
FV356  0.000000e+00  0 0.000000e+00    0 0.000000e+00
Mo24W  1.110223e-16  0 1.110223e-16    0 0.000000e+00
NC358  0.000000e+00  0 0.000000e+00    0 0.000000e+00
OH43   0.000000e+00  0 0.000000e+00    0 0.000000e+00
P029   0.000000e+00  0 0.000000e+00    0 0.000000e+00
P068   2.220446e-16  0 1.110223e-16    0 0.000000e+00
P079   1.110223e-16  0 1.110223e-16    0 0.000000e+00
P084   1.110223e-16  0 0.000000e+00    0 0.000000e+00
P086   0.000000e+00  0 0.000000e+00    0 0.000000e+00
P087   2.220446e-16  0 2.220446e-16    0 1.110223e-16
P104             NA NA           NA   NA           NA
P128   0.000000e+00  0 0.000000e+00    0 0.000000e+00
S025   2.220446e-16  0 1.110223e-16    0 0.000000e+00
S034   1.110223e-16  0 0.000000e+00    0 0.000000e+00
S052   0.000000e+00  0 2.220446e-16    0 1.110223e-16
T8     0.000000e+00  0 0.000000e+00    0 0.000000e+00
UH300  2.220446e-16  0 0.000000e+00    0 0.000000e+00
W117   0.000000e+00  0 0.000000e+00    0 0.000000e+00
W182E  1.110223e-16  0 0.000000e+00    0 0.000000e+00
> dCNV_Bio_MH_ms
       A374 B101         B102         B106 B111 B112 CML103 CML91 Co158 D23 D32
A374      0   NA           NA           NA   NA   NA     NA    NA    NA  NA  NA
B101     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
B102     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
B106     NA    0 1.110223e-16 0.000000e+00    0   NA      0     0     0   0   0
B111     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
B112     NA   NA           NA           NA   NA    0     NA    NA    NA  NA  NA
CML103   NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
CML91    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
Co158    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
D23      NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
D32      NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
D67      NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
FV356    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
Mo24W    NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
NC358    NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
OH43     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
P029     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
P068     NA    0 0.000000e+00 2.220446e-16    0   NA      0     0     0   0   0
P079     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
P084     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
P086     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
P087     NA    0 1.110223e-16 2.220446e-16    0   NA      0     0     0   0   0
P104     NA   NA           NA           NA   NA   NA     NA    NA    NA  NA  NA
P128     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
S025     NA    0 0.000000e+00 2.220446e-16    0   NA      0     0     0   0   0
S034     NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
S052     NA    0 1.110223e-16 2.220446e-16    0   NA      0     0     0   0   0
T8       NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
UH300    NA    0 0.000000e+00 2.220446e-16    0   NA      0     0     0   0   0
W117     NA    0 0.000000e+00 0.000000e+00    0   NA      0     0     0   0   0
W182E    NA    0 0.000000e+00 1.110223e-16    0   NA      0     0     0   0   0
       D67 FV356        Mo24W NC358 OH43 P029         P068         P079
A374    NA    NA           NA    NA   NA   NA           NA           NA
B101     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
B102     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
B106     0     0 1.110223e-16     0    0    0 2.220446e-16 1.110223e-16
B111     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
B112    NA    NA           NA    NA   NA   NA           NA           NA
CML103   0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
CML91    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
Co158    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
D23      0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
D32      0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
D67      0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
FV356    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
Mo24W    0     0 0.000000e+00     0    0    0 1.110223e-16 0.000000e+00
NC358    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
OH43     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P029     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P068     0     0 1.110223e-16     0    0    0 0.000000e+00 1.110223e-16
P079     0     0 0.000000e+00     0    0    0 1.110223e-16 0.000000e+00
P084     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P086     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
P087     0     0 1.110223e-16     0    0    0 2.220446e-16 1.110223e-16
P104    NA    NA           NA    NA   NA   NA           NA           NA
P128     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
S025     0     0 1.110223e-16     0    0    0 1.110223e-16 1.110223e-16
S034     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
S052     0     0 1.110223e-16     0    0    0 2.220446e-16 1.110223e-16
T8       0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
UH300    0     0 1.110223e-16     0    0    0 1.110223e-16 1.110223e-16
W117     0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
W182E    0     0 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00
               P084 P086         P087 P104 P128         S025         S034
A374             NA   NA           NA   NA   NA           NA           NA
B101   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
B106   1.110223e-16    0 2.220446e-16   NA    0 2.220446e-16 1.110223e-16
B111   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
B112             NA   NA           NA   NA   NA           NA           NA
CML103 0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
CML91  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
Co158  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
D32    0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
D67    0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
FV356  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
Mo24W  0.000000e+00    0 1.110223e-16   NA    0 1.110223e-16 0.000000e+00
NC358  0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
OH43   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
P029   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16   NA    0 1.110223e-16 0.000000e+00
P079   0.000000e+00    0 1.110223e-16   NA    0 1.110223e-16 0.000000e+00
P084   0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
P086   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
P087   1.110223e-16    0 0.000000e+00   NA    0 2.220446e-16 1.110223e-16
P104             NA   NA           NA    0   NA           NA           NA
P128   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
S025   0.000000e+00    0 2.220446e-16   NA    0 0.000000e+00 0.000000e+00
S034   0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
S052   1.110223e-16    0 2.220446e-16   NA    0 2.220446e-16 1.110223e-16
T8     0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
UH300  0.000000e+00    0 2.220446e-16   NA    0 1.110223e-16 0.000000e+00
W117   0.000000e+00    0 0.000000e+00   NA    0 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 1.110223e-16   NA    0 0.000000e+00 0.000000e+00
               S052 T8        UH300 W117        W182E
A374             NA NA           NA   NA           NA
B101   0.000000e+00  0 0.000000e+00    0 0.000000e+00
B102   1.110223e-16  0 0.000000e+00    0 0.000000e+00
B106   2.220446e-16  0 2.220446e-16    0 1.110223e-16
B111   0.000000e+00  0 0.000000e+00    0 0.000000e+00
B112             NA NA           NA   NA           NA
CML103 0.000000e+00  0 0.000000e+00    0 0.000000e+00
CML91  0.000000e+00  0 0.000000e+00    0 0.000000e+00
Co158  0.000000e+00  0 0.000000e+00    0 0.000000e+00
D23    0.000000e+00  0 0.000000e+00    0 0.000000e+00
D32    0.000000e+00  0 0.000000e+00    0 0.000000e+00
D67    0.000000e+00  0 0.000000e+00    0 0.000000e+00
FV356  0.000000e+00  0 0.000000e+00    0 0.000000e+00
Mo24W  1.110223e-16  0 1.110223e-16    0 0.000000e+00
NC358  0.000000e+00  0 0.000000e+00    0 0.000000e+00
OH43   0.000000e+00  0 0.000000e+00    0 0.000000e+00
P029   0.000000e+00  0 0.000000e+00    0 0.000000e+00
P068   2.220446e-16  0 1.110223e-16    0 0.000000e+00
P079   1.110223e-16  0 1.110223e-16    0 0.000000e+00
P084   1.110223e-16  0 0.000000e+00    0 0.000000e+00
P086   0.000000e+00  0 0.000000e+00    0 0.000000e+00
P087   2.220446e-16  0 2.220446e-16    0 1.110223e-16
P104             NA NA           NA   NA           NA
P128   0.000000e+00  0 0.000000e+00    0 0.000000e+00
S025   2.220446e-16  0 1.110223e-16    0 0.000000e+00
S034   1.110223e-16  0 0.000000e+00    0 0.000000e+00
S052   0.000000e+00  0 2.220446e-16    0 1.110223e-16
T8     0.000000e+00  0 0.000000e+00    0 0.000000e+00
UH300  2.220446e-16  0 0.000000e+00    0 0.000000e+00
W117   0.000000e+00  0 0.000000e+00    0 0.000000e+00
W182E  1.110223e-16  0 0.000000e+00    0 0.000000e+00
> dCNV_Bio_MB_ms
               A374 B101 B102 B106 B111 B112       CML103        CML91 Co158
A374   0.000000e+00    0    0    0    0    0 1.110223e-16 2.220446e-16     0
B101   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B102   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B106   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B111   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B112   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
CML103 1.110223e-16    0    0    0    0    0 0.000000e+00 2.220446e-16     0
CML91  2.220446e-16    0    0    0    0    0 2.220446e-16 0.000000e+00     0
Co158  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D23    0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D32    2.000000e+00    2    2    2    2    2 2.000000e+00 2.000000e+00     2
D67    2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
FV356  1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
Mo24W  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
NC358  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
OH43   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P029   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P068   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P079   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P084   1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
P086   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P087   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P104   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P128   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
S025   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
S034   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
S052             NA   NA   NA   NA   NA   NA           NA           NA    NA
T8     0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
UH300  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
W117   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
W182E  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
       D23 D32          D67        FV356 Mo24W        NC358         OH43 P029
A374     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
B101     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B102     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B106     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B111     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B112     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
CML103   0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
CML91    0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
Co158    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D23      0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D32      2   0 2.000000e+00 2.000000e+00     2 2.000000e+00 2.000000e+00    2
D67      0   2 0.000000e+00 2.220446e-16     0 1.110223e-16 1.110223e-16    0
FV356    0   2 2.220446e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
Mo24W    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
NC358    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
OH43     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P029     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P068     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P079     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P084     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
P086     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P087     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P104     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P128     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
S025     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S034     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S052    NA  NA           NA           NA    NA           NA           NA   NA
T8       0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
UH300    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W117     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W182E    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
               P068 P079         P084         P086         P087         P104
A374   2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B106   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B112   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
CML91  2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00    2 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
FV356  2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
Mo24W  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
OH43   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
P079   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.220446e-16    0 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P086   2.220446e-16    0 2.220446e-16 0.000000e+00 1.110223e-16 2.220446e-16
P087   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P104   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 0.000000e+00
P128   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
S025   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
S034   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S052             NA   NA           NA           NA           NA           NA
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P128         S025 S034 S052 T8        UH300 W117 W182E
A374   2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
B101   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B102   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B106   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B111   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
B112   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
CML103 2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
CML91  2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
Co158  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
D23    0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
D32    2.000000e+00 2.000000e+00    2   NA  2 2.000000e+00    2     2
D67    2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
FV356  2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
Mo24W  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
NC358  1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
OH43   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P029   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
P068   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P079   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
P084   2.220446e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P086   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P087   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
P104   2.220446e-16 1.110223e-16    0   NA  0 1.110223e-16    0     0
P128   0.000000e+00 1.110223e-16    0   NA  0 1.110223e-16    0     0
S025   1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
S034   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
S052             NA           NA   NA    0 NA           NA   NA    NA
T8     0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
UH300  1.110223e-16 0.000000e+00    0   NA  0 0.000000e+00    0     0
W117   0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
W182E  0.000000e+00 0.000000e+00    0   NA  0 0.000000e+00    0     0
> removeMH <- c("P104", "B112", "A374")
> removeMB <- c("S052")
> rm(list=ls(all=TRUE))
> remove <- c("F047", "Mo17", "UH007")
> removeMH <- c("P104", "B112", "A374")
> removeMB <- c("S052")
> 
> #### dCNV ######
> data <- read.csv("CNV_Filtered list_cluster analysis_MMM_3col___FINAL.csv", header=TRUE, sep=";", row.names="Marker")
> data <- data[,!(colnames(data) %in% remove)]
> dCNV <- as.dist(1-cor(data))
> 
> 
> #### dSNP ######
> moses <- read.csv('CGH_SNP data_Moses_data.csv', sep=';', row.names='marker')
> moses <- moses[,!(colnames(moses) %in% remove)]
> 
> t(moses) -> x
> x[x=='AA'] <- 11
> x[x=='AC'] <- 12
> x[x=='AG'] <- 13
> x[x=='AT'] <- 14
> x[x=='CC'] <- 22
> x[x=='CG'] <- 23
> x[x=='CT'] <- 24
> x[x=='GG'] <- 33
> x[x=='GT'] <- 34
> x[x=='TT'] <- 44
> x[x=='']   <- NA
> # (not in the first moses-dataset)
> x[x=='CA'] <- 12
> x[x=='GA'] <- 13
> x[x=='TA'] <- 14
> x[x=='GC'] <- 23
> x[x=='TC'] <- 24
> x[x=='TG'] <- 34
> 
> dx <- apply(x,1,as.numeric) 
> dSNP <- as.dist(1-cor(dx, use="na.or.complete"))
> 
> 
> #### dCNV_Bio ####
> 
> 
> moses2 <- read.csv('CNV_Biomass_Dataxls.csv', sep=';', row.names='Genotype')
> moses2 <- moses2[,!(colnames(moses2) %in% remove)]
> moses2_Maturity_Biomass <- moses2[c("Maturity_group", "Biomass_Rank"),!(colnames(moses2) %in% removeMB)]
> moses2_Maturity_Heterosis <- moses2[c("Maturity_group", "Mid_parent_Heterosis_Rank"),!(colnames(moses2) %in% removeMH)]
> moses2_Biomass_Heterosis <- moses2[c("Biomass_Rank", "Mid_parent_Heterosis_Rank"),]
> 
> dCNV_Bio <- as.dist(1-cor(moses2))
> dCNV_Bio_MB <- as.dist(1-cor(moses2_Maturity_Biomass))
> dCNV_Bio_MH <- as.dist(1-cor(moses2_Maturity_Heterosis))
> dCNV_Bio_BH <- as.dist(1-cor(moses2_Biomass_Heterosis))
> 
> moses2_BioRow1 <- moses2[1,] # Maturity_group
> #moses2_BioRow2 <- moses2[2,] # Biomass_rank
> #moses2_BioRow3 <- moses2[3,] # Mid Parent Heterosis_rank
> dCNV_BioRow1 <- as.dist(1-cor(moses2_BioRow1))
> #dCNV_BioRow2 <- as.dist(1-cor(moses2_BioRow2))
> #dCNV_BioRow3 <- as.dist(1-cor(moses2_BioRow3))
> 
> ###### mantel.rtest ############
> library("ade4")
> 
> dSNPm <- as.matrix(dSNP) 
> dSNPms <- dSNPm[order(attr(dSNP, "Labels")),order(attr(dSNP, "Labels"))]
> 
> dCNVm <- as.matrix(dCNV)
> dCNVms <- dCNVm[order(attr(dCNV, "Labels")),order(attr(dCNV, "Labels"))]
> 
> dCNV_Biom <- as.matrix(dCNV_Bio) 
> dCNV_Bioms <- dCNV_Biom[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio, "Labels"))]
> ###
> dCNV_Bio_MB_m <- as.matrix(dCNV_Bio_MB) 
> dCNV_Bio_MB_ms <- dCNV_Bio_MB_m[order(attr(dCNV_Bio_MB, "Labels")),order(attr(dCNV_Bio_MB, "Labels"))]
> 
> dCNV_Bio_MH_m <- as.matrix(dCNV_Bio_MH) 
> dCNV_Bio_MH_ms <- dCNV_Bio_MH_m[order(attr(dCNV_Bio_MH, "Labels")),order(attr(dCNV_Bio_MH, "Labels"))]
> 
> dCNV_Bio_BH_m <- as.matrix(dCNV_Bio_BH) 
> dCNV_Bio_BH_ms <- dCNV_Biom[order(attr(dCNV_Bio_BH, "Labels")),order(attr(dCNV_Bio_BH, "Labels"))]
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bio_MB_ms),nrepet=100000)
Fehler in mantel.rtest(m1 = as.dist(dSNPms), m2 = as.dist(dCNV_Bio_MB_ms),  : 
  Non convenient dimension
> dCNV_Bio_MB_ms
               A374 B101 B102 B106 B111 B112       CML103        CML91 Co158
A374   0.000000e+00    0    0    0    0    0 1.110223e-16 2.220446e-16     0
B101   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B102   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B106   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B111   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B112   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
CML103 1.110223e-16    0    0    0    0    0 0.000000e+00 2.220446e-16     0
CML91  2.220446e-16    0    0    0    0    0 2.220446e-16 0.000000e+00     0
Co158  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D23    0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D32    2.000000e+00    2    2    2    2    2 2.000000e+00 2.000000e+00     2
D67    2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
FV356  1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
Mo24W  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
NC358  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
OH43   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P029   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P068   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P079   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P084   1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
P086   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P087   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P104   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P128   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
S025   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
S034   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
T8     0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
UH300  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
W117   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
W182E  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
       D23 D32          D67        FV356 Mo24W        NC358         OH43 P029
A374     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
B101     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B102     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B106     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B111     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B112     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
CML103   0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
CML91    0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
Co158    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D23      0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D32      2   0 2.000000e+00 2.000000e+00     2 2.000000e+00 2.000000e+00    2
D67      0   2 0.000000e+00 2.220446e-16     0 1.110223e-16 1.110223e-16    0
FV356    0   2 2.220446e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
Mo24W    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
NC358    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
OH43     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P029     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P068     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P079     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P084     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
P086     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P087     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P104     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P128     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
S025     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S034     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
T8       0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
UH300    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W117     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W182E    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
               P068 P079         P084         P086         P087         P104
A374   2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B106   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B112   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
CML91  2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00    2 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
FV356  2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
Mo24W  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
OH43   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
P079   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.220446e-16    0 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P086   2.220446e-16    0 2.220446e-16 0.000000e+00 1.110223e-16 2.220446e-16
P087   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P104   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 0.000000e+00
P128   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
S025   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
S034   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P128         S025 S034 T8        UH300 W117 W182E
A374   2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
B101   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B102   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B106   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B111   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B112   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
CML103 2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
CML91  2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
Co158  0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
D23    0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
D32    2.000000e+00 2.000000e+00    2  2 2.000000e+00    2     2
D67    2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
FV356  2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
Mo24W  0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
NC358  1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
OH43   1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
P029   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
P068   2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
P079   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
P084   2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
P086   2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
P087   1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
P104   2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
P128   0.000000e+00 1.110223e-16    0  0 1.110223e-16    0     0
S025   1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
S034   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
T8     0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
UH300  1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
W117   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
W182E  0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
> dCNV_Bio_MH_ms
       B101         B102         B106 B111 CML103 CML91 Co158 D23 D32 D67 FV356
B101      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
B102      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
B106      0 1.110223e-16 0.000000e+00    0      0     0     0   0   0   0     0
B111      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
CML103    0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
CML91     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
Co158     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
D23       0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
D32       0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
D67       0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
FV356     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
Mo24W     0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
NC358     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
OH43      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
P029      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
P068      0 0.000000e+00 2.220446e-16    0      0     0     0   0   0   0     0
P079      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
P084      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
P086      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
P087      0 1.110223e-16 2.220446e-16    0      0     0     0   0   0   0     0
P128      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
S025      0 0.000000e+00 2.220446e-16    0      0     0     0   0   0   0     0
S034      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
S052      0 1.110223e-16 2.220446e-16    0      0     0     0   0   0   0     0
T8        0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
UH300     0 0.000000e+00 2.220446e-16    0      0     0     0   0   0   0     0
W117      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
W182E     0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
              Mo24W NC358 OH43 P029         P068         P079         P084 P086
B101   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
B102   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
B106   1.110223e-16     0    0    0 2.220446e-16 1.110223e-16 1.110223e-16    0
B111   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
CML103 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
CML91  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
Co158  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
D23    0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
D32    0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
D67    0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
FV356  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
Mo24W  0.000000e+00     0    0    0 1.110223e-16 0.000000e+00 0.000000e+00    0
NC358  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
OH43   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P029   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P068   1.110223e-16     0    0    0 0.000000e+00 1.110223e-16 0.000000e+00    0
P079   0.000000e+00     0    0    0 1.110223e-16 0.000000e+00 0.000000e+00    0
P084   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P086   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P087   1.110223e-16     0    0    0 2.220446e-16 1.110223e-16 1.110223e-16    0
P128   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
S025   1.110223e-16     0    0    0 1.110223e-16 1.110223e-16 0.000000e+00    0
S034   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
S052   1.110223e-16     0    0    0 2.220446e-16 1.110223e-16 1.110223e-16    0
T8     0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
UH300  1.110223e-16     0    0    0 1.110223e-16 1.110223e-16 0.000000e+00    0
W117   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
W182E  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
               P087 P128         S025         S034         S052 T8        UH300
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
B102   1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
B106   2.220446e-16    0 2.220446e-16 1.110223e-16 2.220446e-16  0 2.220446e-16
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
CML103 0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
CML91  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
D32    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
D67    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
FV356  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
Mo24W  1.110223e-16    0 1.110223e-16 0.000000e+00 1.110223e-16  0 1.110223e-16
NC358  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
OH43   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
P068   2.220446e-16    0 1.110223e-16 0.000000e+00 2.220446e-16  0 1.110223e-16
P079   1.110223e-16    0 1.110223e-16 0.000000e+00 1.110223e-16  0 1.110223e-16
P084   1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
P086   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
P087   0.000000e+00    0 2.220446e-16 1.110223e-16 2.220446e-16  0 2.220446e-16
P128   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
S025   2.220446e-16    0 0.000000e+00 0.000000e+00 2.220446e-16  0 1.110223e-16
S034   1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
S052   2.220446e-16    0 2.220446e-16 1.110223e-16 0.000000e+00  0 2.220446e-16
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
UH300  2.220446e-16    0 1.110223e-16 0.000000e+00 2.220446e-16  0 0.000000e+00
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
W182E  1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
       W117        W182E
B101      0 0.000000e+00
B102      0 0.000000e+00
B106      0 1.110223e-16
B111      0 0.000000e+00
CML103    0 0.000000e+00
CML91     0 0.000000e+00
Co158     0 0.000000e+00
D23       0 0.000000e+00
D32       0 0.000000e+00
D67       0 0.000000e+00
FV356     0 0.000000e+00
Mo24W     0 0.000000e+00
NC358     0 0.000000e+00
OH43      0 0.000000e+00
P029      0 0.000000e+00
P068      0 0.000000e+00
P079      0 0.000000e+00
P084      0 0.000000e+00
P086      0 0.000000e+00
P087      0 1.110223e-16
P128      0 0.000000e+00
S025      0 0.000000e+00
S034      0 0.000000e+00
S052      0 1.110223e-16
T8        0 0.000000e+00
UH300     0 0.000000e+00
W117      0 0.000000e+00
W182E     0 0.000000e+00
> dCNV_Bio_MH_ms
       B101         B102         B106 B111 CML103 CML91 Co158 D23 D32 D67 FV356
B101      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
B102      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
B106      0 1.110223e-16 0.000000e+00    0      0     0     0   0   0   0     0
B111      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
CML103    0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
CML91     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
Co158     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
D23       0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
D32       0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
D67       0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
FV356     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
Mo24W     0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
NC358     0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
OH43      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
P029      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
P068      0 0.000000e+00 2.220446e-16    0      0     0     0   0   0   0     0
P079      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
P084      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
P086      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
P087      0 1.110223e-16 2.220446e-16    0      0     0     0   0   0   0     0
P128      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
S025      0 0.000000e+00 2.220446e-16    0      0     0     0   0   0   0     0
S034      0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
S052      0 1.110223e-16 2.220446e-16    0      0     0     0   0   0   0     0
T8        0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
UH300     0 0.000000e+00 2.220446e-16    0      0     0     0   0   0   0     0
W117      0 0.000000e+00 0.000000e+00    0      0     0     0   0   0   0     0
W182E     0 0.000000e+00 1.110223e-16    0      0     0     0   0   0   0     0
              Mo24W NC358 OH43 P029         P068         P079         P084 P086
B101   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
B102   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
B106   1.110223e-16     0    0    0 2.220446e-16 1.110223e-16 1.110223e-16    0
B111   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
CML103 0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
CML91  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
Co158  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
D23    0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
D32    0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
D67    0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
FV356  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
Mo24W  0.000000e+00     0    0    0 1.110223e-16 0.000000e+00 0.000000e+00    0
NC358  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
OH43   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P029   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P068   1.110223e-16     0    0    0 0.000000e+00 1.110223e-16 0.000000e+00    0
P079   0.000000e+00     0    0    0 1.110223e-16 0.000000e+00 0.000000e+00    0
P084   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P086   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
P087   1.110223e-16     0    0    0 2.220446e-16 1.110223e-16 1.110223e-16    0
P128   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
S025   1.110223e-16     0    0    0 1.110223e-16 1.110223e-16 0.000000e+00    0
S034   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
S052   1.110223e-16     0    0    0 2.220446e-16 1.110223e-16 1.110223e-16    0
T8     0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
UH300  1.110223e-16     0    0    0 1.110223e-16 1.110223e-16 0.000000e+00    0
W117   0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
W182E  0.000000e+00     0    0    0 0.000000e+00 0.000000e+00 0.000000e+00    0
               P087 P128         S025         S034         S052 T8        UH300
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
B102   1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
B106   2.220446e-16    0 2.220446e-16 1.110223e-16 2.220446e-16  0 2.220446e-16
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
CML103 0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
CML91  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
D32    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
D67    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
FV356  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
Mo24W  1.110223e-16    0 1.110223e-16 0.000000e+00 1.110223e-16  0 1.110223e-16
NC358  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
OH43   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
P068   2.220446e-16    0 1.110223e-16 0.000000e+00 2.220446e-16  0 1.110223e-16
P079   1.110223e-16    0 1.110223e-16 0.000000e+00 1.110223e-16  0 1.110223e-16
P084   1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
P086   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
P087   0.000000e+00    0 2.220446e-16 1.110223e-16 2.220446e-16  0 2.220446e-16
P128   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
S025   2.220446e-16    0 0.000000e+00 0.000000e+00 2.220446e-16  0 1.110223e-16
S034   1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
S052   2.220446e-16    0 2.220446e-16 1.110223e-16 0.000000e+00  0 2.220446e-16
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
UH300  2.220446e-16    0 1.110223e-16 0.000000e+00 2.220446e-16  0 0.000000e+00
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00  0 0.000000e+00
W182E  1.110223e-16    0 0.000000e+00 0.000000e+00 1.110223e-16  0 0.000000e+00
       W117        W182E
B101      0 0.000000e+00
B102      0 0.000000e+00
B106      0 1.110223e-16
B111      0 0.000000e+00
CML103    0 0.000000e+00
CML91     0 0.000000e+00
Co158     0 0.000000e+00
D23       0 0.000000e+00
D32       0 0.000000e+00
D67       0 0.000000e+00
FV356     0 0.000000e+00
Mo24W     0 0.000000e+00
NC358     0 0.000000e+00
OH43      0 0.000000e+00
P029      0 0.000000e+00
P068      0 0.000000e+00
P079      0 0.000000e+00
P084      0 0.000000e+00
P086      0 0.000000e+00
P087      0 1.110223e-16
P128      0 0.000000e+00
S025      0 0.000000e+00
S034      0 0.000000e+00
S052      0 1.110223e-16
T8        0 0.000000e+00
UH300     0 0.000000e+00
W117      0 0.000000e+00
W182E     0 0.000000e+00
> dCNV_Bio_MB_ms
               A374 B101 B102 B106 B111 B112       CML103        CML91 Co158
A374   0.000000e+00    0    0    0    0    0 1.110223e-16 2.220446e-16     0
B101   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B102   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B106   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B111   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
B112   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
CML103 1.110223e-16    0    0    0    0    0 0.000000e+00 2.220446e-16     0
CML91  2.220446e-16    0    0    0    0    0 2.220446e-16 0.000000e+00     0
Co158  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D23    0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
D32    2.000000e+00    2    2    2    2    2 2.000000e+00 2.000000e+00     2
D67    2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
FV356  1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
Mo24W  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
NC358  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
OH43   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P029   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P068   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P079   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
P084   1.110223e-16    0    0    0    0    0 1.110223e-16 2.220446e-16     0
P086   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P087   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
P104   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
P128   2.220446e-16    0    0    0    0    0 2.220446e-16 2.220446e-16     0
S025   0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
S034   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
T8     0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
UH300  0.000000e+00    0    0    0    0    0 0.000000e+00 1.110223e-16     0
W117   0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
W182E  0.000000e+00    0    0    0    0    0 0.000000e+00 0.000000e+00     0
       D23 D32          D67        FV356 Mo24W        NC358         OH43 P029
A374     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
B101     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B102     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B106     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B111     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
B112     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
CML103   0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
CML91    0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
Co158    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D23      0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
D32      2   0 2.000000e+00 2.000000e+00     2 2.000000e+00 2.000000e+00    2
D67      0   2 0.000000e+00 2.220446e-16     0 1.110223e-16 1.110223e-16    0
FV356    0   2 2.220446e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
Mo24W    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
NC358    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
OH43     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P029     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P068     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P079     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P084     0   2 2.220446e-16 1.110223e-16     0 0.000000e+00 0.000000e+00    0
P086     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P087     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
P104     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
P128     0   2 2.220446e-16 2.220446e-16     0 1.110223e-16 1.110223e-16    0
S025     0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
S034     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
T8       0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
UH300    0   2 1.110223e-16 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W117     0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
W182E    0   2 0.000000e+00 0.000000e+00     0 0.000000e+00 0.000000e+00    0
               P068 P079         P084         P086         P087         P104
A374   2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
B101   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B102   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B106   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B111   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
B112   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
CML91  2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
Co158  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00    2 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
FV356  2.220446e-16    0 1.110223e-16 2.220446e-16 0.000000e+00 2.220446e-16
Mo24W  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
OH43   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P029   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
P079   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.220446e-16    0 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P086   2.220446e-16    0 2.220446e-16 0.000000e+00 1.110223e-16 2.220446e-16
P087   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
P104   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 0.000000e+00
P128   2.220446e-16    0 2.220446e-16 2.220446e-16 1.110223e-16 2.220446e-16
S025   1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
S034   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16    0 0.000000e+00 1.110223e-16 0.000000e+00 1.110223e-16
W117   0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00    0 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P128         S025 S034 T8        UH300 W117 W182E
A374   2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
B101   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B102   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B106   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B111   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
B112   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
CML103 2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
CML91  2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
Co158  0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
D23    0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
D32    2.000000e+00 2.000000e+00    2  2 2.000000e+00    2     2
D67    2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
FV356  2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
Mo24W  0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
NC358  1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
OH43   1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
P029   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
P068   2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
P079   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
P084   2.220446e-16 0.000000e+00    0  0 0.000000e+00    0     0
P086   2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
P087   1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
P104   2.220446e-16 1.110223e-16    0  0 1.110223e-16    0     0
P128   0.000000e+00 1.110223e-16    0  0 1.110223e-16    0     0
S025   1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
S034   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
T8     0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
UH300  1.110223e-16 0.000000e+00    0  0 0.000000e+00    0     0
W117   0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
W182E  0.000000e+00 0.000000e+00    0  0 0.000000e+00    0     0
> dCNV_Bio_MB
               A374         B101         B102         B106         B111
B101   0.000000e+00                                                    
B102   0.000000e+00 0.000000e+00                                       
B106   0.000000e+00 0.000000e+00 0.000000e+00                          
B111   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00             
B112   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML103 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
CML91  2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
Co158  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D23    0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
D32    2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
FV356  1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
Mo24W  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
OH43   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P029   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P079   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P086   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P087   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P104   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P128   2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S025   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               B112       CML103        CML91        Co158          D23
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103 0.000000e+00                                                    
CML91  0.000000e+00 2.220446e-16                                       
Co158  0.000000e+00 0.000000e+00 0.000000e+00                          
D23    0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00             
D32    2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00 2.000000e+00
D67    0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
FV356  0.000000e+00 1.110223e-16 2.220446e-16 0.000000e+00 0.000000e+00
Mo24W  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
NC358  0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
OH43   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
P029   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
P079   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   0.000000e+00 1.110223e-16 2.220446e-16 0.000000e+00 0.000000e+00
P086   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
P087   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
P104   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
P128   0.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 0.000000e+00
S025   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
                D32          D67        FV356        Mo24W        NC358
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67    2.000000e+00                                                    
FV356  2.000000e+00 2.220446e-16                                       
Mo24W  2.000000e+00 0.000000e+00 0.000000e+00                          
NC358  2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00             
OH43   2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
P029   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P068   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
P079   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
P084   2.000000e+00 2.220446e-16 1.110223e-16 0.000000e+00 0.000000e+00
P086   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
P087   2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
P104   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
P128   2.000000e+00 2.220446e-16 2.220446e-16 0.000000e+00 1.110223e-16
S025   2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
S034   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  2.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00 0.000000e+00
W117   2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               OH43         P029         P068         P079         P084
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67                                                                    
FV356                                                                  
Mo24W                                                                  
NC358                                                                  
OH43                                                                   
P029   0.000000e+00                                                    
P068   1.110223e-16 0.000000e+00                                       
P079   0.000000e+00 0.000000e+00 0.000000e+00                          
P084   0.000000e+00 0.000000e+00 2.220446e-16 0.000000e+00             
P086   1.110223e-16 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P087   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
P104   1.110223e-16 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
P128   1.110223e-16 0.000000e+00 2.220446e-16 0.000000e+00 2.220446e-16
S025   0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  0.000000e+00 0.000000e+00 1.110223e-16 0.000000e+00 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               P086         P087         P104         P128         S025
B101                                                                   
B102                                                                   
B106                                                                   
B111                                                                   
B112                                                                   
CML103                                                                 
CML91                                                                  
Co158                                                                  
D23                                                                    
D32                                                                    
D67                                                                    
FV356                                                                  
Mo24W                                                                  
NC358                                                                  
OH43                                                                   
P029                                                                   
P068                                                                   
P079                                                                   
P084                                                                   
P086                                                                   
P087   1.110223e-16                                                    
P104   2.220446e-16 1.110223e-16                                       
P128   2.220446e-16 1.110223e-16 2.220446e-16                          
S025   1.110223e-16 0.000000e+00 1.110223e-16 1.110223e-16             
S034   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
T8     0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
UH300  1.110223e-16 0.000000e+00 1.110223e-16 1.110223e-16 0.000000e+00
W117   0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
               S034           T8        UH300         W117
B101                                                      
B102                                                      
B106                                                      
B111                                                      
B112                                                      
CML103                                                    
CML91                                                     
Co158                                                     
D23                                                       
D32                                                       
D67                                                       
FV356                                                     
Mo24W                                                     
NC358                                                     
OH43                                                      
P029                                                      
P068                                                      
P079                                                      
P084                                                      
P086                                                      
P087                                                      
P104                                                      
P128                                                      
S025                                                      
S034                                                      
T8     0.000000e+00                                       
UH300  0.000000e+00 0.000000e+00                          
W117   0.000000e+00 0.000000e+00 0.000000e+00             
W182E  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> mantel.rtest(m1=as.dist(dSNPms), m2=as.dist(dCNV_Bio_BH_ms),nrepet=100000)
Monte-Carlo test
Observation: -0.006044359 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 100000 replicates
Simulated p-value: 0.5225448 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> dCNV_Bio_BH_ms
               A374         B101         B102       B106        B111
A374   0.000000e+00 2.347784e-01 0.2794233079 0.00308484 0.133974596
B101   2.347784e-01 0.000000e+00 0.0022270718 0.18661186 0.015415181
B102   2.794233e-01 2.227072e-03 0.0000000000 0.22722543 0.029274657
B106   3.084840e-03 1.866119e-01 0.2272254273 0.00000000 0.097402789
B111   1.339746e-01 1.541518e-02 0.0292746566 0.09740279 0.000000000
B112   1.110223e-16 2.347784e-01 0.2794233079 0.00308484 0.133974596
CML103 1.263795e+00 5.808973e-01 0.5212691905 1.18727428 0.746163459
CML91  7.796341e-01 2.034298e-01 0.1648792458 0.70375655 0.321448856
Co158  1.109467e-01 2.495830e-02 0.0419391365 0.07775781 0.001155402
D23    8.236311e-01 2.313633e-01 0.1904066867 0.74691880 0.355097978
D32    1.609994e+00 9.566561e-01 0.8901130846 1.54591922 1.132067636
D67    1.453921e+00 7.737264e-01 0.7092580977 1.38258541 0.947585758
FV356  1.970449e-01 1.850862e-03 0.0081302162 0.15274073 0.006600732
Mo24W  7.537862e-01 1.876429e-01 0.1505540031 0.67847517 0.302164813
NC358  9.556322e-01 3.229157e-01 0.2753371259 0.87735962 0.462068704
OH43   2.269010e-01 7.597822e-05 0.0031251073 0.17950288 0.013333930
P029   7.494434e-01 1.850366e-01 0.1481968324 0.67423320 0.298960653
P068   1.419314e+00 7.364298e-01 0.6726731646 1.34676694 0.909215870
P079   1.069116e+00 4.106618e-01 0.3580865204 0.99060412 0.561052214
P084   1.162758e+00 4.893626e-01 0.4331495708 1.08481543 0.647619261
P086   2.593871e-01 6.994256e-04 0.0004306323 0.20893405 0.022644445
P087   1.780051e-01 4.369787e-03 0.0128160128 0.13584301 0.003384104
P104   0.000000e+00 2.347784e-01 0.2794233079 0.00308484 0.133974596
P128   1.464739e+00 7.856067e-01 0.7209330096 1.39380990 0.959752386
S025   2.794233e-01 2.227072e-03 0.0000000000 0.22722543 0.029274657
S034   6.866958e-01 1.488977e-01 0.1157745489 0.61312718 0.253844208
S052   1.500000e+00 8.250922e-01 0.7598077693 1.43048609 1.000000000
T8     5.765848e-01 9.278204e-02 0.0667434747 0.50678709 0.180343835
UH300  2.794233e-01 2.227072e-03 0.0000000000 0.22722543 0.029274657
W117   1.057053e-01 2.759453e-02 0.0453215913 0.07334293 0.001778833
W182E  3.443258e-02 9.364910e-02 0.1238510064 0.01699265 0.033717610
               B112      CML103        CML91        Co158         D23
A374   1.110223e-16 1.263794672 0.7796340519 1.109467e-01 0.823631095
B101   2.347784e-01 0.580897339 0.2034297767 2.495830e-02 0.231363314
B102   2.794233e-01 0.521269191 0.1648792458 4.193914e-02 0.190406687
B106   3.084840e-03 1.187274283 0.7037565494 7.775781e-02 0.746918797
B111   1.339746e-01 0.746163459 0.3214488563 1.155402e-03 0.355097978
B112   0.000000e+00 1.263794672 0.7796340519 1.109467e-01 0.823631095
CML103 1.263795e+00 0.000000000 0.1172644885 7.929397e-01 0.097066925
CML91  7.796341e-01 0.117264489 0.0000000000 3.575332e-01 0.001007536
Co158  1.109467e-01 0.792939673 0.3575332276 0.000000e+00 0.392571344
D23    8.236311e-01 0.097066925 0.0010075360 3.925713e-01 0.000000000
D32    1.609994e+00 0.074748863 0.3614956513 1.179551e+00 0.327599852
D67    1.453921e+00 0.020777770 0.2308907915 9.956372e-01 0.202983230
FV356  1.970449e-01 0.636888111 0.2416687645 1.326102e-02 0.271687567
Mo24W  7.537862e-01 0.130065077 0.0003532868 3.373923e-01 0.002553291
NC358  9.556322e-01 0.048074995 0.0157661022 5.032017e-01 0.008820057
OH43   2.269010e-01 0.592121187 0.2109424328 2.229556e-02 0.239307008
P029   7.494434e-01 0.132284815 0.0004824942 3.340411e-01 0.002883486
P068   1.419314e+00 0.013702696 0.2068784321 9.571792e-01 0.180343835
P079   1.069116e+00 0.019495306 0.0421462286 6.047391e-01 0.030219744
P084   1.162758e+00 0.005348158 0.0734551295 6.930008e-01 0.057506167
P086   2.593871e-01 0.547238390 0.1813801150 3.394271e-02 0.207980082
P087   1.780051e-01 0.667515244 0.2633652464 8.485852e-03 0.294458177
P104   0.000000e+00 1.263794672 0.7796340519 1.109467e-01 0.823631095
P128   1.464739e+00 0.023320280 0.2387319570 1.007817e+00 0.210398232
S025   2.794233e-01 0.521269191 0.1648792458 4.193914e-02 0.190406687
S034   6.866958e-01 0.166632936 0.0046506607 2.867012e-01 0.009976685
S052   1.500000e+00 0.032752870 0.2654468397 1.048057e+00 0.235734743
T8     5.765848e-01 0.237848182 0.0230283311 2.088206e-01 0.033588295
UH300  2.794233e-01 0.521269191 0.1648792458 4.193914e-02 0.190406687
W117   1.057053e-01 0.804281925 0.3664496861 6.704252e-05 0.401810377
W182E  3.443258e-02 1.003773504 0.5334641389 2.246013e-02 0.573629102
               D32          D67        FV356        Mo24W       NC358
A374   1.609994281 1.453921e+00 0.1970449315 7.537862e-01 0.955632175
B101   0.956656070 7.737264e-01 0.0018508625 1.876429e-01 0.322915727
B102   0.890113085 7.092581e-01 0.0081302162 1.505540e-01 0.275337126
B106   1.545919218 1.382585e+00 0.1527407331 6.784752e-01 0.877359617
B111   1.132067636 9.475858e-01 0.0066007322 3.021648e-01 0.462068704
B112   1.609994281 1.453921e+00 0.1970449315 7.537862e-01 0.955632175
CML103 0.074748863 2.077777e-02 0.6368881107 1.300651e-01 0.048074995
CML91  0.361495651 2.308908e-01 0.2416687645 3.532868e-04 0.015766102
Co158  1.179551033 9.956372e-01 0.0132610159 3.373923e-01 0.503201682
D23    0.327599852 2.029832e-01 0.2716875665 2.553291e-03 0.008820057
D32    0.000000000 1.704405e-02 1.0174927857 3.821770e-01 0.235438615
D67    0.017044049 0.000000e+00 0.8333815377 2.481497e-01 0.129974803
FV356  1.017492786 8.333815e-01 0.0000000000 2.246106e-01 0.368922011
Mo24W  0.382176991 2.481497e-01 0.2246105667 0.000000e+00 0.020814913
NC358  0.235438615 1.299748e-01 0.3689220111 2.081491e-02 0.000000000
OH43   0.968974606 7.857507e-01 0.0011770608 1.948931e-01 0.332038550
P029   0.385708465 2.511132e-01 0.2217872541 1.004987e-05 0.021734719
P068   0.024842173 7.399187e-04 0.7955809201 2.233470e-01 0.111656733
P079   0.167328560 7.971538e-02 0.4608831299 5.011964e-02 0.006440319
P084   0.118878807 4.695990e-02 0.5425951026 8.378111e-02 0.021526741
P086   0.919326851 7.374598e-01 0.0048231001 1.664040e-01 0.295870348
P087   1.050141221 8.656766e-01 0.0005335705 2.456503e-01 0.394595877
P104   1.609994281 1.453921e+00 0.1970449315 7.537862e-01 0.955632175
P128   0.014877866 7.417264e-05 0.8454031267 2.562358e-01 0.136043908
S025   0.890113085 7.092581e-01 0.0081302162 1.505540e-01 0.275337126
S034   0.438603336 2.960346e-01 0.1824001672 2.441908e-03 0.037381706
S052   0.008759293 1.374571e-03 0.8852921331 2.837416e-01 0.157011316
T8     0.540412060 3.849700e-01 0.1200430989 1.770232e-02 0.076170337
UH300  0.890113085 7.092581e-01 0.0081302162 1.505540e-01 0.275337126
W117   1.190930131 1.007217e+00 0.0152066665 3.461092e-01 0.513284283
W182E  1.382843893 1.206484e+00 0.0696312956 5.101197e-01 0.697263104
               OH43         P029         P068        P079        P084
A374   2.269010e-01 7.494434e-01 1.4193139347 1.069116352 1.162757692
B101   7.597822e-05 1.850366e-01 0.7364298012 0.410661827 0.489362644
B102   3.125107e-03 1.481968e-01 0.6726731646 0.358086520 0.433149571
B106   1.795029e-01 6.742332e-01 1.3467669378 0.990604117 1.084815433
B111   1.333393e-02 2.989607e-01 0.9092158701 0.561052214 0.647619261
B112   2.269010e-01 7.494434e-01 1.4193139347 1.069116352 1.162757692
CML103 5.921212e-01 1.322848e-01 0.0137026958 0.019495306 0.005348158
CML91  2.109424e-01 4.824942e-04 0.2068784321 0.042146229 0.073455129
Co158  2.229556e-02 3.340411e-01 0.9571792488 0.604739133 0.693000806
D23    2.393070e-01 2.883486e-03 0.1803438353 0.030219744 0.057506167
D32    9.689746e-01 3.857085e-01 0.0248421727 0.167328560 0.118878807
D67    7.857507e-01 2.511132e-01 0.0007399187 0.079715383 0.046959905
FV356  1.177061e-03 2.217873e-01 0.7955809201 0.460883130 0.542595103
Mo24W  1.948931e-01 1.004987e-05 0.2233469911 0.050119640 0.083781107
NC358  3.320386e-01 2.173472e-02 0.1116567332 0.006440319 0.021526741
OH43   0.000000e+00 1.922421e-01 0.7483407800 0.420665280 0.500000000
P029   1.922421e-01 0.000000e+00 0.2261789313 0.051530715 0.085586660
P068   7.483408e-01 2.261789e-01 0.0000000000 0.065348258 0.036017225
P079   4.206653e-01 5.153072e-02 0.0653482583 0.000000000 0.004444220
P084   5.000000e-01 8.558666e-02 0.0360172252 0.004444220 0.000000000
P086   1.236308e-03 1.639359e-01 0.7005417389 0.380863372 0.457567995
P087   3.294311e-03 2.427147e-01 0.8276630344 0.488680380 0.571884805
P104   2.269010e-01 7.494434e-01 1.4193139347 1.069116352 1.162757692
P128   7.976632e-01 2.592401e-01 0.0012824781 0.084548860 0.050719079
S025   3.125107e-03 1.481968e-01 0.6726731646 0.358086520 0.433149571
S034   1.554340e-01 2.138815e-03 0.2692387529 0.074272610 0.114002443
S052   8.372423e-01 2.868774e-01 0.0041294051 0.101487429 0.064143272
T8     9.803638e-02 1.687236e-02 0.3550979784 0.125495600 0.175057997
UH300  3.125107e-03 1.481968e-01 0.6726731646 0.358086520 0.433149571
W117   2.479260e-02 3.427238e-01 0.9687508138 0.615402031 0.704041536
W182E  8.850956e-02 5.062161e-01 1.1686982808 0.807205674 0.900469435
               P086         P087       P104         P128         S025
A374   0.2593871033 0.1780050635 0.00000000 1.464739e+00 0.2794233079
B101   0.0006994256 0.0043697873 0.23477843 7.856067e-01 0.0022270718
B102   0.0004306323 0.0128160128 0.27942331 7.209330e-01 0.0000000000
B106   0.2089340455 0.1358430113 0.00308484 1.393810e+00 0.2272254273
B111   0.0226444451 0.0033841045 0.13397460 9.597524e-01 0.0292746566
B112   0.2593871033 0.1780050635 0.00000000 1.464739e+00 0.2794233079
CML103 0.5472383896 0.6675152438 1.26379467 2.332028e-02 0.5212691905
CML91  0.1813801150 0.2633652464 0.77963405 2.387320e-01 0.1648792458
Co158  0.0339427077 0.0084858519 0.11094674 1.007817e+00 0.0419391365
D23    0.2079800824 0.2944581771 0.82363109 2.103982e-01 0.1904066867
D32    0.9193268515 1.0501412211 1.60999428 1.487787e-02 0.8901130846
D67    0.7374598291 0.8656766288 1.45392065 7.417264e-05 0.7092580977
FV356  0.0048231001 0.0005335705 0.19704493 8.454031e-01 0.0081302162
Mo24W  0.1664039936 0.2456502851 0.75378619 2.562358e-01 0.1505540031
NC358  0.2958703484 0.3945958772 0.95563217 1.360439e-01 0.2753371259
OH43   0.0012363084 0.0032943112 0.22690096 7.976632e-01 0.0031251073
P029   0.1639359313 0.2427147270 0.74944341 2.592401e-01 0.1481968324
P068   0.7005417389 0.8276630344 1.41931393 1.282478e-03 0.6726731646
P079   0.3808633717 0.4886803803 1.06911635 8.454886e-02 0.3580865204
P084   0.4575679951 0.5718848048 1.16275769 5.071908e-02 0.4331495708
P086   0.0000000000 0.0085582027 0.25938710 7.492315e-01 0.0004306323
P087   0.0085582027 0.0000000000 0.17800506 8.777557e-01 0.0128160128
P104   0.2593871033 0.1780050635 0.00000000 1.464739e+00 0.2794233079
P128   0.7492315411 0.8777556980 1.46473941 0.000000e+00 0.7209330096
S025   0.0004306323 0.0128160128 0.27942331 7.209330e-01 0.0000000000
S034   0.1298608140 0.2016432064 0.68669582 3.047371e-01 0.1157745489
S052   0.7883963152 0.9178005063 1.50000000 8.102635e-04 0.7598077693
T8     0.0776860955 0.1360291804 0.57658484 3.946192e-01 0.0667434747
UH300  0.0004306323 0.0128160128 0.27942331 7.209330e-01 0.0000000000
W117   0.0369987349 0.0100576228 0.10570529 1.019395e+00 0.0453215913
W182E  0.1100832382 0.0581527179 0.03443258 1.218385e+00 0.1238510064
              S034         S052          T8        UH300         W117
A374   0.686695820 1.5000000000 0.576584841 0.2794233079 1.057053e-01
B101   0.148897735 0.8250922122 0.092782042 0.0022270718 2.759453e-02
B102   0.115774549 0.7598077693 0.066743475 0.0000000000 4.532159e-02
B106   0.613127184 1.4304860917 0.506787088 0.2272254273 7.334293e-02
B111   0.253844208 1.0000000000 0.180343835 0.0292746566 1.778833e-03
B112   0.686695820 1.5000000000 0.576584841 0.2794233079 1.057053e-01
CML103 0.166632936 0.0327528701 0.237848182 0.5212691905 8.042819e-01
CML91  0.004650661 0.2654468397 0.023028331 0.1648792458 3.664497e-01
Co158  0.286701248 1.0480569331 0.208820561 0.0419391365 6.704252e-05
D23    0.009976685 0.2357347434 0.033588295 0.1904066867 4.018104e-01
D32    0.438603336 0.0087592928 0.540412060 0.8901130846 1.190930e+00
D67    0.296034577 0.0013745711 0.384969971 0.7092580977 1.007217e+00
FV356  0.182400167 0.8852921331 0.120043099 0.0081302162 1.520667e-02
Mo24W  0.002441908 0.2837416303 0.017702323 0.1505540031 3.461092e-01
NC358  0.037381706 0.1570113161 0.076170337 0.2753371259 5.132843e-01
OH43   0.155433983 0.8372423082 0.098036385 0.0031251073 2.479260e-02
P029   0.002138815 0.2868774063 0.016872361 0.1481968324 3.427238e-01
P068   0.269238753 0.0041294051 0.355097978 0.6726731646 9.687508e-01
P079   0.074272610 0.1014874287 0.125495600 0.3580865204 6.154020e-01
P084   0.114002443 0.0641432724 0.175057997 0.4331495708 7.040415e-01
P086   0.129860814 0.7883963152 0.077686096 0.0004306323 3.699873e-02
P087   0.201643206 0.9178005063 0.136029180 0.0128160128 1.005762e-02
P104   0.686695820 1.5000000000 0.576584841 0.2794233079 1.057053e-01
P128   0.304737078 0.0008102635 0.394619156 0.7209330096 1.019395e+00
S025   0.115774549 0.7598077693 0.066743475 0.0000000000 4.532159e-02
S034   0.000000000 0.3342286175 0.007017805 0.1157745489 2.948645e-01
S052   0.334228618 0.0000000000 0.427144196 0.7598077693 1.059620e+00
T8     0.007017805 0.4271441964 0.000000000 0.0667434747 2.159553e-01
UH300  0.115774549 0.7598077693 0.066743475 0.0000000000 4.532159e-02
W117   0.294864550 1.0596196475 0.215955328 0.0453215913 0.000000e+00
W182E  0.450428706 1.2574846453 0.355482255 0.1238510064 2.008532e-02
            W182E
A374   0.03443258
B101   0.09364910
B102   0.12385101
B106   0.01699265
B111   0.03371761
B112   0.03443258
CML103 1.00377350
CML91  0.53346414
Co158  0.02246013
D23    0.57362910
D32    1.38284389
D67    1.20648376
FV356  0.06963130
Mo24W  0.51011968
NC358  0.69726310
OH43   0.08850956
P029   0.50621614
P068   1.16869828
P079   0.80720567
P084   0.90046943
P086   0.11008324
P087   0.05815272
P104   0.03443258
P128   1.21838545
S025   0.12385101
S034   0.45042871
S052   1.25748465
T8     0.35548226
UH300  0.12385101
W117   0.02008532
W182E  0.00000000
> mantel.rtest(m1=as.dist(dCNVms), m2=as.dist(dCNV_Bio_BH_ms),nrepet=100000)
Monte-Carlo test
Observation: 0.1169655 
Call: mantelnoneuclid(m1 = m1, m2 = m2, nrepet = nrepet)
Based on 100000 replicates
Simulated p-value: 0.06433936 
Warnmeldung:
In is.euclid(m2) : Zero distance(s)
> rm(list=ls(all=TRUE))
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> # Author: Entzian, Klukas
> ###############################################################################
> 
> cat(paste("used R-Version: ", sessionInfo()$R.version$major, ".", sessionInfo()$R.version$minor, "\n", sep=""))
used R-Version: 2.15.0
> 
> # multi threaded (4, ba-09: 48sec)
> # not threaded   (ba-09:    33sec)
> 
> threaded <- FALSE
> innerThreaded = FALSE
> cpuCNT <- 2
> cpuAutoDetected <- TRUE
> debug <- TRUE
> 
> 
> getSpecialRequestDependentOfUserAndTypOfExperiment <- function() {
+ 	requestList = list(
+ 			KN = list(barley = list(boxplot = list(daysOfBoxplotNeedsReplace = c("27", "44", "45")),
+ 									spiderplot = list(daysOfBoxplotNeedsReplace = c("27", "44", "45")))
+ 			)
+ 	)
+ 	return(requestList)
+ }
> 
> "%break%" <- function(typOfBreak, breakValue) {
+ 	# 0 %break% 1 --> stopp the code
+ 	# 1 %break% 10 --> stopp the code for 10 sec
+ 	if (typOfBreak == 0) {
+ 		stop("The code stopps manual by the \"break\" function", call. = FALSE)
+ 	} else {
+ 		ownCat(paste("Script will stopped for ",breakValue, " sec!", sep=""))
+ 		
+ 		Sys.sleep(breakValue)
+ 		ownCat("Break ends!")
+ 	}
+ }
> 
> "%debug%" <- function(debug, debugNumber) {
+ 	if (debug) {
+ 		ownCat(paste("DebugBreakPoint: ", debugNumber))
+ 		
+ 	}
+ }
> 
> "%checkEqual%" <- function(treat, seconTreat) {
+ 	if (treat == seconTreat) {
+ 		ownCat("Second filter has the same value as first filter so it set to \"none\"")
+ 		
+ 		return("none")
+ 	} else {
+ 		return(seconTreat)
+ 	}
+ }
> 
> "%errorReport%" <- function(errorDescriptor, typOfError="notExists") {
+ 	#overallList$debug %debug% "%errorReport%"
+ 	if (length(errorDescriptor) > 0) {
+ 		if (tolower(typOfError) == "notexists") {
+ 			ownCat(paste("Descriptor '", errorDescriptor, "' is missing!", sep=""))
+ 			
+ 		} else if (tolower(typOfError) == "notnumericorallzero") {
+ #			ownCat(paste("the values of the descriptor(s) '", errorDescriptor, "', are all zero or not numeric!", sep=""))
+ 		}
+ 	}
+ }
> 
> "%exists%" <- function(standardValue, argsValue) {
+ 	if (!is.na(argsValue) & argsValue != "") {
+ 		return(argsValue)
+ 	} else {
+ 		return(standardValue)
+ 	}
+ }
> 
> "%readInputDataFile%" <- function(separation, fileName) {
+ 	#loadAndInstallPackages(TRUE, FALSE)
+ 	
+ 	#separation = ";"
+ 	ownCat(paste("Read input file", fileName))
+ 	if (file.exists(fileName)) {
+ 		
+ 		preScanForPointOrComma <- scan(file=fileName, what=character(0), nlines=2, sep="\n")
+ 		preScanForPointOrComma <- paste(preScanForPointOrComma[2],",.", sep="")
+ 		allCharacterSeparated <- table(strsplit(toupper(preScanForPointOrComma), '')[[1]])
+ 		
+ 		if (allCharacterSeparated["."] > allCharacterSeparated[","]) {
+ 			
+ 			ownCat("Read input (English number format)...")
+ 			
+ 			return(read.csv(fileName, header=TRUE, sep=separation, fileEncoding="UTF-8")) #encoding="UTF-8"
+ 		} else {
+ 			
+ 			ownCat("Read input (German number format)...")
+ 			
+ 			return(read.csv2(fileName, header=TRUE, sep=separation, fileEncoding="UTF-8")) #, encoding="UTF-8"
+ 		}
+ 	} else {
+ 		return(NULL)
+ 	}
+ }
> 
> "%checkIfDescriptorExists%" <- function(descriptor, dataSet) {
+ 	if (is.data.frame(dataSet)) {
+ 		return(descriptor %in% colnames(dataSet))
+ 	} else {
+ 		return(descriptor %in% dataSet)
+ 	}	
+ }
> 
> "%GetDescriptorsAfterCheckIfDescriptorExists%" <- function(descriptor, dataSet) {
+ 	return(descriptor[descriptor %checkIfDescriptorExists% dataSet])
+ }
> 
> "%GetDescriptorAfterCheckIfDescriptorNotExists%" <- function(descriptor, dataSet) {
+ 	return(descriptor[!descriptor %checkIfDescriptorExists% dataSet])
+ }
> 
> "%contactAllWithAll%" <- function(vector1, vector2) {
+ 	vectorTemp = character(0)
+ 	for (k in vector2) {
+ 		if (k == "none") {
+ 			vectorTemp = c(vectorTemp, vector1)
+ 		} else {
+ 			vectorTemp = c(vectorTemp, paste(vector1, k, sep = "/")) #    #/#
+ 		}
+ 	}
+ 	return(vectorTemp)
+ }
> 
> "%allColnamesWithoutThisOnes%" <- function(dataSet, withoutColNamesVector) {
+ 	return(colnames(dataSet)[!colnames(dataSet) %in% withoutColNamesVector])
+ }
> 
> ownCat <- function(text, endline=TRUE){
+ 	#print(text)
+ 	
+ #	while (class(text) == "list") {
+ #		text <- unlist(text)
+ #	}
+ 	
+ 	if (sfParallel()) {
+ 		sfCat(text, master=TRUE)
+ 		if (endline)
+ 			sfCat("\n", master=TRUE)
+ 	} else {
+ 		cat(unlist(text))
+ 		if (endline)
+ 			cat("\n")
+ 	}
+ 	
+ #tryCatch({	
+ #	if (sfParallel()) {
+ #		sfCat(text, master=TRUE)
+ #		if (endline)
+ #			sfCat("\n", master=TRUE)
+ #	} else {
+ #		cat(unlist(text))
+ #		if (endline)
+ #			cat("\n")
+ #	}
+ #	},
+ #	error = function(e) {
+ #		print("aaaaaaaaaaaaaaaaaaaaaaaaaaaa")
+ #		print(text)
+ #		print("hhhhhhhhhhhhhhhhhhhhhhhhhhhh")})
+ }
> 
> overallOutlierDetection <- function(overallList) {
+ 	overallList$debug %debug% "overallOutlierDetection()"	
+ 	
+ 	
+ 	workingDataSet <- overallList$iniDataSet[,!colnames(overallList$iniDataSet) %in% c(overallList$treatment, overallList$secondTreatment, overallList$xAxis)]
+ 	workingDataSet[is.na(workingDataSet)] <- 0
+ 
+ 	
+ 	test <- cbind(overallList$iniDataSet[overallList$xAxis], workingDataSet[,1])
+ 	test2 <- cbind(workingDataSet[,c(1,21,22)])
+ 	aq.plot(test2, alpha=0.1)
+ 	color.plot(test, quan=0.75)
+ 	
+ 	
+ #	sehr gut
+ 	# create data:
+ 	set.seed(134)
+ 	x <- cbind(rnorm(80), rnorm(80), rnorm(80))
+ 	y <- cbind(rnorm(10, 5, 1), rnorm(10, 5, 1), rnorm(10, 5, 1))
+ 	z <- rbind(x,y)
+ # execute:
+ 	aq.plot(z, alpha=0.05)
+ 	
+ 	
+ 	###################
+ 
+ 	data(humus)
+ 	res <-chisq.plot(log(humus[,c("Co","Cu","Ni")]))
+ 	res <-chisq.plot(z)
+ 	res$outliers # these are the potential outliers
+ 	
+ 	################
+ 	
+ #	geht nur mit zwei dimensionen
+ 	# create data:
+ 	x <- cbind(rnorm(100), rnorm(100))
+ 	y <- cbind(rnorm(10, 5, 1), rnorm(10, 5, 1))
+ 	z <- rbind(x,y)
+ # execute:
+ 	color.plot(z, quan=0.75)
+ 	
+ 	################
+ 	
+ 	# create data:
+ 	x <- cbind(rnorm(100), rnorm(100))
+ 	y <- cbind(rnorm(10, 3, 1), rnorm(10, 3, 1))
+ 	z <- rbind(x,y)
+ # execute:
+ 	dd.plot(z)
+ 
+ 	##################
+ 
+ # Geostatistical data:
+ 	data(humus) # Load humus data
+ 	uni.plot(log(humus[, c("As", "Cd", "Co", "Cu", "Mg", "Pb", "Zn")]),symb=TRUE)
+ }
> 
> 
> loadInstallAndUpdatePackages <- function(libraries, install=FALSE, update = FALSE, useDev=FALSE) {	
+ #	libraries  <- c("Cairo", "RColorBrewer", "data.table", "ggplot2", "psych", "fmsb", "plotrix")	
+ 	repos <- c("http://cran.r-project.org","http://www.rforge.net/")
+ 	#libPath <- ".libPaths()[1]"
+ 	libPath <- Sys.getenv("R_LIBS_USER")
+ 	
+ 	if (install & length(libraries) > 0) {
+ 		ownCat("Check for new packages...")
+ 		
+ 		for(n in repos) {
+ 			
+ 			installedPackages <- names(installed.packages()[, 'Package'])
+ 			availablePackagesOnTheRepos <- available.packages(contriburl= contrib.url(n))[,1]
+ 			ins <- libraries[!libraries %in% installedPackages & libraries %in% availablePackagesOnTheRepos]
+ 		
+ 			if (length(ins) > 0) {
+ 				ownCat(paste("The following packages will be installed: ", ins, sep=""))
+ 				
+ 				install.packages(ins, lib=libPath, repos=n, dependencies = TRUE)
+ 			}
+ 		
+ 		}
+ 		
+ 		if (useDev) {
+ 			#install.packages(c("devtools"), lib=libPath, repos=repos, dependencies = TRUE)
+ 			#dev_mode()
+ 			#install_github("ggplot2")
+ 		}
+ 	}
+ 	
+ 	if (update) {
+ 		#installedOldPackages <- names(old.packages()[, 'Package'])
+ 		ownCat("Check for package updates...")
+ 		
+ 		for(n in repos) {
+ 			update.packages(lib.loc = libPath, checkBuilt=TRUE, ask=FALSE,	repos=n)
+ 		}
+ 	}
+ 	
+ 	if (length(libraries) > 0) {
+ 		ownCat("Load libraries:")
+ 		for(n in libraries) {
+ 			ownCat(n)
+ 			if (sfParallel())
+ 				sfLibrary(n, character.only = TRUE)
+ 			else
+ 				library(n, character.only = TRUE)
+ 		}
+ 	
+ 		if (useDev) {
+ 			library("devtools")
+ 		}	
+ 	}	
+ }
> 
> buildDataSet <- function(workingDataSet, overallResult, colname, index, diagramTyp = "none") {
+ 	if (length(colname) > 0) {
+ 		for (n in 1:length(colname)) {
+ 			if (diagramTyp == "spiderplot") {
+ 				searchVector <- gsub("\\.[0-9]*","",colnames(overallResult)) %in% paste(colname[n], index, sep="")	
+ 			} else {
+ 				searchVector <- paste(colname[n], index, sep="")
+ 			}		
+ 			workingDataSet = cbind(workingDataSet, overallResult[searchVector])
+ 		}	
+ 		return(workingDataSet)
+ 	}
+ }
> 
> reNameSpin <- function(colNameWichMustBind, colNames) {
+ 	
+ 	descriptorListIndex <- strsplit(substr(colNameWichMustBind,nchar(colNames$colOfMean)+1, nchar(colNameWichMustBind)),"\\.")
+ 	
+ 	if (descriptorListIndex[[1]][1] != "" & descriptorListIndex[[1]][2] != "") {
+ 		return(colNames$desNames[[descriptorListIndex[[1]][1]]][descriptorListIndex[[1]][2],])
+ 	} else {
+ 		return(colNameWichMustBind)
+ 	}
+ }
> 
> 
> reNameHist <-  function(colNameWichMustBind) {
+ 	colNameWichMustBind = as.character(colNameWichMustBind)
+ 	positions = which(strsplit(colNameWichMustBind, '')[[1]] == '.')
+ 	colNameWichMustBind = substr(colNameWichMustBind, positions[length(positions)]+1, nchar(colNameWichMustBind))
+ 	
+ 	regExpressionSpezialCharacter = "\\_"
+ 	colNameWichMustBind = gsub(regExpressionSpezialCharacter, "..", colNameWichMustBind)
+ 	
+ 	return(colNameWichMustBind)	
+ }
> 
> reNameColumn <-  function(plotThisValues, columnNameReplace="name", columnNameWhichUsedToReplace="primaerTreatment") {
+ 	if (!is.null(plotThisValues[columnNameWhichUsedToReplace])) {
+ 		plotThisValues[columnNameReplace] = plotThisValues[columnNameWhichUsedToReplace]
+ 	}
+ 	return(plotThisValues)
+ }
> 
> swap <- function(listWithTwoParameter) {
+ 	temp = listWithTwoParameter[[1]]
+ 	listWithTwoParameter[[1]] = listWithTwoParameter[[2]]
+ 	listWithTwoParameter[[2]] = temp
+ 	return(listWithTwoParameter)
+ }
> 
> changeWhenTreatmentNoneAndSecondTreatmentNotNone <- function(listOfTreat, listOfFilterTreat) {
+ 	if (listOfTreat[[1]] == "none" & listOfTreat[[2]] != "none") {
+ 		ownCat("The values of Treatment and SecondTreamt are changed (filter values also)")
+ 		
+ 		return(list(swap(listOfTreat), swap(listOfFilterTreat)))	
+ 	} else {
+ 		return(list(listOfTreat, listOfFilterTreat))
+ 	}
+ }
> 
> checkOfTreatments <- function(args, treatment, filterTreatment, secondTreatment, filterSecondTreatment, workingDataSet, debug) {
+ 	debug %debug% "Start of checkOfTreatments()"
+ #	ownCat(args[5])
+ #	ownCat(args[6])
+ 
+ 	treatment = treatment %exists% args[3]
+ 	secondTreatment = secondTreatment %exists% args[4]
+ 	secondTreatment = treatment %checkEqual% secondTreatment
+ 	
+ 	listOfTreat = list(treatment=treatment, secondTreatment=secondTreatment)
+ 	listOfFilterTreat = list(filterTreatment=filterTreatment, filterSecondTreatment=filterSecondTreatment)	## wird erstmal noch nichts weiter mit gemacht! nur geswapt falls notwendig
+ 	
+ 	if (treatment == "none" & secondTreatment == "none") {
+ 		listOfTreat$treatment = "noneTreatment"
+ 		listOfTreatAndFilterTreat <- list(listOfTreat, listOfFilterTreat)
+ 	} else {	
+ 		for (k in names(listOfTreat)) {
+ 			if (listOfTreat[[k]] != "none") {
+ 				#overallTreat = list(iniDataSet=workingDataSet, descriptor=listOfTreat[[k]], debug=debug, stoppTheCalculation = FALSE, errorDescriptor=character())
+ 				#overallTreat = list(iniDataSet=workingDataSet, descriptor=listOfTreat[[k]], debug=debug, stoppTheCalculation = FALSE)
+ 				descriptorVector = getVector(preprocessingOfDescriptor(listOfTreat[[k]], workingDataSet))
+ 				
+ 				if (!is.null(descriptorVector)) {
+ 					descriptorVector = getVector(checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, FALSE))
+ 					
+ 					if (!is.null(descriptorVector)) {
+ 						listOfTreat[[k]] = descriptorVector
+ 					} 
+ 				} 
+ 				
+ 				if (is.null(descriptorVector)) {
+ 					ownCat(paste(k, "set to \"none\""))
+ 					
+ 					listOfTreat[[k]] = "none"
+ 				}
+ 			}
+ 		}
+ 	
+ 		listOfTreatAndFilterTreat = changeWhenTreatmentNoneAndSecondTreatmentNotNone(listOfTreat, listOfFilterTreat)
+ 	}
+ 	debug %debug% "End of checkOfTreatments()"
+ 
+ 	return(listOfTreatAndFilterTreat)
+ }
> 
> overallCheckIfDescriptorIsNaOrAllZero <- function(overallList) {
+ 	overallList$debug %debug% "overallCheckIfDescriptorIsNaOrAllZero()"	
+ 	
+ 	if (sum(!is.na(overallList$nBoxDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$nBoxDes), "nBoxplots..."));}
+ 		for (n in 1:length(overallList$nBoxDes)) {
+ 			if (!is.na(overallList$nBoxDes[[n]][1])) {
+ 				overallList$nBoxDes[n] = checkIfDescriptorIsNaOrAllZero(overallList$nBoxDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$nBoxDes) = c(1:length(overallList$nBoxDes))
+ 	} else {
+ 		ownCat("All values for nBoxplot are 'NA'")
+ 		
+ 	}
+ 	
+ 	if (sum(!is.na(overallList$boxDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$boxDes), "Boxplots..."))}
+ 		for (n in 1:length(overallList$boxDes)) {
+ 			if (!is.na(overallList$boxDes[[n]][1])) {
+ 				overallList$boxDes[[n]] = checkIfDescriptorIsNaOrAllZero(overallList$boxDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$boxDes) = c(1:length(overallList$boxDes))
+ 	} else {
+ 		ownCat("All values for Boxplot are 'NA'")
+ 		
+ 	}
+ 
+ 	if (sum(!is.na(overallList$boxStackDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$boxStackDes), "stacked boxplots..."))}
+ 		for (n in 1:length(overallList$boxStackDes)) {
+ 			if (!is.na(overallList$boxStackDes[[n]][1])) {
+ 				overallList$boxStackDes[[n]] = checkIfDescriptorIsNaOrAllZero(overallList$boxStackDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$boxStackDes) = c(1:length(overallList$boxStackDes))
+ 	} else {
+ 		ownCat("All values for stackedBoxplot are 'NA'")
+ 		
+ 	}
+ 
+ 	if (sum(!is.na(overallList$boxSpiderDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$boxSpiderDes), "spiderplots..."))}
+ 		for (n in 1:length(overallList$boxSpiderDes)) {
+ 			if (!is.na(overallList$boxSpiderDes[[n]][1])) {
+ 				initDescriptor <- overallList$boxSpiderDes[[n]]
+ 				overallList$boxSpiderDes[[n]] = checkIfDescriptorIsNaOrAllZero(overallList$boxSpiderDes[[n]], overallList$iniDataSet)
+ 				booleanVector <- unlist(initDescriptor) %in% unlist(overallList$boxSpiderDes[[n]])
+ 				overallList$boxSpiderDesName[[n]] = as.data.frame(overallList$boxSpiderDesName[[n]][booleanVector])
+ 				
+ 			}
+ 		}
+ 		names(overallList$boxSpiderDes) = c(1:length(overallList$boxSpiderDes))
+ 		names(overallList$boxSpiderDesName) = c(1:length(overallList$boxSpiderDesName))
+ 	} else {
+ 		ownCat("All values for spider plot are 'NA'")
+ 		
+ 	}
+ 	
+ 	if (sum(!is.na(overallList$violinBoxDes)) > 0 & overallList$isRatio) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$violinBoxDes), "violinplot..."))}
+ 		for (n in 1:length(overallList$violinBoxDes)) {
+ 			if (!is.na(overallList$violinBoxDes[[n]][1])) {
+ 				overallList$violinBoxDes[n] = checkIfDescriptorIsNaOrAllZero(overallList$violinBoxDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$violinBoxDes) = c(1:length(overallList$violinBoxDes))
+ 	} else {
+ 		ownCat("All values for violin plot are 'NA'")
+ 		
+ 	}
+ 	
+ 	
+ 	if ((!sum(!is.na(overallList$boxStackDes)) > 0 && !sum(!is.na(overallList$boxDes)) > 0 && !sum(!is.na(overallList$nBoxDes)) > 0 && !sum(!is.na(overallList$boxSpiderDes)) && !sum(!is.na(overallList$violinBoxDes))) > 0) {
+ 		ownCat("No descriptor set (all descriptors are zero or NA) - the program needs to stop!")
+ 		
+ 		overallList$stoppTheCalculation = TRUE 
+ 	}
+ 	
+ 	return(overallList)
+ }
> 
> checkIfDescriptorIsNaOrAllZero <- function(descriptorVector, iniDataSet, isDescriptor = TRUE) {
+ 	#overallList$debug %debug% "checkIfDescriptorIsNaOrAllZero()"
+ 	descriptorVector = as.vector(descriptorVector)
+ 	#descriptorVector = getVector(descriptorVector)
+ 	tempDescriptor = descriptorVector 
+ 	
+ 	if (isDescriptor) {
+ 		descriptorVector = descriptorVector[colSums(!is.na(iniDataSet[descriptorVector])) != 0 & colSums(iniDataSet[descriptorVector] *1, na.rm = TRUE) > 0]
+ 	} else {
+ 		descriptorVector = descriptorVector[colSums(!is.na(iniDataSet[descriptorVector])) != 0]
+ 	}
+ 	errorDescriptor = tempDescriptor %GetDescriptorAfterCheckIfDescriptorNotExists% descriptorVector
+ 
+ 	if (length(errorDescriptor) > 0) {
+ 		errorDescriptor %errorReport% "NotNumericOrAllZero"	
+ 	}
+ 	
+ 	if (length(descriptorVector) > 0) {
+ 		return(as.data.frame(descriptorVector))
+ 	} else {
+ 		return(NA)
+ 	}
+ }
> 
> overallChangeName <- function(overallList) {
+ 	overallList$debug %debug% "overallChangefileName()"	
+ 	
+ 	if (!is.null(overallList$imageFileNames_nBoxplots)) {
+ 		if (overallList$debug) {ownCat("line plots..."); }
+ 		overallList$imageFileNames_nBoxplots = changefileName(overallList$imageFileNames_nBoxplots)
+ 		names(overallList$imageFileNames_nBoxplots) = c(1:length(overallList$imageFileNames_nBoxplots))
+ 		
+ 		overallList$nBoxDesName = as.list(overallList$nBoxDesName)
+ 		names(overallList$nBoxDesName) = c(1:length(overallList$nBoxDesName))
+ 	}
+ 	
+ 	if (!is.null(overallList$imageFileNames_Boxplots)) {
+ 		if (overallList$debug) {ownCat("boxplots...");}
+ 		overallList$imageFileNames_Boxplots = changefileName(overallList$imageFileNames_Boxplots)
+ 		names(overallList$imageFileNames_Boxplots) = c(1:length(overallList$imageFileNames_Boxplots))
+ 		
+ 		overallList$boxDesName = as.list(overallList$boxDesName)
+ 		names(overallList$boxDesName) = c(1:length(overallList$boxDesName))
+ 	}
+ 	
+ 	if (!is.null(overallList$imageFileNames_StackedPlots)) {
+ 		if (overallList$debug) {ownCat("Stacked boxplots...");}
+ 		overallList$imageFileNames_StackedPlots = changefileName(overallList$imageFileNames_StackedPlots)
+ 		names(overallList$imageFileNames_StackedPlots) = c(1:length(overallList$imageFileNames_StackedPlots))
+ 		
+ 		overallList$boxStackDesName = as.list(overallList$boxStackDesName)
+ 		names(overallList$boxStackDesName) = c(1:length(overallList$boxStackDesName))
+ 	}
+ 	
+ 	if (!is.null(overallList$imageFileNames_SpiderPlots)) {
+ 		if (overallList$debug) {ownCat("spiderplots...");}
+ 		overallList$imageFileNames_SpiderPlots = changefileName(overallList$imageFileNames_SpiderPlots)
+ 		names(overallList$imageFileNames_SpiderPlots) = c(1:length(overallList$imageFileNames_SpiderPlots))
+ 		
+ 		#overallList$boxSpiderDesName = as.list(overallList$boxSpiderDesName)
+ 		#names(overallList$boxSpiderDesName) = c(1:length(overallList$boxSpiderDesName))
+ 	}
+ 
+ 	if (!is.null(overallList$imageFileNames_violinPlots) & overallList$isRatio) {
+ 		if (overallList$debug) {ownCat("violinplots...");}
+ 		overallList$imageFileNames_violinPlots = changefileName(overallList$imageFileNames_violinPlots)
+ 		names(overallList$imageFileNames_violinPlots) = c(1:length(overallList$imageFileNames_violinPlots))
+ 		
+ 		overallList$violinBoxDesName = as.list(overallList$violinBoxDesName)
+ 		names(overallList$violinBoxDesName) = c(1:length(overallList$violinBoxDesName))
+ 	}
+ 	
+ 	
+ 	return(overallList)
+ }
> 
> setOptions <- function(overallList, typOfPlot, typOfOptions, listOfExtraOptions) {
+ 	overallList$debug %debug% "setOptions()"
+ 	
+ 	for (values in names(listOfExtraOptions[[typOfPlot]])) {
+ 		if (values %in% names(overallList[[typOfOptions]])) {
+ 			overallList[[typOfOptions]][[values]] = c(overallList[[typOfOptions]][[values]], listOfExtraOptions[[typOfPlot]][[values]])
+ 		} else {
+ 			overallList[[typOfOptions]][[values]] = c(listOfExtraOptions[[typOfPlot]][[values]])
+ 		}
+ 	}
+ 	return(overallList)
+ }
> 
> 
> setSomePrintingOptions <- function(overallList) {
+ 	overallList$debug %debug% "setSomePrintingOptions()"
+ 
+ 	requestList = 	getSpecialRequestDependentOfUserAndTypOfExperiment()
+ 	if (!(overallList$user == "none" & overallList$typOfExperiment == "none")) {
+ 		listOfExtraOptions = requestList[[overallList$user]][[overallList$typOfExperiment]]	
+ 		for (n in names(listOfExtraOptions)) {
+ 			if (n == "boxplot") {
+ 				return(setOptions(overallList, "boxplot", "boxOptions", listOfExtraOptions))				
+ 			} else if (n == "nBoxplot") {
+ 				return(setOptions(overallList, "nBoxplot", "nBoxOptions", listOfExtraOptions))
+ 			} else if (n == "stackBoxplot") {
+ 				return(setOptions(overallList, "stackBoxplot", "stackedBarOptions", listOfExtraOptions))
+ 			} else if (n == "spiderplot") {
+ 				return(setOptions(overallList, "spiderplot", "spiderOptions", listOfExtraOptions))
+ 			} else if (n == "violinplot" & overallList$isRatio) {
+ 				return(setOptions(overallList, "violinplot", "violinOptions", listOfExtraOptions))
+ 			}			
+ 		}		
+ 	}
+ 	
+ 	return(overallList)
+ }
> 
> checkUserOfExperiment <- function(overallList) {
+ 	overallList$debug %debug% "checkUserOfExperiment()"
+ 
+ 	user = "none"
+ 	if ("Plant.ID" %in% colnames(overallList$iniDataSet)) {
+ 		user = substr(overallList$iniDataSet$'Plant.ID'[1], 5, 6)		
+ 	}
+ 	overallList$user = user
+ 	return(overallList)
+ }
> 
> 
> checkTypOfExperiment <- function(overallList) {
+ 	overallList$debug %debug% "checkTypOfExperiment()"
+ 
+ 	typ = "none"
+ 	if ("Species" %in% colnames(overallList$iniDataSet)) {
+ 		if (length(grep("barley", overallList$iniDataSet$Species[1], ignore.case=TRUE)) > 0) {
+ 			typ = "barley"
+ 		} else if (length(grep("maize", overallList$iniDataSet$Species[1], ignore.case=TRUE)) > 0) {
+ 			typ = "maize"
+ 		} else if (length(grep("arabidopsis", overallList$iniDataSet$Species[1], ignore.case=TRUE)) > 0) {
+ 			typ = "arabidopsis"
+ 		}	
+ 	}
+ 	
+ 	overallList$typOfExperiment = typ
+ 	return(overallList)	
+ }
> 
> 
> changefileName <- function(fileNameVector) {
+ 	#Sollten hier nicht noch die Leerzeichen durch Punkte ersetzt werden?
+ 	
+ 	fileNameVector = gsub("\\$", ";", substr(fileNameVector, 1, 70))
+ 	fileNameVector = gsub("\\^", "", fileNameVector)
+ 
+ 	for(i in 1:length(fileNameVector)) {
+ 		if (length(grep("\\.bin\\.",fileNameVector[i], ignore.case=TRUE)) > 0){
+ 			stringSplit <- paste(strsplit(fileNameVector[i], '\\.bin\\.')[[1]][1], ".bin.", sep="")
+ 			fileNameVector[i] <- stringSplit
+ 		} 
+ 	}
+ 
+ 	return(as.list(fileNameVector))
+ }
> 
> preprocessingOfValues <- function(value, isColValue=FALSE, replaceString=".", isColName=FALSE) {
+ 	if (!is.null(value)) {
+ 		regExpressionCol = "[^[:alnum:]|^_]|[[:space:]|\\^]"
+ 		#regExpressionCol = "[^[:alnum:]]|[[:space:]|\\^]"
+ 		if (isColValue || isColName) {
+ 			value = strsplit(as.character(value), "$", fixed=TRUE)
+ 		}
+ 		
+ 		if (!isColName){
+ 			for (n in 1:length(value)) {
+ 				value[[n]] = gsub(regExpressionCol, replaceString, value[[n]])
+ 			}
+ 		}
+ 	} else {
+ 		return("none")
+ 	}
+ 	return(value)
+ }
> 
> overallPreprocessingOfDescriptor <- function(overallList) {
+ 	overallList$debug %debug% "overallPreprocessingOfDescriptor()"	
+ 	
+ 	if (!is.null(overallList$nBoxDes)) {
+ 		if (overallList$debug) {ownCat("nBoxplot")}
+ 		for (n in 1:length(overallList$nBoxDes)) {
+ 			overallList$nBoxDes[n] = preprocessingOfDescriptor(overallList$nBoxDes[[n]], overallList$iniDataSet)
+ 		}
+ 	} else {
+ 		ownCat("nBoxplot is NULL")
+ 		
+ 	} 
+ 	
+ 	if (!is.null(overallList$boxDes)) {
+ 		if (overallList$debug) {ownCat("boxplot")}
+ 		for (n in 1:length(overallList$boxDes)) {
+ 			overallList$boxDes[n] = preprocessingOfDescriptor(overallList$boxDes[[n]], overallList$iniDataSet)
+ 		}
+ 	} else {
+ 		ownCat("Boxplot is NULL")
+ 		
+ 	} 
+ 	
+ 	if (!is.null(overallList$boxStackDes)) {
+ 		if (overallList$debug) {ownCat("Stacked boxplots...")}
+ 		for (n in 1:length(overallList$boxStackDes)) {
+ 			overallList$boxStackDes[n] = preprocessingOfDescriptor(overallList$boxStackDes[[n]], overallList$iniDataSet)
+ 		}
+ 	} else {
+ 		ownCat("stackedBoxplot is NULL")
+ 		
+ 	} 
+ 
+ 	if (!is.null(overallList$boxSpiderDes)) {
+ 		if (overallList$debug) {ownCat("spider plot")}
+ 		for (n in 1:length(overallList$boxSpiderDes)) {
+ 			initDescriptor <- preprocessingOfValues(overallList$boxSpiderDes[n], isColValue = TRUE)
+ 			overallList$boxSpiderDes[n] = preprocessingOfDescriptor(overallList$boxSpiderDes[[n]], overallList$iniDataSet)
+ 			booleanVector <- initDescriptor[[1]] %in% overallList$boxSpiderDes[n][[1]]
+ 			overallList$boxSpiderDesName[n] = as.data.frame(preprocessingOfValues(overallList$boxSpiderDesName[[n]], isColName=TRUE)[[1]][booleanVector])
+ 		}
+ 	} else {
+ 		ownCat("Spider plot is NULL")
+ 		
+ 	} 
+ 
+ 	if (!is.null(overallList$violinBoxDes) & overallList$isRatio) {
+ 		if (overallList$debug) {ownCat("violin plot")}
+ 		for (n in 1:length(overallList$violinBoxDes)) {
+ 			initDescriptor <- preprocessingOfValues(overallList$violinBoxDes[n], isColValue = TRUE)
+ 			overallList$violinBoxDes[n] = preprocessingOfDescriptor(overallList$violinBoxDes[[n]], overallList$iniDataSet)
+ 			booleanVector <- initDescriptor[[1]] %in% overallList$violinBoxDes[n][[1]]
+ 			overallList$violinBoxDesName[n] = as.data.frame(preprocessingOfValues(overallList$violinBoxDesName[[n]], isColName=TRUE)[[1]][booleanVector])
+ 		}
+ 	} else {
+ 		ownCat("No ratio data set/violin plot")
+ 		
+ 	} 
+ 	
+ 	if ((!sum(!is.na(overallList$boxStackDes)) > 0 && !sum(!is.na(overallList$boxDes)) > 0 && !sum(!is.na(overallList$nBoxDes)) > 0 && !sum(!is.na(overallList$boxSpiderDes)) && !sum(!is.na(overallList$violinBoxDes))) > 0) {
+ 		ownCat("No descriptor set - this run needs to stop!")
+ 		
+ 		overallList$stoppTheCalculation = TRUE
+ 	}
+ 	return(overallList)
+ }
> 
> preprocessingOfDescriptor <- function(descriptorVector, iniDataSet) {
+ 	#overallList$debug %debug% "preprocessingOfDescriptor()"
+ 	descriptorVector = unlist(preprocessingOfValues(descriptorVector, isColValue = TRUE))	#descriptor is value for yAxis
+ 	
+ 	errorDescriptor = descriptorVector %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
+ 	descriptorVector = descriptorVector %GetDescriptorsAfterCheckIfDescriptorExists% iniDataSet
+ 	if (length(errorDescriptor)>0) {
+ 		errorDescriptor %errorReport% "notExists"
+ 	} 
+ 	
+ 	if (length(descriptorVector) > 0) {
+ 		return(as.data.frame(descriptorVector))
+ 	} else {
+ 		return(NA)
+ 	}	
+ }
> 
> preprocessingOfxAxisValue <- function(overallList) {
+ 	overallList$debug %debug% "preprocessingOfxAxisValue()"
+ 	overallList$xAxis = unlist(preprocessingOfValues(overallList$xAxis, TRUE))
+ 	
+ 	if (overallList$filterXaxis != "none") {
+ 		overallList$filterXaxis = as.numeric(strsplit(overallList$filterXaxis, "$", fixed=TRUE)[[1]])
+ 	} else {
+ 		overallList$filterXaxis = as.numeric(unique(overallList$iniDataSet[overallList$xAxis])[[1]])	#xAxis muss einen Wert enthalten ansonsten Bricht das Program weiter oben ab
+ 	}
+ 	return(overallList)
+ }
> 
> getSingelFilter <- function(filter, treatment, dataSet) {
+ 	if (filter != "none") {
+ 		return(strsplit(filter, "$", fixed=TRUE)[[1]])
+ 	} else {
+ 		return(as.character(unique(dataSet[treatment])[[1]]))
+ 	}
+ }
> 
> preprocessingOfTreatment <- function(overallList) {
+ 	overallList$debug %debug% "preprocessingOfTheTreatment()"
+ 	
+ 	if (!is.null(overallList$treatment)) {
+ 		overallList$treatment = preprocessingOfValues(overallList$treatment)
+ 		
+ 		if (overallList$treatment != "none" & (overallList$treatment %checkIfDescriptorExists% overallList$iniDataSet)) {	
+ 			overallList$filterTreatment = getSingelFilter(overallList$filterTreatment, overallList$treatment, overallList$iniDataSet)
+ 
+ 		} else {
+ 			overallList$treatment = "none"
+ 			overallList$filterTreatment = "none"
+ 			ownCat("Set 'filterTreatment' and 'treatment' to 'none'!")
+ 					
+ 		}			
+ 	} else {
+ 		overallList$treatment = "none"
+ 		overallList$filterTreatment = "none"
+ 		ownCat("Set 'filterTreatment' and 'treatment' to 'none'!")
+ 		
+ 	}
+ 	return(overallList)
+ }
> 
> preprocessingOfSecondTreatment <- function(overallList) {
+ 	overallList$debug %debug% "preprocessingOfTheSecondTreatment()"
+ 	
+ 	if (!is.null(overallList$secondTreatment)) {
+ 		overallList$secondTreatment = preprocessingOfValues(overallList$secondTreatment)
+ 
+ 		if (overallList$secondTreatment != "none" & (overallList$secondTreatment %checkIfDescriptorExists% overallList$iniDataSet)) {
+ 			overallList$filterSecondTreatment = getSingelFilter(overallList$filterSecondTreatment, overallList$secondTreatment, overallList$iniDataSet)
+ 			
+ 			if (length(overallList$filterSecondTreatment) == 1) {
+ 				overallList$secondTreatment = "none"
+ 				overallList$filterSecondTreatment = "none"
+ 				ownCat("Set 'filterSecondTreatment' and 'secondTreatment' to 'none' because only one filter is there!")
+ 			}
+ 			
+ 		} else {
+ 			overallList$secondTreatment = "none"
+ 			overallList$filterSecondTreatment = "none"
+ 			ownCat("Set 'filterSecondTreatment' and 'secondTreatment' to 'none'!")
+ 			
+ 		}	
+ 	} else {
+ 		overallList$secondTreatment = "none"
+ 		overallList$filterSecondTreatment = "none"
+ 		ownCat("Set 'filterSecondTreatment' and 'secondTreatment' to 'none'!")
+ 		
+ 	}
+ 	return(overallList)
+ }
> 
> check <- function(value, checkValue=c("none", NA)) {
+ 	if (!is.null(value)) {
+ 		return(value %GetDescriptorAfterCheckIfDescriptorNotExists% checkValue)
+ 		#return(unique(value %GetDescriptorAfterCheckIfDescriptorNotExists% checkValue))
+ 	} else {
+ 		return(character(0))
+ 	}
+ }
> 
> getVector <- function(descriptorSet) {
+ 	if (!is.null(descriptorSet)) {
+ 		vector =  vector()
+ 		for (n in 1:length(descriptorSet)) {
+ 			vector = c(vector, as.vector(unlist(descriptorSet[[n]])))
+ 		}
+ 		return(vector)
+ 	}
+ 	return(character(0))
+ }
> 
> reduceWorkingDataSize <- function(overallList) {
+ 	overallList$debug %debug% "reduceWorkingDataSize()"
+ 	if (overallList$isRatio) {
+ 		overallList$iniDataSet = overallList$iniDataSet[unique(c(check(getVector(overallList$nBoxDes)), check(getVector(overallList$boxDes)), check(getVector(overallList$boxStackDes)), check(getVector(overallList$boxSpiderDes)), check(getVector(overallList$violinBoxDes)), check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment)))]
+ 	} else {
+ 		overallList$iniDataSet = overallList$iniDataSet[unique(c(check(getVector(overallList$nBoxDes)), check(getVector(overallList$boxDes)), check(getVector(overallList$boxStackDes)), check(getVector(overallList$boxSpiderDes)), check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment)))]
+ 	}
+ 	return(overallList)
+ }
> 
> setRowAndColNameOfFinalDataFrame <- function(overallList) {
+ 	overallList$debug %debug% "setRowAndColNameOfFinalDataFrame()"
+ 
+ 	overallList$rowName = (overallList$descriptor %contactAllWithAll% overallList$filterTreatment) %contactAllWithAll% overallList$filterSecondTreatment
+ 	overallList$colName = as.character(overallList$filterXaxis)
+ 	
+ 	return(overallList)
+ }
> 
> groupByFunction <- function(groupByList) {
+ 	groupByList = unlist(groupByList)
+ 	return(unlist(groupByList[ifelse(groupByList != "none", TRUE, FALSE)]))
+ }
> 
> getBooleanVectorForFilterValues <- function(groupedDataFrame, listOfValues, plot=FALSE) {
+ ###############
+ #groupedDataFrame <- groupedDataFrameMean
+ #listOfValues <- booleanVectorList
+ #plot=FALSE
+ ###############
+ 	
+ 	iniType = !plot
+ 	tempVector = rep.int(iniType, times=length(groupedDataFrame[, 1]))
+ 	
+ 	for (h in names(listOfValues)) {
+ 		if (h != "none" & !is.null(groupedDataFrame[[h]])) {
+ 			if (plot) {
+ 				tempVector = tempVector | groupedDataFrame[[h]] %in% listOfValues[[h]]
+ 			} else {
+ 				tempVector = tempVector & groupedDataFrame[[h]] %in% listOfValues[[h]]
+ 			}
+ 		}
+ 	}
+ 	return(tempVector)
+ }
> 
> buildRowForOverallList <- function(i, des, listOfValues, dataSet, day) {
+ 	rowString = list(row=des, day=numeric())
+ 	for (k in listOfValues) {
+ 		if (k != "none") {
+ 			rowString$row = paste(rowString$row, dataSet[i, k])
+ 		}
+ 	}
+ 	return(rowString)
+ } 
> 
> fillOverallResult <- function(overallList, preErrorBars) {
+ 	overallList$debug %debug% "fillOverallResult()"
+ 	if (length(overallList$iniDataSet[, 1]) > 0) {
+ 		for (i in 1:length(overallList$iniDataSet[, 1])) {
+ 			for (des in overallList$descriptor) {
+ 				rowAndColumn = buildRowForOverallList(i, des, c(overallList$treatment, overallList$secondTreatment), overallList$iniDataSet, overallList$xAxis)
+ 				overallList$overallResult[rowAndColumn$row, as.character(overallList$iniDataSet[i, overallList$xAxis])] = overallList$iniDataSet[i, des]
+ 				if (tolower(overallList$diagramTyp) != "boxplotstacked")
+ 					overallList$errorBars[rowAndColumn$row, as.character(overallList$iniDataSet[i, overallList$xAxis])] = preErrorBars[i, des]
+ 			}
+ 		}
+ 	} else {
+ 		ownCat("No Value for the OverallResult-DataFrame - Wrong filter!")
+ 		
+ 		overallList$stoppTheCalculation = TRUE
+ 	}
+ 	return(overallList)
+ }
> 
> buildList <- function(overallList, colOfXaxis) {
+ 	overallList$debug %debug% "buildList()"
+ 	newList = list()
+ 	
+ 	newList[[overallList$treatment]] = overallList$filterTreatment
+ 	newList[[overallList$secondTreatment]] = overallList$filterSecondTreatment
+ 	newList[[colOfXaxis]] = overallList$filterXaxis
+ 	
+ 	return(newList)
+ }
> 
> buildRowName <- function(mergeDataSet, groupBy, yName = "value") {	
+ #####
+ #mergeDataSet <- iniDataSet
+ #####
+ 		
+ 	if (length(groupBy) == 0) {
+ 		return(data.frame(name=rep.int(yName, length(mergeDataSet[, 1])), mergeDataSet))
+ 	} else if (length(groupBy) == 1) {
+ 		return(data.frame(name=mergeDataSet[, groupBy], mergeDataSet[, !(colnames(mergeDataSet) %in% groupBy)]))
+ 	} else {		
+ 		#temp = mergeDataSet[, groupBy[2]]
+ 		temp = mergeDataSet[, groupBy[2]]
+ 		if (length(groupBy) > 2) {
+ 			reduceGroupBy <- groupBy[3:length(groupBy)]
+ 			for (h in seq(along=reduceGroupBy)) {
+ 				temp = paste(temp, mergeDataSet[, reduceGroupBy[h]], sep = "/") #  #/#
+ 			}
+ 		}
+ 		
+ 		return(data.frame(name=temp, primaerTreatment= mergeDataSet[, groupBy[1]], mergeDataSet[, mergeDataSet %allColnamesWithoutThisOnes% groupBy]))
+ 	}	
+ }
> 
> getToPlottedDays <- function(xAxis, changes=NULL) {
+ ##########
+ #xAxis <- xAxisValue
+ ##########
+ 	
+ 	uniqueDays = unique(xAxis)
+ 	medianPosition = floor(median(1:length(uniqueDays)))
+ 
+ 	days = uniqueDays[floor(median(1:length(uniqueDays[uniqueDays<=uniqueDays[medianPosition]])))]
+ 	days = c(days, uniqueDays[medianPosition])
+ 	days = c(days, uniqueDays[floor(median(length(uniqueDays[uniqueDays>=uniqueDays[medianPosition]]):length(uniqueDays)))])
+ 	days = c(days, uniqueDays[length(uniqueDays)])
+ 	 
+ 	if (!is.null(changes)) {
+ 		days = c(as.numeric(changes), days[(length(changes)+1):4])
+ 	}
+ 	
+ 	return(days)
+ }
> 
> setxAxisfactor <- function(xAxisName, xAxisValue, options) {
+ ##############
+ #xAxisName <- overallList$xAxisName
+ #xAxisValue <- overallResult$xAxis
+ ##############
+ 	
+ 	
+ 	if (!is.null(options$daysOfBoxplotNeedsReplace)) {
+ 		whichDayShouldBePlot = getToPlottedDays(xAxisValue, options$daysOfBoxplotNeedsReplace)
+ 	} else {
+ 		whichDayShouldBePlot = getToPlottedDays(xAxisValue)
+ 	}
+ 		
+ 	xAxisfactor = factor(xAxisValue, levels=whichDayShouldBePlot)
+ 
+ 	xAxisfactor = paste(xAxisName, xAxisfactor)
+ 	naString = paste(xAxisName, "NA")
+ 	xAxisfactor[xAxisfactor == naString] = NA
+ 	
+ #	xAxisfactor = paste("DAS", xAxisfactor)
+ #	xAxisfactor[xAxisfactor == "DAS NA"] = NA
+ 	return(xAxisfactor)
+ }
> 
> 
> overallGetResultDataFrame <- function(overallList) {
+ 	overallList$debug %debug% "overallGetResultDataFrame()"	
+ 
+ 	if (!calculateNothing) {	
+ 			groupBy = groupByFunction(list(overallList$treatment, overallList$secondTreatment))
+ 			colNames = list(colOfXaxis="xAxis", colOfMean="mean", colOfSD="se", colName="name", xAxis=overallList$xAxis)
+ 			booleanVectorList = buildList(overallList, colNames$colOfXaxis)
+ 			columnsStandard = c(check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment))
+ 	
+ 			if (sum(!is.na(overallList$nBoxDes)) > 0) {
+ 				if (overallList$debug) {ownCat("nBoxplot")}
+ 				columns = c(columnsStandard, check(getVector(overallList$nBoxDes)))
+ 				overallList$overallResult_nBoxDes = getResultDataFrame("nboxplot", overallList$nBoxDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for nBoxplot are 'NA'")
+ 			}
+ 			
+ 			if (sum(!is.na(overallList$boxDes)) > 0) {
+ 				if (overallList$debug) {ownCat("Boxplot")}
+ 				colNames$colOfMean = "value"
+ 				columns = c(columnsStandard, check(getVector(overallList$boxDes)))
+ 				overallList$overallResult_boxDes = getResultDataFrame("boxplot", overallList$boxDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for Boxplot are 'NA'")
+ 			}
+ 			
+ 			if (sum(!is.na(overallList$boxStackDes)) > 0) {
+ 				if (overallList$debug) {ownCat("stackedBoxplot")}
+ 				colNames$colOfMean = check(getVector(overallList$boxStackDes))
+ 				colNames$colOfXaxis = overallList$xAxis
+ 				columns = c(columnsStandard, check(getVector(overallList$boxStackDes)))
+ 				overallList$overallResult_boxStackDes = getResultDataFrame("boxplotStacked", overallList$boxStackDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for stackedBoxplot are 'NA'")
+ 			}
+ 		
+ 			if (sum(!is.na(overallList$boxSpiderDes)) > 0) {
+ 				if (overallList$debug) {ownCat("spider plot")}
+ 				#colNames$colOfMean = check(getVector(overallList$boxSpiderDes))
+ 				colNames$colOfMean = "value"
+ 				colNames$colOfXaxis = overallList$xAxis
+ 				colNames$desNames = overallList$boxSpiderDesName
+ 				columns = c(columnsStandard, check(getVector(overallList$boxSpiderDes)))
+ 				overallList$overallResult_boxSpiderDes = getResultDataFrame("spiderplot", overallList$boxSpiderDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for spider plot are 'NA'")
+ 			}
+ 
+ 			if (sum(!is.na(overallList$violinBoxDes)) > 0 & overallList$isRatio) {
+ 				if (overallList$debug) {ownCat("violin plot")}
+ 				colNames$colOfMean = "mean"
+ 				colNames$colOfXaxis = "xAxis"
+ 				columns = c(columnsStandard, check(getVector(overallList$violinBoxDes)))
+ 				overallList$overallResult_violinBoxDes = getResultDataFrame("violinplot", overallList$violinBoxDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			}
+ 			
+ 			
+ 			if (is.null(overallList$boxStackDes) && is.null(overallList$boxDes) && is.null(overallList$nBoxDes) && is.null(overallList$boxSpiderDes) && is.null(overallList$violinBoxDes)) {
+ 				ownCat("No descriptor set - this run needs to stop!")
+ 				overallList$stoppTheCalculation = TRUE
+ 			}
+ 	}
+ 	return(overallList)
+ }
> 
> getPlotNumber <- function(colNameWichMustBind, descriptorList, diagramTyp) {
+ 	
+ 	if (diagramTyp == "boxplotStacked") {
+ 	
+ 		for (n in names(descriptorList)) {
+ 			if (colNameWichMustBind %in% as.vector(unlist(descriptorList[[n]]))) {
+ 				return(n)
+ 			}
+ 		}
+ 		return(-1)
+ 	} else if (diagramTyp == "spiderplot") {
+ 		return(strsplit(substring(colNameWichMustBind,nchar("value")+1),"\\.")[[1]][1])
+ 	}
+ }
> 
> 
> getResultDataFrame <- function(diagramTyp, descriptorList, iniDataSet, groupBy, colNames, booleanVectorList, debug) {	
+ #############################
+ #	diagramTyp = "spiderplot"
+ #	descriptorList = overallList$boxSpiderDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug
+ #########################	
+ #	diagramTyp = "boxplotStacked"
+ #	descriptorList = overallList$boxStackDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug	
+ #########################
+ #	diagramTyp = "nboxplot"
+ #	descriptorList = overallList$nBoxDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug
+ #########################
+ #	diagramTyp = "violinplot"
+ #	descriptorList = overallList$violinBoxDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug
+ #########################
+ 
+ 
+ 
+ 	debug %debug% "getResultDataFrame()"
+ 	
+ 	descriptor = getVector(descriptorList)
+ 
+ 	if (diagramTyp == "spiderplot") {
+ 		descriptorName <- character()
+ 		for(n in 1:length(descriptorList)){
+ 			lengthVector <- length(descriptorList[[n]][,1])
+ 			descriptorName <- c(descriptorName, paste(rep.int(n, lengthVector),c(1:lengthVector), sep="."))		
+ 		}
+ 	} else {	
+ 		descriptorName = seq(1:length(descriptor))
+ 	}
+ 	
+ 	descriptorName = descriptorName[!is.na(descriptor)]
+ 	descriptor = descriptor[!is.na(descriptor)]
+ 
+ 	
+ 	if (diagramTyp != "boxplot") {
+ 		groupedDataFrame = data.table(iniDataSet)
+ 		#key(groupedDataFrame) = c(groupBy, colNames$xAxis)
+ 		setkeyv(groupedDataFrame,c(groupBy, colNames$xAxis))
+ 	}
+ 	
+ 	if (diagramTyp == "boxplot") {
+ 		groupedDataFrameMean = iniDataSet[groupBy[1]]
+ 		
+ 		groupByReduce = groupBy[groupBy!=groupBy[1]]
+ 		for (n in c(groupByReduce, colNames$xAxis, descriptor)) {
+ 			groupedDataFrameMean = cbind(groupedDataFrameMean, iniDataSet[n])
+ 		}		
+ 	} else {
+ 		groupedDataFrameMean = as.data.frame(groupedDataFrame[, lapply(.SD, mean, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 		#groupedDataFrameMean = as.data.frame(groupedDataFrame[, lapply(colnames(groupedDataFrame), mean, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 	}
+ 	
+ 	if (diagramTyp == "nboxplot" || diagramTyp == "boxplot" || diagramTyp == "spiderplot" || diagramTyp == "violinplot") {
+ 		#colNamesOfTheRest = paste(colNames$colOfMean, seq(1:length(descriptor)), sep="")	
+ 		colNamesOfTheRest = paste(colNames$colOfMean, descriptorName, sep="")	
+ 	} else {
+ 		colNamesOfTheRest = groupedDataFrameMean %allColnamesWithoutThisOnes% c(groupBy, colNames$xAxis)
+ 	}
+ 
+ 	colnames(groupedDataFrameMean) = c(groupBy, colNames$colOfXaxis, colNamesOfTheRest)
+ 	
+ 	if (diagramTyp == "nboxplot") {
+ 		groupedDataFrameSD = as.data.frame(groupedDataFrame[, lapply(.SD, sd, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 		#groupedDataFrameSD = as.data.frame(groupedDataFrame[, lapply(colnames(groupedDataFrame), sd, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 		colnames(groupedDataFrameSD) = c(groupBy, colNames$colOfXaxis, paste(colNames$colOfSD, descriptorName, sep=""))
+ 	}
+ 	
+ 	booleanVector = getBooleanVectorForFilterValues(groupedDataFrameMean, booleanVectorList)
+ 	
+ 	if (diagramTyp == "nboxplot") {
+ 		iniDataSet = merge(sort=FALSE, groupedDataFrameMean[booleanVector, ], groupedDataFrameSD[booleanVector, ], by = c(groupBy, colNames$colOfXaxis))
+ 		overallResult = buildRowName(iniDataSet, groupBy)
+ 		
+ 	} else	if (diagramTyp == "boxplot" || diagramTyp == "violinplot") {
+ 		#|| diagramTyp == "spiderplot"
+ 		iniDataSet = groupedDataFrameMean[booleanVector, ]
+ 		overallResult = buildRowName(iniDataSet, groupBy)
+ 	} else if (diagramTyp == "spiderplot") {
+ 		iniDataSet = groupedDataFrameMean[booleanVector, ]
+ 		buildRowNameDataSet = buildRowName(iniDataSet, groupBy)
+ 		temp = data.frame()
+ 
+ 		
+ 		for (colNameWichMustBind in buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")) {
+ 			plot = getPlotNumber(colNameWichMustBind, descriptorList, diagramTyp)
+ 			
+ 			colNameWichMustBindReNamed <- reNameSpin(colNameWichMustBind, colNames)
+ 		
+ 			if (is.null(buildRowNameDataSet$primaerTreatment)) {	
+ 				temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot=plot))			
+ 			} else {
+ 				temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), primaerTreatment=buildRowNameDataSet[, "primaerTreatment"], values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot = plot))			
+ 			}
+ 		}
+ 		overallResult = temp
+ 		
+ 	} else {
+ 		iniDataSet <- groupedDataFrameMean[booleanVector, ]	
+ 		buildRowNameDataSet <- buildRowName(iniDataSet, groupBy)
+ 		temp = data.frame()
+ 		
+ 		for (colNameWichMustBind in buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")) {
+ 			plot = getPlotNumber(colNameWichMustBind, descriptorList, diagramTyp)
+ 		
+ 			if (plot!=-1) {
+ 				colNameWichMustBindReNamed = reNameHist(colNameWichMustBind)
+ 		
+ 				if (is.null(buildRowNameDataSet$primaerTreatment)) {	
+ 					temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot=plot))			
+ 				} else {
+ 					temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), primaerTreatment=buildRowNameDataSet[, "primaerTreatment"], values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot = plot))			
+ 				}
+ 			}
+ 		}
+ 		overallResult = temp		
+ 	}
+ 	return(overallResult)
+ }
> 
> setDefaultAxisNames <- function(overallList) {
+ 	overallList$debug %debug% "setDefaultAxisNames()"
+ 	
+ 	if (overallList$xAxisName == "none") {
+ 		overallList$xAxisName = gsub('[[:punct:]]', " ", overallList$xAxis)
+ 	}
+ #	if (overallList$yAxisName == "none") {
+ #		overallList$yAxisName = gsub('[[:punct:]]', " ", overallList$descriptor)
+ #	}
+ 	return(overallList)
+ }
> 
> setColorListHist <- function(descriptorList) {
+ 	interval = seq(0.05, 0.95, by=0.1)
+ 	intervalSat = rep.int(c(0.8, 1.0), 5)
+ 	intervalFluo = seq(0, 0.166666666666, by=0.0185185185)
+ 
+ 	interval20 = seq(0.025, 0.975, by=0.05)
+ 	intervalSat20 = 1 #rep.int(c(0.8, 1.0), 10)
+ 	intervalFluo20 = seq(0, 0.166666666666, by=0.008771929789)
+ 	
+ 	if (length(grep("fluo", getVector(descriptorList), ignore.case=TRUE)) > 0) { #rot			
+ 		colorList = as.list(hsv(h=c(rev(intervalFluo), rev(intervalFluo20)), s=c(intervalSat, intervalSat20), v=1))
+ 	} else 
+ 	if (length(grep("phenol", getVector(descriptorList), ignore.case=TRUE)) > 0) { #gelb
+ 		colorList = as.list(hsv(h=c(intervalFluo, intervalFluo20), s=c(intervalSat, intervalSat20), v=1))
+ 	} else 
+ 	if (length(grep("vis", getVector(descriptorList), ignore.case=TRUE)) > 0) {
+ 		colorList = as.list(hsv(h=c(interval, interval20), s=1, v=c(intervalSat, intervalSat20)))
+ 	} else 
+ 	if (length(grep("nir", getVector(descriptorList), ignore.case=TRUE)) > 0) {
+ 		colorList = as.list(rgb(c(rev(interval), rev(interval20)), c(rev(interval), rev(interval20)), c(rev(interval),rev(interval20)), max = 1))		
+ 	} else {
+ 		return(list(0))
+ 	}
+ 	names(colorList) = c(
+ 		"0..25", "25..51", "51..76", "76..102", "102..127", 
+ 		"127..153", "153..178", "178..204", "204..229", "229..255", 
+ 		"0..12", "12..25", "25..38", "38..51", "51..63", "63..76", "76..89", 
+ 		"89..102", "102..114", "114..127", "127..140", "140..153", "153..165", 
+ 		"165..178", "178..191", "191..204", "204..216", "216..229", "229..242", 
+ 		"242..255")
+ 	return(colorList)
+ }
> 
> setColorList <- function(diagramTyp, descriptorList, overallResult, isGray) {
+ ######################
+ #diagramTyp <- "spiderplot"
+ #descriptorList <- overallList$boxSpiderDes
+ #overallResult <- overallList$overallResult_boxSpiderDes
+ #isGray <- overallList$isGray
+ ######################	
+ 		
+ 	if (!as.logical(isGray)) {
+ 		#colorVector = c(brewer.pal(8, "Set1"))
+ 		colorVector = c(brewer.pal(7, "Dark2"))
+ 		#colorVector = c(brewer.pal(11, "Spectral")) # sometimes very pale colors
+ 	} else {
+ 		colorVector = c(brewer.pal(9, "Greys"))
+ 	}
+ 	
+ 	colorList = list()
+ 	if (diagramTyp == "nboxplot" || diagramTyp == "boxplot" || diagramTyp == "violinplot") {
+ 		for (n in names(descriptorList)) {
+ 			#if (!is.na(descriptorList[[n]])) {
+ 			if (sum(!is.na(descriptorList[[n]])) > 0) {
+ 				colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$name)))
+ 			} else {
+ 				#ownCat("All values are 'NA'")
+ 			}
+ 		}
+ 	} else if (diagramTyp == "spiderplot") {
+ 		for (n in names(descriptorList)) {
+ 			#if (!is.na(descriptorList[[n]])) {
+ 			if (sum(!is.na(descriptorList[[n]])) > 0) {
+ 				#colorList[[n]] = colorRampPalette(colorVector)(length(descriptorList[[n]][,1]))
+ 				#colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$name)))
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {	
+ 					colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$primaerTreatment)))	
+ 				} else {
+ 					colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$name)))
+ 				}
+ 				##################### Anpassen huier werden noch zuviel Farbwerte ausgelesen ###############
+ 			} else {
+ 				#ownCat("All values are 'NA'")
+ 			}
+ 		}
+ 	} else {
+ 		for (n in names(descriptorList)) {
+ 			if (sum(!is.na(descriptorList[[n]])) > 0) {
+ 				colorList[[n]] = setColorListHist(descriptorList[n])
+ 			} else {
+ 				#ownCat("All values are 'NA'")
+ 			}
+ 		}
+ 	}
+ 	return(colorList)
+ }
> 
> setColor <- function(overallList) {
+ 	overallList$debug %debug% "setColor()"  
+ 	overallList$color_nBox = setColorList("nboxplot", overallList$nBoxDes, overallList$overallResult_nBoxDes, overallList$isGray)
+ 	overallList$color_box = setColorList("boxplot", overallList$boxDes, overallList$overallResult_boxDes, overallList$isGray)
+ 	overallList$color_boxStack = setColorList("boxplotStacked", overallList$boxStackDes, overallList$overallResult_boxStackDes, overallList$isGray)
+ 	overallList$color_spider = setColorList("spiderplot", overallList$boxSpiderDes, overallList$overallResult_boxSpiderDes, overallList$isGray)
+ 	#overallList$color_violin = setColorList("violinplot", overallList$violinBoxDes, overallList$overallResult_violinBoxDes, overallList$isGray)
+ 	return(overallList)
+ }
> 
> normalizeToHundredPercent =  function(whichRows, overallResult) {
+ 	return(t(apply(overallResult[whichRows, ], 1, function(x, y) {(100*x)/y}, y=colSums(overallResult[whichRows, ]))))
+ }
> 
> renameYForSubsection <- function(label) {
+ 	
+ 	label <- gsub("\\\\% ","percent", label)
+ 	label <- gsub("\\^2","$^2$", label)
+ 	
+ 	return(label)
+ }
> 
> writeLatexFile <- function(fileNameLatexFile, fileNameImageFile="", o="", ylabel="", subsectionDepth=1) { #insertSubsections=FALSE,
+ 	fileNameImageFile = preprocessingOfValues(fileNameImageFile, FALSE, "_")
+ 	fileNameLatexFile = preprocessingOfValues(fileNameLatexFile, FALSE, "_")
+ 	o = gsub('[[:punct:]]', "_", o)
+ 	
+ 	latexText <- ""
+ 	if (nchar(ylabel) > 0) {
+ 		ylabel <- renameYForSubsection(ylabel)
+ 		if (subsectionDepth == 1) {
+ 			latexText = paste(latexText, "\\subsection{",ylabel,"}\n", sep="" )
+ 		} else if (subsectionDepth == 2) {
+ 			latexText = paste(latexText, "\\subsubsection{",ylabel,"}\n", sep="" )
+ 		} else if (subsectionDepth == 3) {
+ 			latexText = paste(latexText, "\\subsubsubsection{",ylabel,"}\n", sep="" )
+ 		}
+ 	}
+ 	
+ #	if (insertSubsections & nchar(ylabel) > 0) {
+ #		ylabel <- renameYForAppendix(ylabel)
+ #		latexText = paste(latexText, "\\subsection{",ylabel,"}\n", sep="" )
+ #	}
+ 	latexText = paste(latexText,
+ 					 "\\loadImage{", 
+ 					   ifelse(fileNameImageFile == "", fileNameLatexFile, fileNameImageFile), 
+ 					  #ifelse(o == "", "", paste("_", o , sep="")), 
+ 					   ifelse(o == "", "", o), 
+ 					   ".pdf}", sep="")
+ 	
+ 	write(x=latexText, append=TRUE, file=paste(fileNameLatexFile, "tex", sep="."))
+ }
> 
> 
> writeLatexTable <- function(fileNameLatexFile, columnName=NULL, value=NULL, columnWidth=NULL) {
+ 	latexText <- ""
+ 
+ 	if (length(columnName) > 0) {
+ 		#latexText <- "\\begin{tabular}{|"
+ 		latexText <- "\\begin{longtable}{|"
+ 		
+ 		for(n in 1:length(columnName)) {
+ 			latexText <- paste(latexText, "p{",columnWidth[n],"}|", sep="")
+ 		}
+ 		latexText <- paste(latexText, "}", sep="")
+ 		
+ 		#This is the header for the first page of the table... --> endfirsthead
+ 		#This is the header for the remaining page(s) of the table... --> endhead
+ 		for(n in 1:2) {
+ 			
+ 			latexText <- paste(latexText, " \\hline ", sep="")
+ 			for(n in 1:length(columnName)) {
+ 				latexText <- paste(latexText, "{\\textbf{",
+ 						parseString2Latex(renameFilterOutput(as.character(columnName[n]))),
+ 					"}}", sep="")
+ 				if (n != length(columnName)) {
+ 					latexText <- paste(latexText, "& ", sep=" ")
+ 				}
+ 			}
+ 			latexText <- paste(latexText,
+ 								"\\tabularnewline",
+ 								"\\hline",
+ 								"\\hline", sep=" ")
+ 			if (n == 1) {
+ 				latexText <- paste(latexText, "\\endfirsthead", sep=" ")
+ 			} else {
+ 				latexText <- paste(latexText, "\\endhead", sep=" ")
+ 			}
+ 		}
+ 		
+ 		#This is the footer for all pages except the last page of the table...		
+ 		latexText <- paste(latexText, "\\multicolumn{", length(columnName), "}{l}{{Continued on Next Page\\ldots}} ",
+ 							"\\tabularnewline ",
+ 							"\\endfoot ", sep="")
+ 		
+ 		#This is the footer for the last page of the table...
+ 		latexText <- paste(latexText,"\\hline \\hline \\endlastfoot", sep=" ")
+ 		
+ 	} else if (length(value) > 0){
+ 		if (!is.null(value)) {
+ 			for(n in 1:length(value)) {
+ 				latexText <- paste(latexText, parseString2Latex(renameFilterOutput(as.character(value[n]))))
+ 				if (n != length(value)) {
+ 					latexText <- paste(latexText, " &", sep="")
+ 				}
+ 			}
+ 			latexText <- paste(latexText, "\\tabularnewline \\hline")
+ 		}
+ 	} else {
+ 		latexText <- paste(latexText, 
+ #						"\\hline",
+ #						"\\hline",
+ #						"\\end{tabular}", sep=" ")
+ 						"\\end{longtable}", sep=" ")
+ 	}
+ 	
+ 	if (latexText != "") {
+ 		write(x=latexText, append=TRUE, file=paste(fileNameLatexFile, "tex", sep="."))
+ 	}	
+ }
> 
> 
> saveImageFile <- function(overallList, plot, filename, extraString="") {
+ 	filename = preprocessingOfValues(paste(filename, extraString, sep=""), FALSE, replaceString = "_")	
+ 	
+ 	#ggsave (filename=paste(paste(filename, runif(1, 0.0, 1.0)), overallList$saveFormat, sep="."), plot = plot, dpi=as.numeric(overallList$dpi), width=8, height=5)
+ 	ggsave (filename=paste(filename, overallList$saveFormat, sep="."), plot = plot, dpi=as.numeric(overallList$dpi), width=8, height=5)
+ 
+ }
> 
> makeDepthBoxplotDiagram <- function(h, overallList) {
+ 	overallList$debug %debug% "makeDepthBoxplotDiagram()"
+ 	overallList$symbolParameter = 15
+ 	
+ 	if (h == 1) {
+ 		openImageFile(overallList)
+ 	}
+ 	par(mar=c(4.1, 4.1, 2.1, 2.1))
+ 	plot.depth(as.matrix(overallList$overallResult), plot.type=h, xlabel=overallList$xAxisName, l.width=12, lp.color=overallList$color)
+ 	
+ 	grid()
+ 	if (h == 1) {
+ 		dev.off()
+ 	}
+ 	if (overallList$appendix) {
+ 		writeLatexFile("appendixImage", overallList$fileName)
+ 	}
+ 	
+ 	return(overallList)
+ }
> 
> CheckIfOneColumnHasOnlyValues <- function(overallResult, descriptor="", diagramTyp="nboxplot") {	
+ 	max = -1	
+ 	for (index in levels(overallResult$name)) {
+ 		if (diagramTyp == "nboxplot" || diagramTyp == "boxplot") {
+ 			temp = sum(!is.na(overallResult$mean[overallResult$name == index]))
+ 		} else {
+ 			boolVec = overallResult$name == index
+ 			temp = sum(!is.na(overallResult[boolVec, descriptor]))
+ 		}
+ 		max = ifelse(temp > max, temp, max)
+ 	}	
+ 	return(ifelse(max == 1, TRUE, FALSE))
+ }
> 
> buildMyStats <- function(values, means, se) {
+ 	means = as.data.frame(as.vector(means))
+ 	colnames(means) = "means"
+ 	
+ 	se = as.data.frame(as.vector(se))
+ 	colnames(se) = "se"
+ 
+ 	return(data.frame(value=values, means=means, se=se))
+ }
> 
> buildMyStats2 <- function(values, means, se, rowName) {
+ 	means = as.data.frame(as.vector(means))
+ 	colnames(means) = "means"
+ 	
+ 	rowName = as.data.frame(as.vector(rowName))
+ 	colnames(rowName) = Name
+ 	
+ 	se = as.data.frame(as.vector(se))
+ 	colnames(se) = "se"
+ 	
+ 	return(data.frame(value=values, means=means, se=se, rowName=rowName))
+ }
> 
> reduceOverallResult <- function(tempOverallList, imagesIndex) {
+ 	tempOverallList$debug %debug% "reduceOverallResult()"
+ 
+ 	workingDataSet = buildDataSet(tempOverallList$overallResult[, 1:2], tempOverallList, c("mean", "se"), imagesIndex)
+ 	colnames(workingDataSet) = c(colnames(workingDataSet)[1:2], "mean", "se")
+ 	return(workingDataSet)	
+ }
> 
> 
> reduceWholeOverallResultToOneValue <- function(tempOverallResult, imagesIndex, debug, diagramTyp="nboxplot") {
+ ####################
+ #debug <- overallList$debug
+ #diagramTyp <- "nboxplot"
+ #####################
+ 	
+ 	
+ 	debug %debug% "reduceWholeOverallResultToOneValue()"
+ 	
+ 	if (diagramTyp == "boxplotstacked" || diagramTyp == "spiderplot") {
+ 		workingDataSet = tempOverallResult[tempOverallResult$plot == imagesIndex, ]
+ 		workingDataSet$hist = factor(workingDataSet$hist, unique(workingDataSet$hist))
+ 	} else {
+ 		colNames = vector()
+ 		if (diagramTyp == "nboxplot" || diagramTyp == "barplot") {
+ 			colNames = c("mean", "se")
+ 		} else if (diagramTyp == "boxplot") {
+ 			colNames = c("value")
+ 		} else if (diagramTyp == "violinplot") {
+ 			colNames = c("mean")
+ 		}
+ 		
+ 		if ("primaerTreatment" %in% colnames(tempOverallResult)) {
+ 			standardColumnName = c("name", "primaerTreatment", "xAxis")
+ 		} else {
+ 			standardColumnName = c("name", "xAxis")
+ 		}
+ 
+ 		if (sum(!(colNames %in% colnames(tempOverallResult)))>0) {
+ 
+ 			workingDataSet = buildDataSet(tempOverallResult[, standardColumnName], tempOverallResult, colNames, imagesIndex, diagramTyp)
+ 			lengthOfNewColumns <- length(colnames(workingDataSet[,-c(1:length(standardColumnName))]))
+ 			
+ #			if (diagramTyp == "spiderplot") {
+ #				if (lengthOfNewColumns > 1) {
+ #					colnames(workingDataSet) = c(standardColumnName, paste(rep.int(colNames,lengthOfNewColumns),1:lengthOfNewColumns, sep=""))
+ #				}else {
+ #					colnames(workingDataSet) = c(standardColumnName, colNames)
+ #				}
+ #			} else {
+ 				colnames(workingDataSet) = c(standardColumnName, colNames)
+ #			}
+ 		
+ #			if (lengthOfNewColumns > 1) {
+ #				colnames(workingDataSet) = c(standardColumnName, paste(rep.int(colNames,lengthOfNewColumns),1:lengthOfNewColumns, sep=""))
+ #			} else {
+ #				colnames(workingDataSet) = c(standardColumnName, colNames)
+ #			}
+ 			
+ 		} else {
+ 			workingDataSet = tempOverallResult
+ 		}
+ 	}
+ 	return(workingDataSet)	
+ }
> 
> newTreatmentNameFunction <- function(seq, n) {
+ 	numberCharAfterSeparate <- 8
+ 	if (nchar(n) > (numberCharAfterSeparate+4)) {
+ 		newTreatmentName <- paste(seq, ". ", substr(n,1,numberCharAfterSeparate), " ...", sep="")
+ 	} else {
+ 		newTreatmentName <- paste(seq, ". ", n, sep="")
+ 	}
+ 	return(newTreatmentName)
+ }
> 
> 
> renameOfTheTreatments <- function(overallList) {
+ 	overallList$debug %debug% "renameOfTheTreatments()"
+ 	
+ 	if (!overallList$appendix) {
+ 		
+ 		#newTreatmentName <- character()
+ 		columnName <- c("Short name", "Full Name")
+ 		
+ 		if (overallList$filterTreatment[1] != "none") {
+ 			seq <- 0;
+ 			FileName <- "conditionsFirstFilter"
+ 			writeLatexTable(FileName, columnName, columnWidth=c("3cm","13cm"))
+ 			for(n in overallList$filterTreatment) {
+ 				seq <- seq+1
+ 				overallList$filterTreatmentRename[[n]] <- newTreatmentNameFunction(seq, n)
+ 				writeLatexTable(FileName, value=c(overallList$filterTreatmentRename[[n]],n))
+ 			}
+ 			writeLatexTable(FileName)
+ 		}
+ 	
+ 		if (overallList$filterSecondTreatment[1] != "none") {
+ 			seq <- 0
+ 			FileName <- "conditionsSecondFilter"
+ 			writeLatexTable(FileName, columnName, columnWidth=c("3cm","13cm"))
+ 			for(n in overallList$filterSecondTreatment) {
+ 				seq <- seq+1
+ 				overallList$secondFilterTreatmentRename[[n]] <- newTreatmentNameFunction(letters[seq], n)
+ 				writeLatexTable(FileName, value=c(overallList$secondFilterTreatmentRename[[n]],n))
+ 			}
+ 			writeLatexTable(FileName)
+ 		}
+ 	}
+ 
+ 	return(overallList)
+ }
> 
> 
> replaceTreatmentNamesOverall <- function(overallList, overallResult) {
+ 	overallList$debug %debug% "replaceTreatmentNamesOverall()"
+ if(!overallList$appendix) {
+ 	if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 		overallResult$name <- replaceTreatmentNames(overallList, overallResult$name, onlySecondTreatment = TRUE)
+ 		overallResult$primaerTreatment <- replaceTreatmentNames(overallList, overallResult$primaerTreatment, onlyFirstTreatment = TRUE)
+ 	} else {
+ 		overallResult$name <- replaceTreatmentNames(overallList, overallResult$name, onlyFirstTreatment = TRUE)
+ 	}
+ }
+ 	return(overallResult)
+ }
> 
> 
> replaceTreatmentNames <- function(overallList, columnWhichShouldReplace, onlyFirstTreatment=FALSE, onlySecondTreatment=FALSE) {
+ ##########
+ #columnWhichShouldReplace <- overallResult$name
+ #onlyFirstTreatment <- TRUE
+ #onlySecondTreatment <- TRUE
+ ##########
+ 	
+ 	
+ 	overallList$debug %debug% "replaceTreatmentNames()"
+ 	
+ 	columnWhichShouldReplace <- as.character(columnWhichShouldReplace)
+ 	
+ 	if (overallList$filterSecondTreatment[1] != "none" & !onlyFirstTreatment & !onlySecondTreatment) {
+ 		for(n in overallList$filterTreatment) {
+ 			for(k in overallList$filterSecondTreatment) {
+ 				columnWhichShouldReplace <- replace(columnWhichShouldReplace, columnWhichShouldReplace==paste(n,"/",k, sep=""), paste(overallList$filterTreatmentRename[[n]],"/", overallList$secondFilterTreatmentRename[[k]], sep=""))
+ 			}
+ 		} 
+ 	} 
+ 	
+ 	if (overallList$filterTreatment[1] != "none" & onlyFirstTreatment) {
+ 		for(n in overallList$filterTreatment) {
+ 			columnWhichShouldReplace <- replace(columnWhichShouldReplace, columnWhichShouldReplace==n, overallList$filterTreatmentRename[[n]])
+ 		}
+ 	}
+ 	
+ 	if (overallList$filterSecondTreatment[1] != "none" & onlySecondTreatment) {
+ 		for(n in overallList$filterSecondTreatment) {
+ 			columnWhichShouldReplace <- replace(columnWhichShouldReplace, columnWhichShouldReplace==n, overallList$secondFilterTreatmentRename[[n]])
+ 		}
+ 	}
+ 	#ownCat(unique(columnWhichShouldReplace))
+ 	return(as.factor(columnWhichShouldReplace))
+ }
> 
> createOuputOverview <- function(typ, actualImage, maxImage, imageName) {
+ 	ownCat(paste("Create ", typ, " ", actualImage, "/", maxImage, ": '",imageName, "'", sep=""))
+ 	
+ }
> 
> parseString2Latex <- function(text) {
+ 
+ 	##text <- gsub("\\", "\\textbackslash ", text)
+ 	text <- gsub("{", "\\{ ", text, fixed=TRUE)
+ 	text <- gsub("}", "\\} ", text, fixed=TRUE)
+ 	text <- gsub("ä", "{\\\"a}", text, fixed=TRUE)
+ 	text <- gsub("ö", "{\\\"o}", text, fixed=TRUE)
+ 	text <- gsub("ü", "{\\\"u}", text, fixed=TRUE)
+ 	text <- gsub("ß", "{\\ss}", text, fixed=TRUE)
+ 	text <- gsub("_", "{\\_}", text, fixed=TRUE)
+ 	text <- gsub("<", "\\textless " , text, fixed=TRUE)
+ 	text <- gsub(">", "\\textgreater ", text, fixed=TRUE)
+ 	text <- gsub("§", "\\S ", text, fixed=TRUE)
+ 	text <- gsub("$", "\\$ ", text, fixed=TRUE)
+ 	text <- gsub("&", "\\& ", text, fixed=TRUE)
+ 	text <- gsub("#", "\\# ", text, fixed=TRUE)
+ 	
+ 	text <- gsub("%", "\\% ", text, fixed=TRUE)
+ 	text <- gsub("~", "\\textasciitilde ", text, fixed=TRUE)
+ 	text <- gsub("€", "\\texteuro ", text, fixed=TRUE)
+ 
+ 	return(text)
+ }
> 
> renameFilterOutput <- function(text) {
+ 	
+ 	text <- gsub("=",": ",text, fixed = TRUE)
+ 	text <- gsub("/", ", ", text, fixed = TRUE)
+ 	text <- gsub("(", " (", text, fixed = TRUE)
+ 	text <- gsub("  ", " ", text, fixed = TRUE)
+ 	
+ 	return(text)
+ }
> 
> renameY <- function(label) {
+ 	
+ 	if (length(grep("\\.\\.",label, ignore.case=TRUE)) > 0){
+ 		label <- sub("\\.\\.", " (",label)
+ 		label <- paste(substring(label,1,nchar(label)-1),")",sep="")
+ 	}
+ 	
+ 	label <- sub("mm\\.2","mm^2",label)	
+ 	label <- sub("percent", "(%)", label)
+ 	label <- sub("pixels", "(px)", label)
+ 	label <- sub("(c p)", "(c/p)", label)
+ 	label <- gsub("_", "-", label)
+ 	label <- sub("(relative pix)", "(relative/px)", label)
+ 	
+ 	label <- gsub("\\."," ",label)
+ 	label <- gsub("\\(\\(","(", label)
+ 	label <- gsub("\\)\\)",")", label)
+ 	return(label)		
+ }
> 
> writeTheData  <- function(overallList, plot, fileName, extraString, writeLatexFileFirstValue="", writeLatexFileSecondValue="", subSectionTitel="", makeOverallImage=FALSE, isAppendix=FALSE, subsectionDepth=1) {
+ 	
+ 	overallList$debug %debug% "writeTheData()"		
+ 
+ 	if (subSectionTitel != "") {
+ 		subSectionTitel <- parseString2Latex(subSectionTitel)
+ 	}
+ 
+ 	saveImageFile(overallList, plot, fileName, extraString)
+ 	if (makeOverallImage) {
+ 		if (subSectionTitel != "") {
+ 			writeLatexFile(writeLatexFileFirstValue, writeLatexFileSecondValue, ylabel=subSectionTitel, subsectionDepth=subsectionDepth)	
+ 		} else {
+ 			writeLatexFile(writeLatexFileFirstValue, writeLatexFileSecondValue)
+ 		}
+ 	} 
+ 	
+ #	else {
+ #		writeLatexFile(fileName, writeLatexFileSecondValue)	
+ #	}
+ 	
+ 	if (isAppendix) {
+ 		if (subSectionTitel != "") {
+ 			writeLatexFile("appendixImage", fileName, extraString, ylabel=subSectionTitel, subsectionDepth=subsectionDepth)
+ 		} else {
+ 			writeLatexFile("appendixImage", fileName, extraString)
+ 		}
+ 	}
+ }
> 
> loadLibs <- function(installAndUpdate = FALSE) {
+ 	libraries  <- c(
+ 		  "Cairo", "RColorBrewer", "data.table", "ggplot2",
+ 		 "fmsb", "methods", "grid", "snow", "snowfall") #, "mvoutlier")
+ 	loadInstallAndUpdatePackages(libraries, installAndUpdate, installAndUpdate, FALSE)
+ }
> 
> parMakeLinearDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, diagramTypSave="nboxplot") {
+ 
+ ########
+ #overallResult <- overallList$overallResult_nBoxDes
+ #overallDescriptor <- overallList$nBoxDes
+ #overallColor <- overallList$color_nBox
+ #overallDesName <-overallList$nBoxDesName
+ #overallFileName <- overallList$imageFileNames_nBoxplots
+ #diagramTypSave="nboxplot"
+ #imagesIndex <- "1"
+ #############
+ 
+ 	overallList$debug %debug% "parMakeLinearDiagram()"	
+ 	
+ 	#tempOverallResult =  na.omit(overallResult)
+ 
+ 	tempOverallResult =  overallResult	
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		if (!is.na(overallDescriptor[[imagesIndex]])) {
+ 			createOuputOverview("line plot", imagesIndex, length(names(overallDescriptor)),  overallDesName[[imagesIndex]])
+ 			overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "nboxplot")
+ 			overallResult = overallResult[!is.na(overallResult$mean), ]	#first all values where "mean" != NA are taken
+ 			overallResult[is.na(overallResult)] = 0 #second if there are values where the se are NA (because only one Value are there) -> the se are set to 0
+ 
+ 			overallResult <-  replaceTreatmentNamesOverall(overallList, overallResult)	
+ 			
+ 			if (innerThreaded)
+ 				sfClusterCall(makeLinearDiagram, 
+ 					overallResult, overallDescriptor, overallColor, 
+ 					overallDesName, overallFileName, overallList,
+ 					imagesIndex, 
+ 					stopOnError=FALSE)
+ 			else
+ 				makeLinearDiagram(
+ 					overallResult, overallDescriptor, overallColor, 
+ 					overallDesName, overallFileName, overallList,
+ 					imagesIndex)
+ 		}
+ 	}
+ }
> 
> makeLinearDiagram <- function(
+ 	overallResult, overallDescriptor, overallColor, overallDesName, 
+ 	overallFileName, overallList, imagesIndex) {
+ 
+ 
+ #  c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")	
+ #	overallList$stress.Start <- c(10,20,30,37)
+ #	overallList$stress.End <- c(13, 23, 33, 40)
+ #	overallList$stress.Typ <- c("001","001","004", "003")
+ #	overallList$stress.Label <- c(-1, -1, -1, -1)
+ #	
+ #	overallList$stress.Start <- c(10,20,30)
+ #	overallList$stress.End <- c(13, 23,33)
+ #	overallList$stress.Typ <- c("002","001","002")
+ #	overallList$stress.Label <- c(-1, -1,-1)
+ 
+ 	overallList$debug %debug% "makeLinearDiagram()"	
+ 	ylabelForAppendix <- ""
+   	diagramTypSave <- "nboxplot"
+ 	color <- overallColor[[imagesIndex]]
+ 	stressArea <- data.frame()
+ 	
+ 	if(overallList$stress.Start != -1) {
+ 		stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$mean, diagramTypSave, overallResult$se)
+ 		color <- addColorForStressPhaseAndOther(stressArea, color, diagramTypSave)
+ 	}
+   
+ 	if (length(overallResult[, 1]) > 0) {
+ 	
+ 		if (!CheckIfOneColumnHasOnlyValues(overallResult)) {
+ 	
+ 			plot <-	ggplot() 
+ 					
+ 			if(length(stressArea) >0) {
+ 				plot <- plot + 
+ 						geom_rect(data=stressArea, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=typ)) +
+ 						#geom_text(data=stressArea, aes(x=xmin, y=(ymax-ymax*0.15), label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 						geom_text(data=stressArea, aes(x=xmin, y=ymin, label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 				
+ 			}	
+ 			
+ 			if (length(grep("%/day",overallDesName[[imagesIndex]], ignore.case=TRUE)) > 0 || overallList$isRatio || length(grep("relative",overallDesName[[imagesIndex]], ignore.case=TRUE)) > 0 || length(grep("average",overallDesName[[imagesIndex]], ignore.case=TRUE)) > 0) {
+ 				plot <- plot + geom_smooth(data=overallResult, aes(x=xAxis, y=mean, shape=name, ymin=mean-se, ymax=mean+se, colour=name, fill=name), method="loess", stat="smooth", alpha=0.1)
+ 				#plot <- plot + geom_ribbon(aes(ymin=mean-se, ymax=mean+se, fill=name), alpha=0.1)
+ 			} else {
+ 				plot <- plot + geom_ribbon(data=overallResult, aes(x=xAxis, y=mean, shape=name, ymin=mean-se, ymax=mean+se, fill=name), stat="identity", alpha=0.1) +
+ 						geom_line(data=overallResult, aes(x=xAxis, y=mean, color=name), alpha=0.2)
+ 			}
+ 					
+ 			plot <- plot +	
+ 					geom_point(data=overallResult, aes(x=xAxis, y=mean, color=name), size=3) +
+ #							ownCat("drinne")
+ #							ownCat(overallResult$xAxis)
+ #							ownCat(min(as.numeric(as.character(overallResult$xAxis))))
+ #							ownCat(max(as.numeric(as.character(overallResult$xAxis))))
+ #							plot <-  plot + 
+ 					scale_x_continuous(name=overallList$xAxisName, minor_breaks = min(as.numeric(as.character(overallResult$xAxis))):max(as.numeric(as.character(overallResult$xAxis))))					
+ 					
+ 					if (overallList$appendix) {
+ 						ylabelForAppendix <- renameY(overallDesName[[imagesIndex]])
+ 						plot <- plot + ylab(ylabelForAppendix)
+ 					} else {
+ 						plot <- plot + ylab(overallDesName[[imagesIndex]])
+ 					}
+ 					
+ 								
+ 				plot <- plot +
+ 					scale_fill_manual(values = color, guide="none") +
+ 					scale_colour_manual(values= overallColor[[imagesIndex]]) +
+ 					scale_shape_manual(values = c(1:length(overallColor[[imagesIndex]]))) +
+ 					theme_bw()
+ 					
+ 			if(overallList$secondTreatment == "none") {
+ 				plot <- plot +
+ 						opts(legend.position = "none")
+ 			} else {
+ 				plot <- plot +
+ 						opts(legend.position = "right")
+ 			}	
+ 			plot <- plot +	
+ 					opts(axis.title.x = theme_text(face="bold", size=11), 
+ 							axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 							#panel.grid.major = theme_blank(), # switch off major gridlines
+ 							#panel.grid.minor = theme_blank(), # switch off minor gridlines
+ 							#legend.position = "right", # manually position the legend (numbers being from 0, 0 at bottom left of whole plot to 1, 1 at top right)
+ 							legend.title = theme_blank(), # switch off the legend title						
+ 							legend.key.size = unit(1.5, "lines"), 
+ 							legend.key = theme_blank(), # switch off the rectangle around symbols in the legend
+ 							panel.border = theme_rect(colour="Grey", size=0.1)
+ 					) 
+ 					#+ guides(colour = guide_legend("none"))
+ 			
+ 			if (length(overallColor[[imagesIndex]]) > 18 & length(overallColor[[imagesIndex]]) < 31) {
+ 				plot = plot + opts(legend.text = theme_text(size=6),
+ 								   legend.key.size = unit(0.7, "lines"),
+ 								   strip.text.x = theme_text(size=6)
+ 									)
+ 			} else if (length(overallColor[[imagesIndex]]) >= 31) {
+ 				plot = plot + opts(legend.text = theme_text(size=4),
+ 								   legend.key.size = unit(0.4, "lines"),
+ 								   strip.text.x = theme_text(size=4)
+ 				)
+ 			} else {
+ 				plot = plot + opts(legend.text = theme_text(size=11),
+ 								   strip.text.x = theme_text(size=11))
+ 			}
+ 			
+ 			#Überlegen ob das sinn macht!!
+ 			#if (length(unique(overallResult$name)) > 18) {
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 					plot = plot + facet_wrap(~ primaerTreatment)
+ 				} else {
+ 					plot = plot + facet_wrap(~ name)
+ 				} 
+ 			#}
+ 								
+ 		#	print(plot)
+ 
+ ##!# nicht löschen, ist die interpolation (alles in dieser if Abfrage mit #!# makiert)
+ ##!#				newCoords = seq(min(overallList$filterXaxis, na.rm=TRUE), max(overallList$filterXaxis, na.rm=TRUE), 1)
+ ##!#				newValue = approx(overallList$filterXaxis, overallList$overallResult[y, ], xout=newCoords, method="linear")
+ ##!#				
+ ##!#				naVector = is.na(overallList$overallResult[y, ])
+ ##!#				overallResultWithNaValues = overallList$overallResult[y, ]
+ ##!#				overallList$overallResult[y, naVector] = newValue$y[overallList$filterXaxis[naVector]]
+ #				
+ #				if (firstPlot) {
+ #					firstPlot = FALSE
+ ##!#				plot(overallList$filterXaxis, overallList$overallResult[y, ], main="", type="c", xlab=overallList$xAxisName, col=overallList$color[y], ylab=overallList$yAxisName, pch=y, lty=1, lwd=3, ylim=c(min(overallList$overallResult, na.rm=TRUE), max(overallList$overallResult, na.rm=TRUE)))
+ #					plot(overallList$filterXaxis, overallList$overallResult[y, ], main="", type="b", xlab=overallList$xAxisName, col=overallList$color[y], ylab=overallList$yAxisName, pch=y, lty=1, lwd=3, ylim=c(min(overallList$overallResult, na.rm=TRUE), max(overallList$overallResult, na.rm=TRUE)))
+ #				} else {
+ ##!#				points(overallList$filterXaxis, overallList$overallResult[y, ], type="c", col=overallList$color[y], pch=y, lty=1, lwd=3 )	
+ #					points(overallList$filterXaxis, overallList$overallResult[y, ], type="b", col=overallList$color[y], pch=y, lty=1, lwd=3 )
+ #				}
+ ##!#				points(overallList$filterXaxis, overallResultWithNaValues, type="p", col=overallList$color[y], pch=y, lty=1, lwd=3 )
+ #			} 
+ 
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave, isAppendix=overallList$appendix, subSectionTitel=ylabelForAppendix, subsectionDepth=1)
+ 		} else {
+ 			ownCat("Only one column has values, create barplot!")
+ 	
+ 			day = overallResult$xAxis[!is.na(overallResult$mean)][1]
+ 			tempXaxisName = overallList$xAxisName
+ 			overallList$xAxisName = paste(overallList$xAxisName, day)
+ 			#overallList$overallResult = overallList$overallResult[!is.na(overallList$overallResult$mean), ]
+ 			makeBarDiagram(overallResult, overallDescriptor[imagesIndex], overallColor[imagesIndex], overallDesName[imagesIndex], overallFileName[imagesIndex], overallList, TRUE, diagramTypSave)
+ 			overallList$xAxisName = tempXaxisName
+ 		}
+ 	}
+ }
> 
> getColor <- function(overallColorIndex, overallResult) {
+ 	input = as.vector(unique(overallResult$hist))
+ 	
+ 	color = vector()
+ 	for (n in input) {
+ 		color = c(color, overallColorIndex[[n]])
+ 	}
+ 	return(color)
+ }
> 
> 
> plotStackedImage <- function(overallList, overallResult, title = "", makeOverallImage = FALSE, legende=TRUE, minor_breaks=TRUE, overallColor, overallDesName, imagesIndex, overallFileName) {
+ #####
+ #makeOverallImage <- TRUE
+ #legende <- TRUE
+ #minor_breaks <- FALSE
+ #overallResult <- plotThisValues
+ #positionType <- overallList$stackedBarOptions$typOfGeomBar[2]
+ #title <- ""
+ #####
+ 
+ 
+ #makeStress <- FALSE
+ 
+ 
+ #  c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")	
+ #	overallList$stress.Start <- c(10,20,30,37)
+ #	overallList$stress.End <- c(13, 23, 33, 40)
+ #	overallList$stress.Typ <- c("001","001","004", "003")
+ #	overallList$stress.Label <- c(-1, -1, -1, -1)
+ #	
+ #	overallList$stress.Start <- c(10,20,30)
+ #	overallList$stress.End <- c(13, 23,33)
+ #	overallList$stress.Typ <- c("002","001","002")
+ #	overallList$stress.Label <- c(-1, -1,-1)
+ 
+ 
+ 	overallList$debug %debug% "plotStackedImage()"	
+ 	
+ 	
+ 	
+ 	if (length(overallResult[, 1]) > 0) {
+ 			
+ 		if (length(overallList$stackedBarOptions$typOfGeomBar) == 0) {
+ 			overallList$stackedBarOptions$typOfGeomBar = c("fill")
+ 		}
+ 		
+ 		if ("primaerTreatment" %in% colnames(overallResult)) {
+ 			overallResult$primaerTreatment <-  replaceTreatmentNames(overallList, overallResult$primaerTreatment, TRUE)
+ 		} else {
+ 			overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name, TRUE)
+ 		}
+ 		
+ 		for (positionType in overallList$stackedBarOptions$typOfGeomBar) {			
+ 			makeStress <- TRUE
+ 			stressArea <- data.frame()	
+ 			colorWithoutStress <- getColor(overallColor[[imagesIndex]], overallResult)
+ 			if(positionType == "stack") {
+ 				makeStress <- FALSE
+ 			}
+ 			
+ 			if(overallList$stress.Start != -1 && positionType != "fill" && makeStress) {
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {
+ 					stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$values, "boxplotstacked", positionType, overallResult[, c("xAxis", "primaerTreatment")])
+ 				} else {
+ 					stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$values, "boxplotstacked", positionType, overallResult[, c("xAxis", "name")])
+ 				}
+ 				color <- addColorForStressPhaseAndOther(stressArea, colorWithoutStress, positionType)
+ 			}
+ #			print(stressArea)
+ #			print(overallList$stress.Start)
+ 			plot <- ggplot()
+ 			
+ 			if(length(stressArea) >0) {
+ 				plot <- plot + 
+ 						geom_rect(data=stressArea, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=typ), guides="none") +
+ 						geom_text(data=stressArea, aes(x=xmin, y=(ymax-ymax*0.15), label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 				
+ 			}	
+ 	
+ 				if (positionType == "dodge") {				
+ 					plot <- plot +
+ 							geom_line(data= overallResult, aes(x=xAxis, y=values, colour=hist), position="identity") + 
+ 							#scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 							#scale_colour_manual(values= getColor(overallColor[[imagesIndex]], overallResult))
+ 							scale_colour_manual(values= colorWithoutStress)
+ 					
+ 				} else {
+ 					plot <- plot +
+ 							geom_bar(data = overallResult, aes(x=xAxis, y=values, fill=hist), stat="identity", position = positionType)
+ 							
+ 				}
+ 								
+ 				if (positionType == "dodge" || positionType == "stack") {
+ 					name <- sub("%", "px", overallDesName[[imagesIndex]])
+ 				} else {
+ 					name <- sub("(zoom corrected) ", "", overallDesName[[imagesIndex]])
+ 				}
+ 
+ 					plot <- plot + 
+ 						   ylab(name) 
+ 					#coord_cartesian(ylim=c(0, 1)) +
+ 			
+ 			if (minor_breaks) {
+ 				plot = plot + scale_x_continuous(name=overallList$xAxisName, minor_breaks = min(overallResult$xAxis):max(overallResult$xAxis))
+ 			} else {
+ 				plot <- plot + xlab(overallList$xAxisName)
+ 			}
+ 					
+ 			if(positionType == "dodge" && length(stressArea) >0) {
+ 				plot <- plot +
+ 						scale_fill_manual(values = color[!(color %in% colorWithoutStress)], name="", labels = c(unique(as.character(stressArea$label))), guide="none")
+ 			} else if(positionType == "stack" && length(stressArea) >0) {
+ #				if(length(stressArea) >0) {
+ 					plot <- plot + 
+ 							scale_fill_manual(values = color, name="", labels = c(unique(as.character(stressArea$label)),unique(as.character(overallResult$hist))))
+ #				} else {
+ #					plot <- plot +
+ #						scale_fill_manual(values = colorWithoutStress, name="")
+ #				}
+ 			} else {
+ 				plot <- plot +
+ 					scale_fill_manual(values = colorWithoutStress, name="")
+ 			}
+ 				#	scale_fill_manual(values = color, name="") +
+ 				#	scale_color_manual(value=c("red", "blue")) +
+ 					#scale_fill_manual(values = getColor(overallColor[[imagesIndex]], overallResult), name="") +
+ 			plot <- plot +
+ 					theme_bw() +
+ 					opts(axis.title.x = theme_text(face="bold", size=11), 
+ 							axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 							#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), 
+ 							#panel.background = theme_rect(linetype = "dotted"), 
+ 							panel.border = theme_rect(colour="Grey", size=0.1), 
+ 							strip.background = theme_rect(colour=NA)
+ 	#						plot.title = theme_text(size=10), 
+ 	#						plot.title = theme_rect(colour="Pink", size=0.1), 
+ 					) 
+ 			
+ 			if (!legende) {
+ 				plot = plot + opts(legend.position="none")
+ 			} else {
+ 				plot = plot + opts(legend.position="right", 
+ 									legend.title = theme_blank(), 
+ 									legend.text = theme_text(size=11), 
+ 									legend.key = theme_blank())
+ 			}
+ 			
+ 			if (title != "") {
+ 				plot = plot + opts(title = title)
+ 			}
+ 			
+ 			if (!minor_breaks) {
+ 				plot = plot + opts(panel.grid.minor = theme_blank())
+ 			}
+ 			
+ 			if (positionType == "fill") {
+ 				plot = plot + scale_y_continuous(labels=seq(0, 100, 20), breaks=seq(0, 1, 0.2))
+ 			}
+ 			
+ 			if (makeOverallImage) {
+ 				#plot = plot + facet_wrap(~ name, drop=TRUE)
+ 				#plot = plot + facet_wrap(~ name)
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 					plot = plot + facet_wrap(~ primaerTreatment)
+ 				} else {
+ 					plot = plot + facet_wrap(~ name)
+ 				}
+ 			}
+ 			
+ 			#print(plot)
+ 			
+ 			subtitle <- ""
+ 			if (positionType == overallList$stackedBarOptions$typOfGeomBar[1] || length(overallList$stackedBarOptions$typOfGeomBar) == 1) {
+ 				subtitle <- title
+ 			}
+ 			
+ 			
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], paste("overall", title, positionType, sep=""), paste(overallFileName[[imagesIndex]], "stackedOverallImage", sep=""), paste(overallFileName[[imagesIndex]], "overall", title, positionType, sep=""), subtitle, makeOverallImage,subsectionDepth=2)
+ 			
+ #			saveImageFile(overallList, plot, overallFileName[[imagesIndex]], paste("overall", title, positionType, sep=""))
+ #			if (makeOverallImage) {
+ #				if (title != "") {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "stackedOverallImage", sep=""), paste(overallFileName[[imagesIndex]], "overall", title, positionType, sep=""), TRUE, title)	
+ #				} else {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "stackedOverallImage", sep=""), paste(overallFileName[[imagesIndex]], "overall", title, positionType, sep=""))
+ #				}
+ #			} else {
+ #				writeLatexFile(overallFileName[[imagesIndex]], paste(overallFileName[[imagesIndex]], "overall", positionType, title, sep="_"))	
+ #			}			
+ 		}
+ 	}
+ }
> 
> 
> 
> 
> PreWorkForMakeBigOverallImage <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, imagesIndex) {
+ #####
+ #value <- overallList$filterSecondTreatment[1]
+ #####	
+ 	overallList$debug %debug% "PreWorkForMakeBigOverallImage()"	
+ 		
+ 	groupBy = groupByFunction(list(overallList$treatment, overallList$secondTreatment))
+ 	if (length(groupBy) == 0 || length(groupBy) == 1) {
+ 		plotStackedImage(overallList = overallList, overallResult = overallResult, makeOverallImage = TRUE, legende=TRUE, minor_breaks=FALSE, overallColor = overallColor, overallDesName = overallDesName, imagesIndex= imagesIndex, overallFileName =overallFileName)
+ 	} else {
+ 		for (value in overallList$filterSecondTreatment) { 
+ 			title = overallList$secondFilterTreatmentRename[[value]]
+ 			#ownCat(title)
+ 			#plottedName = overallList$filterTreatment %contactAllWithAll% value
+ 			#booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = plottedName))
+ 			booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = value))
+ 			plotThisValues = overallResult[booleanVector, ]
+ 			#overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name)
+ 		#	plotThisValues = reNameColumn(plotThisValues, "name", "primaerTreatment")
+ 			plotStackedImage(overallList, plotThisValues, title = title, makeOverallImage = TRUE, legende=TRUE, minor_breaks=FALSE, overallColor = overallColor, overallDesName = overallDesName, imagesIndex=imagesIndex, overallFileName=overallFileName)
+ 		}	 
+ 	}
+ }
> 
> PreWorkForMakeNormalImages <- function(h, overallList) {
+ 	overallList$debug %debug% "PreWorkForMakeNormalImages()"
+ 	stackedImages = unlist(unique(overallList$overallResult["name"]))
+ 	
+ 	for (o in stackedImages) {
+ 		overallList$debug %debug% paste("makeBoxplotStackedDiagram with the descriptor: ", overallList$fileName, o)
+ 		plotThisValues = overallList$overallResult[overallList$overallResult["name"] == o, ]
+ 		plotStackedImage(h, overallList, plotThisValues, o, FALSE, TRUE, TRUE)
+ 	}
+ }
> 
> parMakeBoxplotStackedDiagram <- function(overallResult, overallDescriptor, overallColor, 
+ 		overallDesName, overallFileName, overallList) {
+ 	
+ 	########
+ #overallResult <- overallList$overallResult_boxStackDes
+ #overallDescriptor <- overallList$boxStackDes
+ #overallColor <- overallList$color_boxStack
+ #overallDesName <-overallList$boxStackDesName
+ #overallFileName <- overallList$imageFileNames_StackedPlots
+ #diagramTypSave="boxplotstacked"
+ #imagesIndex <- "1"
+ 	#############	
+ 
+ 	overallList$debug %debug% "makeBoxplotStackedDiagram()"
+ 	#overallResult[is.na(overallResult)] = 0
+ 	tempOverallResult =  na.omit(overallResult)
+ 	#tempOverallResult = overallResult
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		createOuputOverview("stacked barplot", imagesIndex, length(names(overallDescriptor)), overallDesName[[imagesIndex]])
+ 		overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "boxplotstacked")
+ 	
+ 		if (innerThreaded)
+ 			sfClusterCall(makeBoxplotStackedDiagram, 
+ 				overallResult, overallDescriptor, overallColor, 
+ 				overallDesName, overallFileName, overallList, imagesIndex, 
+ 				stopOnError=FALSE)
+ 		else
+ 			makeBoxplotStackedDiagram( 
+ 				overallResult, overallDescriptor, overallColor, 
+ 				overallDesName, overallFileName, overallList, imagesIndex)
+ 		
+ 	}
+ }
> 
> makeBoxplotStackedDiagram <- function(overallResult, overallDescriptor, overallColor, 
+ 		overallDesName, overallFileName, overallList, imagesIndex) {
+ 		
+ 	if (length(overallResult[, 1]) > 0) {
+ 		PreWorkForMakeBigOverallImage(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, imagesIndex)
+ 	}
+ }	
> 
> removeNAsSpider <- function(overallResult, xAxisPosition) {
+ 	overallResultStart <- overallResult[1:xAxisPosition]
+ 	overallResult <- overallResult[(xAxisPosition+1):length(colnames(overallResult))]
+ 	booleanVector <- !apply(overallResult,1,function(x)all(is.na(x)))
+ 	
+ 	return(cbind(overallResultStart[booleanVector,], overallResult[booleanVector,]))
+ }
> 
> 
> openPlotDevice <- function(overallList, fileName, extraString, h) {
+ 	if (h==1) {
+ 		filename = preprocessingOfValues(paste(fileName, extraString, sep=""), FALSE, replaceString = "_")
+ 		Cairo(width=10, height=7, file=paste(filename, overallList$saveFormat, sep="."), type=overallList$saveFormat, bg="transparent", units="in", dpi=as.numeric(overallList$dpi))
+ 	}
+ }
> 
> closePlotDevice <- function(h) {
+ 	if (h==1) {
+ 		dev.off()
+ 	}
+ }
> 
> transferIntoPercentValues <- function(overallResult, xAxisPosition) {
+ 	overallResultCalulate <- overallResult[(xAxisPosition+1):(length(colnames(overallResult))-1)]
+ 	overallResultCalulate <- (overallResultCalulate * 100) / max(overallResultCalulate)
+ 	
+ 	return(data.frame(overallResult[c(1:xAxisPosition)], overallResultCalulate, overallResult[length(colnames(overallResult))]))
+ }
> 
> normalizeEachDescriptor <- function(overallResult) {
+ 
+ 	for(name in unique(overallResult$hist)) {
+ 		overallResult[overallResult$hist == name,]$values <- sapply(overallResult[overallResult$hist == name,]$values,  function(x,y) {(x/y)}, y=max(overallResult[overallResult$hist == name,]$values))
+ 	}
+ 	return(overallResult)
+ }
> 
> parMakeSpiderPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 		overallFileName, options, overallList, diagramTypSave="spiderplot") {
+ 
+ 	################
+ #	overallResult <- overallList$overallResult_boxSpiderDes
+ #	overallDescriptor <- overallList$boxSpiderDes
+ #	overallColor <- overallList$color_spider
+ #	overallDesName <- overallList$boxSpiderDesName
+ #	overallFileName <- overallList$imageFileNames_SpiderPlots
+ #	options <- overallList$spiderOptions
+ #	diagramTypSave <- "spiderplot"
+ #	imagesIndex <- "1"
+ 	####################	
+ 	
+ 	overallList$debug %debug% "makeSpiderPlotDiagram()"
+ 
+ 	tempOverallResult =  na.omit(overallResult)
+ 	
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, diagramTypSave)
+ 		
+ 		if (innerThreaded)
+ 			sfClusterCall(makeSpiderPlotDiagram, 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, 
+ 				overallFileName, options, overallList, diagramTypSave="spiderplot", imagesIndex, 
+ 				stopOnError=FALSE)
+ 		else
+ 			makeSpiderPlotDiagram( 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, 
+ 				overallFileName, options, overallList, diagramTypSave="spiderplot", imagesIndex)
+ 		
+ 	}	
+ }
> 
> makeSpiderPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 		overallFileName, options, overallList, diagramTypSave="spiderplot", imagesIndex) {
+ 		
+ 	createOuputOverview("spider/linerange plot", imagesIndex, length(names(overallDescriptor)), getVector(overallDesName[[imagesIndex]]))
+ 	
+ 	if (length(overallResult[, 1]) > 0) {
+ 		test <- c("side fluo intensity", "side nir intensity", "side visible hue average value", "top visible hue average value")
+ 		if (sum(!getVector(overallDesName[[imagesIndex]]) %in% test) > 1) {
+ 			doSpiderPlot <- TRUE
+ 		} else {
+ 			doSpiderPlot <- FALSE
+ 		}
+ 		PreWorkForMakeBigOverallImageSpin(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 			overallList, imagesIndex, options, diagramTypSave, doSpiderPlot)		
+ 	}
+ }	
> 
> 
> PreWorkForMakeBigOverallImageSpin <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, imagesIndex, options, diagramTypSave, doSpiderPlot) {
+ #######
+ #value <- overallList$filterSecondTreatment[1]
+ #######
+ 	
+ 	overallList$debug %debug% "PreWorkForMakeBigOverallImageSpin()"	
+ 	
+ 	overallResult$xAxisfactor = setxAxisfactor(overallList$xAxisName, overallResult$xAxis, options)
+ 	overallResult <- na.omit(overallResult)
+ 	overallResult <- normalizeEachDescriptor(overallResult)	
+ 	groupBy = groupByFunction(list(overallList$treatment, overallList$secondTreatment))
+ 	
+ 	if (length(groupBy) == 0 || length(groupBy) == 1) {
+ 		
+ 		if (doSpiderPlot) {
+ 			plotSpiderImage(overallList = overallList, overallResult = overallResult, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex= imagesIndex, overallFileName =overallFileName, diagramTypSave=diagramTypSave)	
+ 		}
+ 		plotLineRangeImage(overallList = overallList, overallResult = overallResult, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex= imagesIndex, overallFileName =overallFileName, diagramTypSave="lineRangePlot")	
+ 	} else {
+ 		for (value in overallList$filterSecondTreatment) {			
+ 			title = overallList$secondFilterTreatmentRename[[value]]
+ 			#plottedName = overallList$filterTreatment %contactAllWithAll% value
+ 			#booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = plottedName))
+ 			booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = value))
+ 			plotThisValues = overallResult[booleanVector, ]
+ #			usedOverallColor <- overallColor[[imagesIndex]][1:length(unique(plotThisValues["primaerTreatment"])[,1])]
+ #			overallColor[[imagesIndex]] <- overallColor[[imagesIndex]][(length(unique(plotThisValues["primaerTreatment"])[,1])+1):length(overallColor[[imagesIndex]])]
+ 			
+ 			if (doSpiderPlot) {
+ 				plotSpiderImage(overallList, plotThisValues, title = title, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex=imagesIndex, overallFileName=overallFileName, diagramTypSave=diagramTypSave)
+ 			}
+ 			plotLineRangeImage(overallList, plotThisValues, title = title, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex=imagesIndex, overallFileName=overallFileName, diagramTypSave="lineRangePlot")
+ 		}	 
+ 	}
+ }
> 
> 
> 
> 
> plotSpiderImage <- function(overallList, overallResult, title = "", makeOverallImage = FALSE, legende=TRUE, usedoverallColor, overallDesName, imagesIndex, overallFileName, diagramTypSave) {
+ ################
+ ##overallColor <- usedOverallColor 
+ #
+ #	makeOverallImage = TRUE
+ #	legende=TRUE
+ #	usedoverallColor = overallColor[[imagesIndex]]
+ #	overallResult <- plotThisValues
+ #	positionType <- overallList$spiderOptions$typOfGeomBar[1]
+ #################
+ 
+ #tempoverallResult <- overallResult
+ #overallResult <- tempoverallResult
+ 	overallList$debug %debug% "plotSpiderImage()"	
+ 	if (length(overallResult[, 1]) > 0) {		
+ 		for (positionType in overallList$spiderOptions$typOfGeomBar) {			
+  
+ 			if ("primaerTreatment" %in% colnames(overallResult)) {
+ 				overallResult$primaerTreatment <-  replaceTreatmentNames(overallList, overallResult$primaerTreatment, TRUE)
+ 				
+ 				plot = ggplot(data=overallResult, aes(x=hist, y=values, group=primaerTreatment)) +
+ 						geom_point(aes(color=as.character(primaerTreatment), shape=hist), size=3) +
+ 						geom_line(aes(colour=as.character(primaerTreatment))) 
+ 				
+ 			} else {
+ 				overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name, TRUE)
+ 				
+ 				plot = ggplot(data=overallResult, aes(x=hist, y=values, group=name)) +
+ 						geom_point(aes(color=as.character(name), shape=hist), size=3) +
+ 						geom_line(aes(colour=as.character(name))) 
+ 			}
+ 			plot <- plot +
+ 					#geom_point(aes(color=as.character(name), shape=hist), size=3) +
+ 					scale_shape_manual(values = c(1:length(unique(overallResult$hist))), name="Property") +
+ 					#geom_line(aes(colour=as.character(name))) +
+ 					scale_colour_manual(name="Condition", values=usedoverallColor)
+ 
+ 			if (positionType == "x") {			
+ 				#plot <- plot + coord_polar(theta="x", expand=TRUE)
+ 				plot <- plot + coord_polar(theta="x")
+ 			} else {
+ 				#plot <- plot + coord_polar(theta="y", expand=TRUE)
+ 				plot <- plot + coord_polar(theta="y")
+ 			}
+ 				
+ 				plot <- plot + 
+ 						scale_y_continuous() +
+ 						theme_bw() +
+ 						opts(#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), # Rand geht nicht in ggplot 0.9
+ 								axis.title.x = theme_blank(), 
+ 								axis.title.y = theme_blank(),
+ #								axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 								panel.grid.minor = theme_blank(), 
+ 								panel.border = theme_rect(colour="Grey", size=0.1),
+ 								axis.text.x = theme_blank()
+ 								#axis.text.y = theme_blank()
+ 						) 
+ 			if (positionType == "y") {
+ 				plot <- plot + 
+ 						opts(axis.text.y = theme_blank(),
+ 								axis.ticks	= theme_blank()	
+ 						)
+ 			}	
+ 				
+ 			if (!legende) {
+ 				plot = plot + opts(legend.position="none")
+ 			} else {
+ 				plot = plot + 
+ 					   opts(#legend.justifiownCation = 'bottom', 
+ 							   legend.direction="horizontal",
+ 							   legend.position="bottom",
+ 							   legend.box = "vertical",
+ 							   #legend.position=c(0.5,0),
+ 							  # legend.title = theme_blank(),
+ 							   legend.key = theme_blank()
+ 			   			)
+ 				#if (as.numeric(sessionInfo()[1]$R.version$minor) > 13 & as.numeric(sessionInfo()[1]$R.version$major) > 1) {
+ 				if (sessionInfo()$otherPkgs$ggplot2$Version != "0.8.9") {
+ 						
+ 					plot <-  plot + guides(colour=guide_legend(title.position= "top", 
+ 															ncol=calculateLegendRowAndColNumber(unique(overallResult$name)),
+ 															byrow=T),
+ 									 	   shape=guide_legend(title.position= "top", 
+ 															ncol=calculateLegendRowAndColNumber(unique(overallResult$hist)), 
+ 															byrow=T)
+ 										  ) 
+ 				
+ #				if (numberOfHist > 3 & numberOfHist < 10) {
+ #					plot = plot + opts(legend.text = theme_text(size=6), 
+ #							legend.key.size = unit(0.7, "lines")
+ #					)
+ #				} else if (numberOfHist >= 10) {
+ #					plot = plot + opts(legend.text = theme_text(size=5), 
+ #							legend.key.size = unit(0.3, "lines")
+ #					)
+ #				} else {
+ #					plot = plot + opts(legend.text = theme_text(size=11))
+ #				}
+ 				}
+ 			}		
+ 			
+ #			if (title != "") {
+ #				plot = plot + opts(title = title)
+ #			}
+ 			
+ 			if (makeOverallImage) {
+ 				plot = plot + facet_grid(~ xAxisfactor)
+ #				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ #					plot = plot + facet_grid(primaerTreatment ~ xAxisfactor)
+ #					
+ #				} else {
+ #					plot = plot + facet_grid(name ~ xAxisfactor)
+ #				}
+ 			}
+ 			print(plot)
+ 			
+ 			subtitle <- ""
+ 			if (positionType == overallList$spiderOptions$typOfGeomBar[1] || length(overallList$spiderOptions$typOfGeomBar) == 1) {
+ 				subtitle <- title
+ 			}
+ 
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, positionType, sep=""), paste(overallFileName[[imagesIndex]], "spiderOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, positionType, sep=""), subtitle, makeOverallImage, subsectionDepth=2)
+ 																													
+ #			saveImageFile(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, positionType, sep=""))
+ #			if (makeOverallImage) {
+ #				if (title != "") {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "spiderOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, positionType, sep=""), TRUE, title)	
+ #				} else {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "spiderOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, positionType, sep=""))
+ #				}
+ #			} else {
+ #				writeLatexFile(overallFileName[[imagesIndex]], paste(overallFileName[[imagesIndex]], diagramTypSave, positionType, title, sep=""))	
+ #			}
+ 
+ 		}
+ 	}				
+ }
> 
> calculateLegendRowAndColNumber <- function(legendText) {
+ ########	
+ #legendText <- unique(overallResult$name)
+ #legendText <- unique(overallResult$hist)	
+ #######	
+ 	lengthOfOneRow <- 90
+ 	legendText <- as.character(legendText)
+ 	
+ 	averageLengthOfSet <- round(sum(nchar(legendText),na.rm=TRUE) / length(legendText))
+ 
+ 	ncol <- floor(lengthOfOneRow / averageLengthOfSet) -1
+ 	if (ncol == 0) {
+ 		ncol <- 1
+ 	}
+ 	return(ncol)
+ } 
> 
> plotLineRangeImage <- function(overallList, overallResult, title = "", makeOverallImage = FALSE, legende=TRUE, usedoverallColor, overallDesName, imagesIndex, overallFileName, diagramTypSave) {
+ 	################
+ #	makeOverallImage = TRUE
+ #	legende=TRUE
+ #	usedoverallColor <- overallColor[[imagesIndex]]
+ #	overallResult <- plotThisValues
+ #	positionType <- overallList$spiderOptions$typOfGeomBar[1]
+ #	diagramTypSave <- "lineRangePlot"
+ 	#################
+ 	
+ 	#ownCat(overallResult[1,])
+ #tempoverallResult <- overallResult
+ #overallResult <- tempoverallResult
+ 	overallList$debug %debug% "plotLineRangeImage()"	
+ 	if (length(overallResult[, 1]) > 0) {		
+ 		if ("primaerTreatment" %in% colnames(overallResult)) {
+ 			overallResult$primaerTreatment <-  replaceTreatmentNames(overallList, overallResult$primaerTreatment, TRUE)
+ 		} else {
+ 			overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name, TRUE)
+ 		}
+ 		
+ 		
+ 		plot <- ggplot(data=overallResult, aes(x=hist, y=values)) +
+ 				geom_line()
+ 		
+ 		if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 			plot <- plot + geom_point(aes(color=as.character(primaerTreatment)), size=3)
+ 			
+ 		} else {
+ 			plot <- plot + geom_point(aes(color=as.character(name)), size=3)
+ 		}
+ 		
+ 		plot <- plot +
+ 				scale_colour_manual(values=usedoverallColor) +
+ 				scale_y_continuous() +
+ 				theme_bw() +
+ 				opts(#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), # Rand geht nicht in ggplot 0.9
+ 						axis.title.x = theme_blank(), 
+ 						axis.title.y = theme_blank(),
+ 						axis.text.x = theme_text(angle=90),
+ 						panel.grid.minor = theme_blank(), 
+ 						panel.border = theme_rect(colour="Grey", size=0.1)
+ 						#axis.text.x = theme_blank()
+ 				#axis.text.y = theme_blank()
+ 				) 
+ 		
+ 		if (!legende) {
+ 			plot = plot + opts(legend.position="none")
+ 		} else {
+ 			plot = plot + 
+ 					opts(#legend.justifiownCation = 'bottom', 
+ 							#legend.direction="horizontal",
+ 							legend.position="bottom",
+ 							#legend.position=c(0.5,0),
+ 							legend.title = theme_blank(),
+ 							legend.key = theme_blank()
+ 					)
+ 			
+ 			if (sessionInfo()$otherPkgs$ggplot2$Version != "0.8.9") {
+ 				plot <-  plot + guides(colour=guide_legend(title.position= "top", 
+ 										ncol=calculateLegendRowAndColNumber(unique(overallResult$hist)),
+ 										byrow=T)			
+ 								) 
+ 			}
+ 				
+ 			
+ #			if (length(overallColor[[imagesIndex]]) > 3 & length(overallColor[[imagesIndex]]) < 6) {
+ #				size <- 6
+ #				unit <- 0.7
+ #			} else if (length(overallColor[[imagesIndex]]) >= 6) {
+ #				size <- 5
+ #				unit <- 0.4
+ #			} else {
+ #				size <- 11
+ #				unit <- 1.0
+ #			}
+ #			
+ #			plot = plot + opts(legend.text = theme_text(size=size), 
+ #					legend.key.size = unit(unit, "lines"),
+ #					axis.text.x = theme_text(face="bold", size=size, angle=90)
+ #			)
+ 		}		
+ 		
+ 		if (title != "") {
+ 			plot = plot + opts(title = title)
+ 		}
+ 		
+ 		if (makeOverallImage) {
+ 			plot = plot + facet_grid(~ xAxisfactor)
+ #				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ #					plot = plot + facet_grid(primaerTreatment ~ xAxisfactor)
+ #					
+ #				} else {
+ #					plot = plot + facet_grid(name ~ xAxisfactor)
+ #				}
+ 		}
+ 				
+ 		writeTheData(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, sep=""), paste(overallFileName[[imagesIndex]], "lineRangeOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, sep=""), title, makeOverallImage, subsectionDepth=2)
+ 
+ #		saveImageFile(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, sep=""))
+ #		if (makeOverallImage) {
+ #			writeLatexFile(paste(overallFileName[[imagesIndex]], "lineRangeOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, sep=""))	
+ #		} else {
+ #			writeLatexFile(overallFileName[[imagesIndex]], paste(overallFileName[[imagesIndex]], diagramTypSave, title, sep="_"))	
+ #		}			
+ 		
+ 	}		
+ }
> 
> parMakeBarDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName,
+ 		 overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot") {
+ 	########
+ #overallResult <- overallList$overallResult_nBoxDes
+ #overallDescriptor <- overallList$nBoxDes
+ #overallColor <- overallList$color_nBox
+ #overallDesName <-overallList$nBoxDesName
+ #overallFileName <- overallList$imageFileNames_nBoxplots
+ #diagramTypSave="nboxplot"
+ #imagesIndex <- "1"
+ #isOnlyOneValue <- FALSE
+ 	#############	
+ 	
+ 	
+ 	overallList$debug %debug% "makeBarDiagram()"
+ 
+ 	tempOverallResult =  overallResult
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		if (!is.na(overallDescriptor[[imagesIndex]])) {	
+ 			overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "barplot")
+ 			overallResult = overallResult[!is.na(overallResult$mean), ]	#first all values where "mean" != NA are taken
+ 			overallResult[is.na(overallResult)] = 0 #second if there are values where the se are NA (because only one Value are there) -> the se are set to 0
+ 			overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name)
+ 	
+ 			if (innerThreaded)
+ 				sfClusterCall(makeBarDiagram, 
+ 					overallResult, overallDescriptor, overallColor, overallDesName,
+ 					overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot",
+ 					imagesIndex,
+ 					stopOnError=FALSE)
+ 			else
+ 				makeBarDiagram( 
+ 					overallResult, overallDescriptor, overallColor, overallDesName,
+ 					overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot",
+ 					imagesIndex)
+ 		}
+ 	}		 
+ }
> 
> makeBarDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName,
+ 		 overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot", imagesIndex) {
+ 		 
+ 	if (length(overallResult[, 1]) > 0) {
+ 		if (isOnlyOneValue) {
+ 			plot = ggplot(data=overallResult, aes(x=name, y=mean))
+ 		} else {
+ 			plot = ggplot(data=overallResult, aes(x=xAxis, y=mean))
+ 		}
+ 		
+ 		maxMean <- max(overallResult$mean)
+ 		maxSe <- max(overallResult$se)
+ 		
+ 		plot = plot + 						
+ 				geom_bar(stat="identity", aes(fill=name), colour="Grey", size=0.1) +
+ 				geom_errorbar(aes(ymax=mean+se, ymin=mean-se), width=0.2, colour="black")+
+ 				#geom_errorbar(aes(ymax=mean+se, ymin=mean-se), width=0.5, colour="Pink")+
+ 				ylab(overallDesName[[imagesIndex]]) +
+ 				coord_cartesian(ylim=c(0, maxMean + maxSe + (110*maxMean)/100)) +
+ 				xlab(overallList$xAxisName) +
+ 				scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 				theme_bw() +
+ 				opts(legend.position="none", 
+ 						#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), 
+ 						axis.title.x = theme_text(face="bold", size=11), 
+ 						axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 						axis.text.x = theme_text(angle=90),
+ 						panel.grid.minor = theme_blank(), 
+ 						panel.border = theme_rect(colour="Grey", size=0.1)
+ 				)
+ 		
+ 		writeTheData(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave, title, makeOverallImage, isAppendix=overallList$appendix)										
+ 	}
+ }
> 
> 
> reownCategorized <- function(overallResult) {
+ 	
+ #	column <- "name"
+ #	
+ #	if ("primaerTreatment" %in% colnames(overallResult)) {	
+ #		column <- "primaerTreatment"
+ #		ownList <- list(primaerTreatment = character())
+ #	} else {
+ #		ownList <- list(name = character())
+ #	}
+ 	
+ 	overallResult <- cbind(overallResult, group=rbind(-1))
+ 	overallResultTemp <- overallResult
+ 	
+ 	for(n in as.character(unique(unlist(overallResultTemp$name)))) {
+ 		
+ 	#	ownList[1] <- n
+ 		booleanVector = getBooleanVectorForFilterValues(overallResultTemp, list(name=n))
+ 		overallResult <- overallResultTemp[booleanVector,]
+ 		
+ 		lin_interp = function(x, y, length.out=length(overallResult$xAxis)) {
+ 			approx(x, y, xout=seq(min(x), max(x), length.out=length.out))$y
+ 		}
+ 		
+ 		overallResult$xAxis <- lin_interp(overallResult$xAxis, overallResult$xAxis)
+ 		overallResult$mean <- lin_interp(overallResult$xAxis, overallResult$mean)
+ 		
+ 		ownCatRle = rle(overallResult$mean < 0)
+ 		overallResult$group = rep.int(1:length(ownCatRle$lengths), times=ownCatRle$lengths)
+ 		overallResultTemp[booleanVector, ] <- overallResult
+ 	}
+ 	
+ 	overallResultTemp$group <- as.factor(overallResultTemp$group)
+ 	return(overallResultTemp)
+ 	#return(overallResult)
+ }
> 
> 
> setColorDependentOfGroup <- function(overallResult) {
+ 	
+ #	lastColorPositiv <- ifelse(overallResult$mean[1] < 0, TRUE, FALSE)
+ #	color <- vector()
+ #	for(n in 1:length(unique(overallResult$group))) {
+ #		if (lastColorPositiv) {
+ #			color <- c(color, "light gray")
+ #			lastColorPositiv <- FALSE
+ #		} else {
+ #			color <- c(color, "green")
+ #			lastColorPositiv <- TRUE
+ #		}
+ #	}
+ 	lastColorPositiv <- ifelse(overallResult$mean[1] < 0, TRUE, FALSE)
+ 	color <- vector()
+ 	if (lastColorPositiv) {
+ 		color <- c(color, "light grey")
+ 	} else {
+ 		color <- c(color, "palegreen2")
+ 	}
+ 
+ 	if(length(as.character(unique(overallResult$group))) > 1) {
+ 		if (lastColorPositiv) {
+ 			color <- c(color, "palegreen2")
+ 		} else {
+ 			color <- c(color, "light grey")
+ 		}
+ 	}
+ 
+ 	return(color)
+ }
> 
> parMakeViolinPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 		overallFileName, overallList, diagramTypSave="violinplot") {
+ 	########
+ #overallResult <- overallList$overallResult_violinBoxDes
+ #overallDescriptor <- overallList$violinBoxDes
+ #overallColor <- overallList$color_violin
+ #overallDesName <-overallList$violinBoxDesName
+ #overallFileName <- overallList$imageFileNames_violinPlots
+ #diagramTypSave="violinplot"
+ #imagesIndex <- "1"
+ #isOnlyOneValue <- FALSE
+ #stress.Start <- overallList$stress.Start
+ #stress.End <- overallList$stress.End
+ 	#############	
+ 	
+ 	overallList$debug %debug% "makeViolinPlotDiagram()"	
+ 	
+ 	if ("primaerTreatment" %in% colnames(overallResult)) {
+ 		overallResult[,4:length(colnames(overallResult))] <- 1-overallResult[,4:length(colnames(overallResult))]
+ 	} else {
+ 		overallResult[,3:length(colnames(overallResult))] <- 1-overallResult[,3:length(colnames(overallResult))]
+ 	}
+ 	
+ 	tempOverallResult =  overallResult
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		if (!is.na(overallDescriptor[[imagesIndex]])) {
+ 			createOuputOverview("violin plot", imagesIndex, length(names(overallDescriptor)),  overallDesName[[imagesIndex]])
+ 			overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, diagramTypSave)
+ 			overallResult = overallResult[!is.na(overallResult$mean), ]	#first all values where "mean" != NA are taken
+ 			
+ 			if (innerThreaded)
+ 				sfClusterCall(makeViolinPlotDiagram, 
+ 					overallResult, overallDescriptor, overallColor, overallDesName, 
+ 					overallFileName, overallList, diagramTypSave="violinplot", imagesIndex,
+ 					stopOnError=FALSE)
+ 			else
+ 				makeViolinPlotDiagram( 
+ 					overallResult, overallDescriptor, overallColor, overallDesName, 
+ 					overallFileName, overallList, diagramTypSave="violinplot", imagesIndex)
+ 		}
+ 	}		
+ }
> 
> makeViolinPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 	overallFileName, overallList, diagramTypSave="violinplot", imagesIndex) {
+ 	
+ 	if ("primaerTreatment" %in% colnames(overallResult)) {
+ 		for (value in unique(as.character(overallResult$primaerTreatment))) { 
+ 			title = overallList$filterTreatmentRename[[value]]			
+ 			booleanVector = getBooleanVectorForFilterValues(overallResult, list(primaerTreatment = value))
+ 			plotThisValues = overallResult[booleanVector, ]
+ 			#plotThisValues$name <- factor(substr(plotThisValues$name,nchar(value)+2, nchar(as.character(plotThisValues$name))))
+ 			plotViolinPlotDiagram(plotThisValues, overallDesName, overallFileName, overallList, imagesIndex, title)
+ 		}	 
+ 	} else {
+ 		plotViolinPlotDiagram(overallResult, overallDesName, overallFileName, overallList, imagesIndex)
+ 	}
+ 	
+ }
> 
> reorderThePlotOrder <- function(overallResult) {
+ 	groupedOverallResult <- data.table(overallResult)
+ 	sumVector <- as.data.frame(groupedOverallResult[, lapply(list(mean), mean, na.rm=TRUE), by=c(name)])
+ 	sumVector$c <- levels(overallResult$name)
+ 	
+ 	for(n in levels(overallResult$name)) {
+ 		overallResult$name <- replace(as.character(overallResult$name), overallResult$name==n, paste(sumVector[sumVector$c==n,]$c, " (", round(sumVector[sumVector$c==n,]$V1, digits=1), ")", sep=""))
+ 		sumVector[sumVector$c==n,]$c <- paste(sumVector[sumVector$c==n,]$c, " (", round(sumVector[sumVector$c==n,]$V1, digits=1), ")", sep="")
+ 	}
+ 	
+ 	return(factor(overallResult$name, levels = sumVector[order(sumVector$V1),]$c))
+ }
> 
> buildStressArea <- function(stress.Start, stress.End, stress.Typ, stress.Label, yValues, diagramTypSave, additionalValues = "none", additionalDataFrameValues = "none") {
+ #############
+ #stress.Start <- overallList$stress.Start
+ #stress.End <- overallList$stress.End
+ #yValues <- overallResult$mean
+ #diagramTypSave <- diagramTypSave
+ #############
+ #yValues <- overallResult$values
+ #additionalValues <-  "stack"
+ #additionalDataFrameValues <- overallResult[, c("xAxis", "plot")]
+ #additionalDataFrameValues <- overallResult[, c("xAxis", "primaerTreatment")]
+ ############
+ 
+ 
+ 	stress.Area <- data.frame()
+ 	#possible.Stress.Values <- c("0", "1", "2", "3", "4") # c("n", "d", "w", "c", "s")
+ 	standard.Stress.Labels <- list("000" = "normal", "001" = "drought stress", "002" = "moisture stress", "003" = "chemical stress", "004" = "salt stress")
+ 	
+ 	ymin <- min(yValues,na.rm = TRUE)
+ 	ymax <- max(yValues, na.rm = TRUE)
+ 	
+ 	if (diagramTypSave == "violinplot")  {
+ 		if (abs(ymin) >= abs(ymax)) {
+ 			ymax <- abs(ymin)
+ 		} else {
+ 			ymin <- (-1*ymax)
+ 		}
+ 	} else if (diagramTypSave == "boxplotstacked") {
+ 		if (additionalValues != "none") {
+ 			if (additionalValues == "fill") {
+ 				ymin <- 0
+ 				ymax <- 1.00
+ 			} else if (additionalValues == "stack") {
+ 				if(additionalDataFrameValues != "none") {
+ 					newDataFrame <- data.table(yValues, additionalDataFrameValues)
+ 					newDataFrame <- as.data.frame(newDataFrame[, lapply(.SD, sum, na.rm=TRUE), by=colnames(additionalDataFrameValues)])
+ 					ymin <- 0
+ 					ymax <- max(newDataFrame$yValues, na.rm = TRUE)
+ 				}
+ 			} 			
+ 		}
+ 	} else if (diagramTypSave == "nboxplot") {
+ 		if (additionalValues != "none") {
+ 			
+ 			ymin <- ymin - max(additionalValues,na.rm = TRUE)
+ 			ymax <- ymax + max(additionalValues, na.rm = TRUE)	
+ 		}
+ 	}
+ 
+ #	ymin <- (ymin - ymin * 0.01)
+ #	ymax <- (ymax + ymax * 0.01)
+ #	print(stress.Start)
+ #	print(stress.End)
+ #	print(stress.Typ)
+ #	print(stress.Label)
+ 	
+ 	for (kk in seq(along=stress.Start)) {
+ 		if (stress.Start[kk] != -1 && stress.End[kk] != -1) {
+ 			stress.Start <- as.numeric(stress.Start)
+ 			stress.End <- as.numeric(stress.End)
+ 			if (stress.Start[kk] >= stress.End[kk]) {
+ 				xmin <- stress.End[kk]
+ 				xmax <- stress.Start[kk]
+ 			} else {
+ 				xmin <- stress.Start[kk]
+ 				xmax <- stress.End[kk]
+ 			}
+ 			
+ 			if(!(stress.Typ[kk] %in% names(standard.Stress.Labels))) {
+ 				ownCat("... unknown stresstyp, change to \"normal\" -> (0)")
+ 				stress.Typ[kk] <- names(standard.Stress.Labels)[1]
+ 			}
+ 			
+ 			if(stress.Label[kk] == -1) {
+ 				ownCat("... no stresslabel are set, change to standard label for the stresstyp")
+ 				stress.Label[kk] <- standard.Stress.Labels[[stress.Typ[kk]]]
+ 			}
+ 			
+ 			stress.Area <- rbind(stress.Area, data.frame(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, typ=stress.Typ[kk], label=stress.Label[kk]))
+ 		}
+ 	}
+ 	#dCNV_Biom[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio, "Labels"))]
+ #	stress.Area <- sort(stress.Area)
+ 	#print(stress.Area)
+ 	return(stress.Area)
+ }
> 
> addColorForStressPhaseAndOther <- function(stressArea, color, diagramTypSave = "none") {
+ 	# c("000", "001", "002", "003", "004") entspricht c("n", "d", "w", "c", "s")
+ 	
+ 	if(diagramTypSave == "nboxplot" || diagramTypSave == "dodge") { # || diagramTypSave == "stack") {
+ 		stressAreaTyp <- rev(sort(as.character(unique(stressArea$typ))))
+ 	} else {
+ 		stressAreaTyp <- sort(as.character(unique(stressArea$typ)))
+ 	}
+ 	
+ 	for (kk in stressAreaTyp) {
+ 		if (kk == "000")
+ 			color <- c("darkolivegreen1", color)
+ 		else if (kk == "001")
+ 			color <- c("cornsilk1", color)
+ 		else if (kk == "002")
+ 			color <- c("lightskyblue1", color)
+ 		else if (kk == "003")
+ 			color <- c("papayawhip", color)
+ 		else if (kk == "004")
+ 			color <- c("seashell1", color)
+ 	}	
+ 	return(color)
+ }
> 
> plotViolinPlotDiagram <- function(overallResult, overallDesName, overallFileName, overallList, imagesIndex, title="") {
+ ########
+ #overallResult <- plotThisValues
+ #title <- ""
+ ########
+ 	diagramTypSave<-"violinplot"
+ 
+ 	overallResult <- reownCategorized(overallResult)
+ 	color <- setColorDependentOfGroup(overallResult)
+ 	overallResult$name <- replaceTreatmentNames(overallList, overallResult$name, onlySecondTreatment = TRUE)
+ 	overallResult$name <- reorderThePlotOrder(overallResult)
+ 	stressArea <- data.frame()
+ 
+ #  c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")	
+ #	overallList$stress.Start <- c(10,20,30,37)
+ #	overallList$stress.End <- c(13, 23, 33, 40)
+ #	overallList$stress.Typ <- c("d","d","s", "c")
+ #	overallList$stress.Label <- c(-1, -1, -1, -1)
+ #	
+ #	overallList$stress.Start <- c(10,20,30)
+ #	overallList$stress.End <- c(13, 23,33)
+ #	overallList$stress.Typ <- c("2","1","2")
+ #	overallList$stress.Label <- c(-1, -1,-1)
+ 	
+ 	if(overallList$stress.Start[1] != -1) {
+ 		stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$mean, diagramTypSave)
+ 		color <- addColorForStressPhaseAndOther(stressArea, color)
+ 	}
+ 	
+ #	print(color)
+ #	print(stressArea)
+ 	if (length(overallResult[, 1]) > 0) {
+ 						
+ 		plot <-	ggplot()				
+ 				
+ 		if(length(stressArea) >0) {
+ 			plot <- plot + 
+ 				geom_rect(data=stressArea, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=typ)) +
+ 				geom_text(data=stressArea, aes(x=xmin, y=ymin, label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 			
+ 		}	
+ 			plot <- plot +
+ 				geom_ribbon(data=overallResult, aes(x=xAxis, fill=mean>=0, group=group, ymin=-mean, ymax=mean)) +						
+ 				scale_fill_manual(values = color) +
+ 				scale_x_continuous(name=overallList$xAxisName, minor_breaks = min(as.numeric(as.character(overallResult$xAxis))):max(as.numeric(as.character(overallResult$xAxis)))) + 
+ 				scale_y_continuous(name=overallDesName[[imagesIndex]],  minor_breaks = min(as.numeric(as.character(overallResult$mean))):max(as.numeric(as.character(overallResult$mean)))) +
+ 				#ylab(overallDesName[[imagesIndex]]) +
+ 				#label=c("0.4", "0.2", "0.0", "0.2", "0.4")
+ 				#scale_y_discrete(aes(factor(c(0.4, 0.2, 0.0, 0.2, 0.4))), name=overallDesName[[imagesIndex]],limits=c(-10,1)) +
+ 				#scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 				#scale_colour_manual(values= overallColor[[imagesIndex]]) +
+ 				coord_flip()+
+ 				theme_bw() +
+ 				opts(axis.title.x = theme_text(face="bold", size=11), 
+ 						axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 						#panel.grid.major = theme_blank(), # switch off major gridlines
+ 						#panel.grid.minor = theme_blank(), # switch off minor gridlines
+ 						legend.position = "none", # manually position the legend (numbers being from 0, 0 at bottom left of whole plot to 1, 1 at top right)
+ 						#legend.title = theme_blank(), # switch off the legend title						
+ 						#legend.key.size = unit(1.5, "lines"), 
+ 						#legend. key = theme_blank(), # switch off the rectangle around symbols in the legend
+ 						panel.border = theme_rect(colour="Grey", size=0.1)
+ 				)
+ 		if (title != "") {
+ 			plot <- plot + opts(title = title)
+ 		}
+ 		
+ 		if (length(unique(overallResult$name)) > 4) {
+ 			plot = plot + opts(
+ 					axis.text.x = theme_text(size = 8),
+ 					strip.text.x = theme_text(size = 7)
+ 			)
+ 		} else {
+ 			plot = plot + opts(
+ 					axis.text.x = theme_text(size = 9),
+ 					strip.text.x = theme_text(size = 10)
+ 			)
+ 		}
+ 		
+ 		plot <- plot + facet_wrap(~ name, ncol=5) 
+ 	
+ 		#print(plot)
+ 		
+ 		writeTheData(overallList, plot, overallFileName[imagesIndex], diagramTypSave, writeLatexFileFirstValue= paste(overallFileName[imagesIndex], "violinOverallImage", sep=""), writeLatexFileSecondValue= paste(overallFileName[imagesIndex],diagramTypSave,sep=""), makeOverallImage=TRUE, subSectionTitel = overallDesName[[imagesIndex]], subsectionDepth=2)
+ 	}
+ }
> 
> parMakeBoxplotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 	options, overallList, diagramTypSave="boxplot") {
+ ################
+ #	overallResult <- overallList$overallResult_boxDes
+ #	overallDescriptor <- overallList$boxDes
+ #	overallColor <- overallList$color_box
+ #	overallDesName <- overallList$boxDesName
+ #	overallFileName <- overallList$imageFileNames_Boxplots
+ #	options <- overallList$boxOptions
+ #	diagramTypSave <- "boxplot"
+ #	imagesIndex <- "1"
+ ####################
+ 
+ 
+ 	overallList$debug %debug% "parMakeBoxplotDiagram()"
+ 	tempOverallResult <-  na.omit(overallResult)
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		
+ 		if (innerThreaded)
+ 			sfClusterCall(makeBoxplotDiagram, 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 				options, overallList, diagramTypSave, imagesIndex, tempOverallResult,
+ 				stopOnError=FALSE)
+ 		else
+ 			makeBoxplotDiagram( 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 				options, overallList, diagramTypSave, imagesIndex, tempOverallResult)
+ 	}
+ }
> 
> makeBoxplotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName,
+ 	 options, overallList, diagramTypSave="boxplot", imagesIndex, tempOverallResult) {
+ 	overallList$debug %debug% "makeBoxplotDiagram()"
+  
+ 	if (!is.na(overallDescriptor[[imagesIndex]])) {
+ 		#ownCat(paste("Process ", overallDesName[[imagesIndex]]))
+ 		createOuputOverview("boxplot", imagesIndex, length(names(overallDescriptor)), overallDesName[[imagesIndex]])
+ 		
+ 		overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "boxplot")
+ 		if (length(overallResult[, 1]) > 0) {
+ 			overallResult$xAxisfactor <- setxAxisfactor(overallList$xAxisName, overallResult$xAxis, options)	
+ 			overallResult$name <- replaceTreatmentNames(overallList, overallResult$name)
+ 			overallResult <- na.omit(overallResult)
+ 			#myPlot = ggplot(overallList$overallResult, aes(factor(name), value, fill=name, colour=name)) + 
+ 			#myPlot = ggplot(overallResult, aes(factor(name), value, fill=name)) +
+ 		
+ 			plot = ggplot(overallResult, aes(factor(name), value, fill=name)) +
+ 					geom_boxplot() +
+ 					ylab(overallDesName[[imagesIndex]]) +
+ 					#coord_cartesian(ylim=c(0, max(overallList$overallResult$mean + overallList$overallResult$se + 10, na.rm=TRUE))) +
+ 					#xlab(paste(min(overallResult$xAxis), overallList$xAxisName, "..", max(overallResult$xAxis), overallList$xAxisName)) +
+ 					scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 					#stat_summary(fun.data = f, geom = "crossbar", height = 0.1, 	colour = NA, fill = "skyblue", width = 0.8, alpha = 0.5) +
+ 					theme_bw() +
+ 					opts(legend.position="none", 
+ 							#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), 
+ 							axis.title.x = theme_blank(), 
+ 							axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 							panel.grid.minor = theme_blank(), 
+ 							panel.border = theme_rect(colour="Grey", size=0.1)
+ 							
+ 					) +
+ 					opts(axis.text.x = theme_text(size=6, angle=90)) +
+ 					facet_wrap(~ xAxisfactor, drop=FALSE)
+ 					
+ 			#print(plot)
+ 			
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave, isAppendix=overallList$appendix)
+ 				
+ #				saveImageFile(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave)
+ #
+ #				if (overallList$appendix) {
+ #					writeLatexFile("appendixImage", overallFileName[[imagesIndex]], diagramTypSave)
+ #				}	
+ 		}
+ 	}
+ }
> 
> makeDiagrams <- function(overallList) {
+ 	overallList$debug %debug% "makeDiagrams()"
+ 	if (threaded)
+ 		sfExport("overallList")
+ 	if (!calculateNothing) {			
+ if(!calculateOnlyViolin) {		
+ if(!calculateOnlyStacked) {
+ 		if (sum(!is.na(overallList$nBoxDes)) > 0) {
+ 			if (overallList$debug) {ownCat("nBoxplot...")}
+ 				sfClusterEval(
+ 					parMakeLinearDiagram(overallList$overallResult_nBoxDes, overallList$nBoxDes, 
+ 						overallList$color_nBox, overallDesName=overallList$nBoxDesName, overallList$imageFileNames_nBoxplots , overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for nBoxplot are 'NA'")
+ 		}
+ 		
+ 		if (sum(!is.na(overallList$boxDes)) > 0) {
+ 			if (overallList$debug) {ownCat("Boxplot...")}
+ 				sfClusterEval(
+ 					parMakeBoxplotDiagram(overallList$overallResult_boxDes, overallList$boxDes, overallList$color_box, overallDesName=overallList$boxDesName, overallList$imageFileNames_Boxplots, overallList$boxOptions, overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for Boxplot are 'NA'...")
+ 		}
+ }
+ 		if (sum(!is.na(overallList$boxStackDes)) > 0) {
+ 			if (overallList$debug) {ownCat("Stacked Boxplot...")}
+ 				sfClusterEval(
+ 					parMakeBoxplotStackedDiagram(overallList$overallResult_boxStackDes, overallList$boxStackDes, overallList$color_boxStack, overallDesName=overallList$boxStackDesName, overallList$imageFileNames_StackedPlots, overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for stacked Boxplot are 'NA'...")
+ 			}
+ if(!calculateOnlyStacked) {
+ 		if (sum(!is.na(overallList$boxSpiderDes)) > 0) {
+ 			if (overallList$debug) {ownCat("Spider plot...")}
+ 				sfClusterEval(
+ 					parMakeSpiderPlotDiagram(overallList$overallResult_boxSpiderDes, overallList$boxSpiderDes, overallList$color_spider, overallDesName=overallList$boxSpiderDesName, overallList$imageFileNames_SpiderPlots, overallList$spiderOptions, overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for stacked Boxplot are 'NA'...")
+ 		}
+ }
+ }
+ if(!calculateOnlyStacked) {
+ 		if (sum(!is.na(overallList$violinBoxDes)) > 0 & overallList$isRatio) {
+ 			if (overallList$debug) {ownCat("Violin plot...")}
+ 				sfClusterEval(
+ 					parMakeViolinPlotDiagram(overallList$overallResult_violinBoxDes, overallList$violinBoxDes, overallList$color_violin, overallDesName=overallList$violinBoxDesName, overallList$imageFileNames_violinPlots , overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for violin Boxplot are 'NA'...")
+ 		}
+ }
+ 		if (FALSE) {	# falls auch mal barplots erstellt werden sollen (ausser wenn nur ein Tag vorhanden ist!)
+ 			if (overallList$debug) {ownCat("Barplot...")}
+ 				sfClusterEval(
+ 					parMakeBarDiagram(overallList$overallResult_nBoxDes, overallList$nBoxDes, overallList$color_nBox, overallDesName=overallList$nBoxDesName, overallList$imageFileNames_nBoxplots, overallList)
+ 				, stopOnError=FALSE)
+ 		}
+ 	}
+ }
> 
> addDesSet <- function(descriptorSet_boxplotStacked, descriptorSetName_boxplotStacked, workingDataSet) {
+ 	addDescSet = character()
+ 	addDescSetNames = character()
+ 	i = 0
+ 	for (ds in descriptorSet_boxplotStacked) {
+ 		addCol = ""
+ 		#addColDesc = ""
+ 		for (col in colnames(workingDataSet)) {	
+ 			if (nchar(ds)>5) {
+ 				last4chars = substr(col, nchar(ds)-4, nchar(ds))
+ 				if (last4chars == ".bin.") {
+ 					col_substring = substr(col, 1, nchar(ds))
+ 					if (col_substring == ds) {
+ 						if (nchar(addCol)>0) {
+ 							addCol = paste(addCol, "$", sep="")
+ 						}
+ 						addCol= paste(addCol, col, sep="")
+ 					} 
+ 				}
+ 			}
+ 		}
+ 		i=i+1
+ 		addColDesc = descriptorSetName_boxplotStacked[i]
+ 		if (nchar(addCol)>0) {
+ 			#ownCat(paste("Adding ", addCol, "with description", addColDesc))
+ 			addDescSet = c(addDescSet, addCol)
+ 			addDescSetNames = c(addDescSetNames, addColDesc)
+ 		}
+ 	}
+ 	
+ 	if (length(addDescSet) > 0) {
+ 		return(list(desSet=addDescSet, desName = addDescSetNames))
+ 	} else {
+ 		return(list(desSet=descriptorSet_boxplotStacked, desName = descriptorSetName_boxplotStacked))
+ 	}
+ 	#descriptorSet_boxplotStacked = c(descriptorSet_boxplotStacked, addDescSetNames) 	
+ 	#return(descriptorSet_boxplotStacked)
+ }
> 
> changeXAxisName <- function(overallList) {
+ 	if (length(overallList$iniDataSet$Day..Int.) > 1 ){
+ 		day_int <- as.character(overallList$iniDataSet$Day..Int.[1])
+ 		day <- as.character(overallList$iniDataSet$Day[1])
+ 		overallList$xAxisName <- substr(day, 1, nchar(day)-(nchar(day_int)+1))
+ 	}
+ 	return(overallList)
+ }
> 
> 
> checkIfAllNecessaryFilesAreThere <- function() {
+ 		ownCat("Check if the noValues-Image is there")
+ 		file = "noValues.pdf"
+ 		if (!file.exists(file)) {
+ 			library("Cairo")
+ 			ownCat(paste("Create defaultImage '", file, "'", sep=""))
+ 			Cairo(width=900, height=70, file=file, type="pdf", bg="transparent", units="px", dpi=90)
+ 			par(mar = c(0, 0, 0, 0))
+ 			plot.new()
+ 			legend("left", "no values", col= c("black"), pch=1, bty="n")
+ 			dev.off()
+ 		}	
+ }
> 
> buildBlacklist <- function(workingDataSet, descriptorSet) {
+ 	
+ 	searchString = ".histogram."
+ #	searchString = paste(searchString, "mark", sep = "|")	
+ 	additionalDescriptors = c(descriptorSet, "Day (Int)", "Day", "Time", "Plant ID", "vis.side", "fluo.side", "nir.side", "vis.top", "fluo.top", "nir.top")
+ 	
+ 	return(c(colnames(workingDataSet)[grep(searchString, colnames(workingDataSet), ignore.case = TRUE)], preprocessingOfValues(additionalDescriptors, TRUE)))
+ }
> 
> 
> loadStressPeriod <- function(stress.Value, arg) {
+ 	stress.Value <- stress.Value %exists% arg
+ 	stress.Value <- unlist(preprocessingOfValues(stress.Value, isColName = TRUE))
+ 
+ 	return(stress.Value)
+ }
> 
> checkStressTypValues <- function(stress.Typ) {
+ 	
+ 	new.Values <- list("n" = "000", "d" = "001", "w" = "002", "c" = "003", "s" = "004",
+ 					   "0" = "000", "1" = "001", "2" = "002", "3" = "003", "4" = "004")
+ 	
+ 	for (kk in seq(along=stress.Typ)) {
+ 		if (stress.Typ[kk] %in% names(new.Values)) {
+ 			stress.Typ[kk] <- new.Values[[stress.Typ[kk]]]
+ 			ownCat("... change old stresstyp value to new!")
+ 		}
+ 	}
+ 	return(stress.Typ)
+ }
> 
> initRfunction <- function(DEBUG = FALSE) {
+ 	#"LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"
+ 	#Sys.setlocale(locale="de_DE.ISO8859-15")
+ 	#Sys.setlocale("LC_ALL", "en_US.UTF-8")
+ 	
+ 	if (DEBUG) {
+ 		options(error = quote({
+ 			#sink(file="error.txt", split = TRUE);
+ 			dump.frames();
+ 			ownCat(attr(last.dump, "error.message"));
+ 			#x = attr(last.dump, "error.message")
+ 			traceback();
+ 			#sink(file=NULL);		
+ 			#q()
+ 		}))
+ 		options(show.error.messages = TRUE)
+ 		#options(showWarnCalls = TRUE)
+ 		#options(showErrorCalls = TRUE)
+ 		options(warn = 0)
+ 		#options(warn = 2)
+ 	} else {	
+ 		options(error = NULL)
+ 		#options(showWarnCalls = FALSE)
+ 		#options(showErrorCalls = FALSE)
+ 		options(warn = -1)
+ 		options(show.error.messages = FALSE)
+ 	}
+ 	if (memory.limit() < 3500) {
+ 		memory.limit(size=10000)
+ 	}
+ 	
+ 	while(!is.null(dev.list())) {
+ 		dev.off()
+ 	}
+ 	
+ 	loadLibs(debug)
+ }
> typOfStartOptions = "test"
> 	typOfStartOptions = tolower(typOfStartOptions)
> 		
> 	args = commandArgs(TRUE)
> #	for(nn in seq(along=args)) {
> #		ownCat(paste(nn, ".: ", args[nn], sep=""))
> #	}
> 	
> 	saveFormat = "pdf"
> 	dpi = "90" ##90 ## CK: seems to change nothing for ggplot2 instead the output size should be modified, if needed // 17.2.2012	
> 	
> 	isGray = FALSE
> 	#showResultInR = FALSE
> 	
> 	# c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")
> 	stress.Start <- -1 #"10" # -1
> 	stress.End <- -1 #"15" # -1
> 	stress.Typ <- -1 #"1" # -1 ## 1 -> dry; 2 -> wet; 0 -> normal; 4 -> salt; 3 -> chemical
> 	stress.Label <- -1 #"drought stress" # -1
> 	
> 	treatment = "Treatment"
> 	filterTreatment = "none"
> 	
> 	secondTreatment = "none"
> 	filterSecondTreatment = "none"
> 	
> 	xAxis = "Day (Int)" 
> 	xAxisName = "DAS"
> 	filterXaxis = "none"
> 	
> 	should.Clustered <- FALSE
> 	bootstrap.N <- -1
> 	
> #	diagramTypVector = vector()
> 	descriptorSet = vector()
> 	descriptorSetName = vector()
> 	
> 	fileName = "error"
> 
> 	appendix = FALSE
> 	#appendix = TRUE
> 	
> 	separation = ";"
> 
> 	if (typOfStartOptions == "all" | typOfStartOptions == "report" | typOfStartOptions == "allmanual") {
+ 		fileName <- fileName %exists% args[1]
+ 		
+ 		should.Clustered <- should.Clustered %exists% args[7]
+ 		bootstrap.N <- bootstrap.N %exists% args[8] 
+ 		stress.Start <- loadStressPeriod(stress.Start, args[9])
+ 		stress.End <- loadStressPeriod(stress.End, args[10])
+ 		stress.Typ <- loadStressPeriod(stress.Typ, args[11])
+ 		stress.Typ <- checkStressTypValues(stress.Typ)
+ 		
+ 		stress.Label <- loadStressPeriod(stress.Label, args[12])
+ 		
+ 		if (fileName != "error") {
+ 			workingDataSet <- separation %readInputDataFile% fileName
+ 			descriptorSet_nBoxplot <- vector()
+ 			descriptorSet_boxplot <- vector()
+ 			descriptorSet_boxplotStacked <- vector()
+ 			
+ 			if (length(workingDataSet[,1]) > 0) {
+ 				#nboxplot
+ 
+ 				if (typOfStartOptions == "all") {
+ 					descriptorSet_nBoxplot = colnames(workingDataSet)
+ 					descriptorSetName_nBoxplot = descriptorSet
+ 					
+ 				} else { #Report	
+ 					descriptorSet_nBoxplot = c(#"volume.my", "volume.fluo.plant_weight.iap"
+ 							 					"Weight A (g)", 
+ 												"Weight B (g)", 
+ 												"Water (weight-diff)", 
+ 												"side.height.norm (mm)", 
+ 												"side.width.norm (mm)", 
+ 												"side.area.norm (mm^2)", 
+ 												"top.area.norm (mm^2)", 											
+ 												"side.fluo.intensity.chlorophyl.average (relative)", 
+ 												"side.fluo.intensity.phenol.average (relative)", 
+ 												"side.nir.intensity.average (relative)",
+ 												"top.nir.intensity.average (relative / pix)",
+ 												
+ 												"side.leaf.count.median (leafs)", 
+ 												"side.bloom.count (tassel)", 
+ 												"side.leaf.length.sum.norm.max (mm)", 
+ 												"volume.iap (px^3)", 
+ 												"volume.lt (px^3)", 
+ 												"volume.iap.wue", 
+ 												"side.nir.wetness.plant_weight_drought_loss", 
+ 												"top.nir.wetness.plant_weight_drought_loss", 
+ 												"side.nir.wetness.average (percent)", 
+ 												"top.nir.wetness.average (percent)", 
+ 												"side.area.relative", 
+ 												"side.height.norm.relative", 
+ 												"side.width.norm.relative", 
+ 												"top.area.relative", 
+ 												"side.area.relative", 
+ 												"volume.iap.relative", 
+ 												"side.height (px)", 
+ 												"side.width (px)", 
+ 												"side.area (px)", 
+ 												"top.area (px)",
+ 												############ new #######
+ 												"side.hull.area (px)",
+ 												"side.hull.area.norm (mm^2)",
+ 												"side.hull.pc1 (px)",
+ 												"side.hull.pc1.norm",
+ 												"side.hull.pc2",
+ 												"side.hull.pc2.norm",
+ 												"side.hull.fillgrade (percent)",		
+ 												"top.hull.area (px)",
+ 												"top.hull.area.norm (mm^2)",
+ 												"top.hull.pc1",
+ 												"top.hull.pc1.norm",
+ 												"top.hull.pc2",
+ 												"top.hull.pc2.norm",
+ 												"top.hull.fillgrade (percent)",
+ 												"side.vis.hue.average",
+ 												"top.vis.hue.average",
+ 												"mark1.y (percent)",
+ 												"mark2.y (percent)",
+ 												"mark3.y (percent)",
+ 												"top.ir.intensity.average",
+ 												"side.ir.intensity.average"
+ 												)
+ 				
+ 					descriptorSetName_nBoxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)", "yellow spectra normed to the realtionship between dry and normal"
+ 													"weight before watering (g)", 
+ 													"weight after watering (g)", 
+ 													"water weight (g)", 
+ 													"height (zoom corrected) (mm)", 
+ 													"width (zoom corrected) (mm)", 
+ 													"side area (zoom corrected) (mm^2)", 
+ 													"top area (zoom corrected) (mm^2)", 
+ 													"chlorophyll intensity (relative intensity/pixel)", 
+ 													"fluorescence intensity (relative intensity/pixel)", 
+ 													"side nir intensity (relative intensity/pixel)",
+ 													"top nir intensity (relative intensity/pixel)",
+ 													"number of leafs", 
+ 													"number of tassel florets", 
+ 													"length of leafs plus stem (mm)", 			 
+ 													"digital biomass (visible light images, IAP formula) (px^3)", 
+ 													"digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 													"volume based water use efficiency", 
+ 													"weighted loss through drought stress (side)", 
+ 													"weighted loss through drought stress (top)", 
+ 													"Average wetness of side image", 
+ 													"Average wetness of top image", 
+ 													"growth in %/day", 
+ 													"plant height growth rate (%/day)", 
+ 													"plant width growth rate (%/day)", 
+ 													"top area growth rate (%/day)", 
+ 													"side area growth rate (%/day)", 
+ 													"volume growth (visible light images, IAP based formula) (%/day)", 
+ 													"height (px)", 
+ 													"width (px)", 
+ 													"side area (px)", 
+ 													"top area (px)",
+ 													####### new #######
+ 													"side area of convex hull (px)",
+ 													"side area of convex hull (zoom corrected) (mm^2)",
+ 													"side maximum extension (px)",
+ 													"side maximum extension (zoom corrected) (mm)",
+ 													"opposite direction of the side maximum extension (px)",
+ 													"opposite direction of the side maximum extension (zoom corrected) (mm)",
+ 													"fillgrade of side convex hull (%)",
+ 													"top area of convex hull (px)",
+ 													"top area of convex hull (zoom corrected) (mm^2)",
+ 													"top maximum extension (px)",
+ 													"top maximum extension (zoom corrected) (mm)",
+ 													"opposite direction of the top maximum extension (px)",
+ 													"opposite direction of the top maximum extension (zoom corrected) (mm)",
+ 													"fillgrade of top convex hull (%)",
+ 													"side visible hue average value",
+ 													"top visible hue average value",
+ 													"blue marker position from top (%)",
+ 													"blue marker position from middle (%)",
+ 													"blue marker position from bottom  (%)",
+ 													"top ir intensity",
+ 													"side ir intensity"
+ 													)		
+ 				}
+ 	
+ 				nBoxOptions= NULL
+ 				#diagramTypVector = rep.int("nboxplot", times=length(descriptorSetName))
+ 		
+ 				#boxplot
+ 				descriptorSet_boxplot = c(#"volume.my"
+ 										   "side.height.norm (mm)", 
+ 										   "side.width.norm (mm)", 
+ 										   "side.area.norm (mm^2)", 
+ 										   "top.area.norm (mm^2)", 
+ 										   "volume.fluo.iap", 
+ 										   "volume.iap (px^3)", 
+ 										   "volume.lt (px^3)", 
+ 										   "side.height (px)", 
+ 										   "side.width (px)", 
+ 										   "side.area (px)", 
+ 										   "top.area (px)"
+ 											)
+ 				
+ 				descriptorSetName_boxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 											   "height (zoom corrected) (mm)", 
+ 										  	   "width (zoom corrected) (mm)", 
+ 											   "side area (zoom corrected) (mm^2)", 
+ 											   "top area (zoom corrected) (mm^2)", 
+ 											   "digital biomass (fluorescence images, IAP formula) (px^3)", 
+ 											   "digital biomass (visible light images, IAP formula) (px^3)", 
+ 											   "digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 											   "height (px)", 
+ 											   "width (px)", 
+ 											   "side area (px)", 
+ 											   "top area (px)"
+ 												)	
+ 				#boxOptions= list(daysOfBoxplotNeeds=c("phase4"))
+ 				boxOptions= NULL
+ 				
+ 				#spiderplot
+ 				descriptorSet_spiderplot = c(#"volume.my"
+ 						"side.height.norm (mm)$side.width.norm (mm)$side.area.norm (mm^2)$top.area.norm (mm^2)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average",
+ 						"side.height (px)$side.width (px)$side.area (px)$top.area (px)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average"
+ 
+ 				)
+ 				
+ 				descriptorSetName_spiderplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 						"height (zoom corrected) (mm)$width (zoom corrected) (mm)$side area (zoom corrected) (mm^2)$top area (zoom corrected) (mm^2)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value",
+ 						"height (px)$width (px)$side area (px)$top area (px)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value"
+ #						"Zoom corrected Spiderchart", 
+ #						"Spiderchart"
+ 				)	
+ 
+ 				#spiderOptions= list(typOfGeomBar=c("x", "y"))
+ 				spiderOptions= list(typOfGeomBar=c("x"))
+ 				
+ 				
+ 				descriptorSet_violinBox = c(
+ 						"side.height.norm (mm)",
+ 						"side.width.norm (mm)",
+ 						"side.area.norm (mm^2)",
+ 						"top.area.norm (mm^2)",
+ 						"side.fluo.intensity.average (relative)",
+ 						"side.nir.intensity.average (relative)",
+ 						"side.vis.hue.average",
+ 						"top.vis.hue.average",
+ 						"top.ir.intensity.average",
+ 						"side.ir.intensity.average"
+ 				)	
+ 				
+ 				descriptorSetName_violinBox = c(
+ 						"height (zoom corrected) (mm)",
+ 						"width (zoom corrected) (mm)",
+ 						"side area (zoom corrected) (mm^2)",
+ 						"top area (zoom corrected) (mm^2)",
+ 						"side fluo intensity",
+ 						"side nir intensity",
+ 						"side visible hue average value",
+ 						"top visible hue average value",
+ 						"top ir intensity",
+ 						"side ir intensity"
+ 				)	
+ 				
+ 				violinOptions= NULL
+ 				
+ 				
+ 				#boxplotStacked
+ 				descriptorSet_boxplotStacked = c("side.nir.normalized.histogram.bin.", 
+ 								   				  "side.fluo.histogram.bin.", 
+ 										  		  "top.nir.histogram.bin.", 
+ 												  "side.fluo.histogram.ratio.bin.", 
+ 												  "side.nir.normalized.histogram.bin.", 
+ 												  "side.fluo.normalized.histogram.bin.", 
+ 												  "side.fluo.normalized.histogram.ratio.bin.", 
+ 												  "side.vis.hue.histogram.ratio.bin.", 
+ 												  "side.vis.normalized.histogram.ratio.bin.", 
+ 												  "top.fluo.histogram.bin.", 
+ 												  "top.fluo.histogram.ratio.bin.", 
+ 												  "top.nir.histogram.bin.", 
+ 												  "top.vis.hue.histogram.ratio.bin.",
+ 												  "top.ir.histogram.bin.",
+ 												  "side.ir.histogram.bin."
+ 												)
+ 												  
+ 										  
+ 				descriptorSetName_boxplotStacked = c("side near-infrared intensities (zoom corrected) (%)", 
+ 													  "side fluorescence colour spectra (%)", 
+ 													  "top near-infrared intensities (%)", 
+ 													  "side fluorescence ratio histogram (%)", 
+ 													  "side near-infrared (zoom corrected) (%)", 
+ 													  "side fluorescence colour spectra (zoom corrected) (%)", 
+ 													  "side fluorescence  colour spectra (%)", 
+ 													  "side visible light colour histogram (%)", 
+ 													  "side visible light ratio histogram (zoom corrected) (%)", 
+ 													  "top fluorescence colour spectra (%)", 
+ 													  "top fluo ratio histogram (%)", 
+ 													  "NIR top histogram (%)", 
+ 													  "top visible light color histogram (%)",
+ 													  "top infrared light heat histogram (%)",
+ 													  "side infrared light heat histogram (%)"
+ 														)
+ 				
+ 				descriptorList <- addDesSet(descriptorSet_boxplotStacked, descriptorSetName_boxplotStacked, workingDataSet)
+ 				descriptorSet_boxplotStacked <- descriptorList$desSet
+ 				descriptorSetName_boxplotStacked <- descriptorList$desName
+ 				
+ 				stackedBarOptions = list(typOfGeomBar=c("fill", "stack", "dodge"))
+ 				#diagramTypVector = c(diagramTypVector, "boxplotStacked", "boxplotStacked")
+ 				
+ 				appendix = as.logical(appendix %exists% args[5])
+ 			
+ 				if (appendix) {
+ 					blacklist = buildBlacklist(workingDataSet, descriptorSet_nBoxplot)
+ 					descriptorSetAppendix = colnames(workingDataSet[!as.data.frame(sapply(colnames(workingDataSet), '%in%', blacklist))[, 1]])
+ 					descriptorSetNameAppendix = descriptorSetAppendix
+ 					#diagramTypVectorAppendix = rep.int("nboxplot", times=length(descriptorSetNameAppendix))
+ 				}
+ 			
+ 				saveFormat = saveFormat %exists% args[2]
+ 			
+ 				listOfTreatAndFilterTreat = checkOfTreatments(args, treatment, filterTreatment, secondTreatment, filterSecondTreatment, workingDataSet, debug)
+ 				treatment = listOfTreatAndFilterTreat[[1]][[1]]
+ 				secondTreatment = listOfTreatAndFilterTreat[[1]][[2]]
+ 				filterTreatment = listOfTreatAndFilterTreat[[2]][[1]]
+ 				filterSecondTreatment = listOfTreatAndFilterTreat[[2]][[2]]
+ 
+ 				if (treatment == "noneTreatment") {
+ 					workingDataSet <- cbind(workingDataSet, noneTreatment=rep.int("average", times = length(workingDataSet[,1])))	
+ 				}
+ 
+ 				isRatio	= as.logical(isRatio %exists% args[6])
+ 			} else {
+ 				fileName = "error"
+ 			}
+ 		}
+ 		
+ 	}  else if (typOfStartOptions == "test"){
+ 		
+ 		library("snowfall")
+ 		debug <- TRUE
+ 		initRfunction(debug)
+ 		sfStop()
+ 		
+ 		treatment <- "Treatment"
+ 		#filterTreatment <- "dry / normal"
+ 		#filterTreatment <- "dry$normal"
+ 		filterTreatment <- "Trockentress$normal bewaessert"
+ 
+ 		secondTreatment <- "none"
+ 		filterSecondTreatment  <- "none"
+ 		
+ #		secondTreatment <- "Species"
+ #		filterSecondTreatment  <- "Athletico$Fernandez$Weisse Zarin"
+ 		
+ 		#filterSecondTreatment <- "Athletico$Weisse Zarin"
+ 		#filterSecondTreatment <- "BCC_1367_Apex$BCC_1391_Isaria$BCC_1403_Perun$BCC_1433_HeilsFranken$BCC_1441_PflugsIntensiv$Wiebke$BCC_1413_Sissy$BCC_1417_Trumpf"
+ 		filterXaxis <- "none"
+ 
+ 		bgColor <- "transparent"
+ 		isGray="FALSE"
+ 		#showResultInR <- FALSE
+ 		
+ 		fileName <- "report.csv"
+ 		separation <- ";"
+ 		workingDataSet <- separation %readInputDataFile% fileName
+ 		
+ 		saveName <- "test2"
+ 		yAxisName <- "test2"
+ 		
+ 		# c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")
+ 		stress.Start <- 27
+ 		stress.End <- 44
+ 		stress.Typ <- "001"
+ 		stress.Label <- "-1"
+ 		
+ 		isRatio <- TRUE
+ 		calculateNothing <- FALSE
+ 		stoppTheCalculation <- FALSE
+ 		iniDataSet = workingDataSet
+ 		
+ 		
+ 		descriptorSet_nBoxplot = c(#"volume.my", "volume.fluo.plant_weight.iap"
+ 				"Weight A (g)", 
+ 				"Weight B (g)", 
+ 				"Water (weight-diff)", 
+ 				"side.height.norm (mm)", 
+ 				"side.width.norm (mm)", 
+ 				"side.area.norm (mm^2)", 
+ 				"top.area.norm (mm^2)", 											
+ 				"side.fluo.intensity.chlorophyl.average (relative)", 
+ 				"side.fluo.intensity.phenol.average (relative)", 
+ 				"side.nir.intensity.average (relative)",
+ 				"top.nir.intensity.average (relative / pix)",
+ 				
+ 				"side.leaf.count.median (leafs)", 
+ 				"side.bloom.count (tassel)", 
+ 				"side.leaf.length.sum.norm.max (mm)", 
+ 				"volume.iap (px^3)", 
+ 				"volume.lt (px^3)", 
+ 				"volume.iap.wue", 
+ 				"side.nir.wetness.plant_weight_drought_loss", 
+ 				"top.nir.wetness.plant_weight_drought_loss", 
+ 				"side.nir.wetness.average (percent)", 
+ 				"top.nir.wetness.average (percent)", 
+ 				"side.area.relative", 
+ 				"side.height.norm.relative", 
+ 				"side.width.norm.relative", 
+ 				"top.area.relative", 
+ 				"side.area.relative", 
+ 				"volume.iap.relative", 
+ 				"side.height (px)", 
+ 				"side.width (px)", 
+ 				"side.area (px)", 
+ 				"top.area (px)",
+ 				############ new #######
+ 				"side.hull.area (px)",
+ 				"side.hull.area.norm (mm^2)",
+ 				"side.hull.pc1 (px)",
+ 				"side.hull.pc1.norm",
+ 				"side.hull.pc2",
+ 				"side.hull.pc2.norm",
+ 				"side.hull.fillgrade (percent)",		
+ 				"top.hull.area (px)",
+ 				"top.hull.area.norm (mm^2)",
+ 				"top.hull.pc1",
+ 				"top.hull.pc1.norm",
+ 				"top.hull.pc2",
+ 				"top.hull.pc2.norm",
+ 				"top.hull.fillgrade (percent)",
+ 				"side.vis.hue.average",
+ 				"top.vis.hue.average",
+ 				"mark1.y (percent)",
+ 				"mark2.y (percent)",
+ 				"mark3.y (percent)",
+ 				"top.ir.intensity.average",
+ 				"side.ir.intensity.average"
+ 		)
+ 		
+ 		descriptorSetName_nBoxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)", "yellow spectra normed to the realtionship between dry and normal"
+ 				"weight before watering (g)", 
+ 				"weight after watering (g)", 
+ 				"water weight (g)", 
+ 				"height (zoom corrected) (mm)", 
+ 				"width (zoom corrected) (mm)", 
+ 				"side area (zoom corrected) (mm^2)", 
+ 				"top area (zoom corrected) (mm^2)", 
+ 				"chlorophyll intensity (relative intensity/pixel)", 
+ 				"fluorescence intensity (relative intensity/pixel)", 
+ 				"side nir intensity (relative intensity/pixel)",
+ 				"top nir intensity (relative intensity/pixel)",
+ 				"number of leafs", 
+ 				"number of tassel florets", 
+ 				"length of leafs plus stem (mm)", 			 
+ 				"digital biomass (visible light images, IAP formula) (px^3)", 
+ 				"digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 				"volume based water use efficiency", 
+ 				"weighted loss through drought stress (side)", 
+ 				"weighted loss through drought stress (top)", 
+ 				"Average wetness of side image", 
+ 				"Average wetness of top image", 
+ 				"growth in %/day", 
+ 				"plant height growth rate (%/day)", 
+ 				"plant width growth rate (%/day)", 
+ 				"top area growth rate (%/day)", 
+ 				"side area growth rate (%/day)", 
+ 				"volume growth (visible light images, IAP based formula) (%/day)", 
+ 				"height (px)", 
+ 				"width (px)", 
+ 				"side area (px)", 
+ 				"top area (px)",
+ 				####### new #######
+ 				"side area of convex hull (px)",
+ 				"side area of convex hull (zoom corrected) (mm^2)",
+ 				"side maximum extension (px)",
+ 				"side maximum extension (zoom corrected) (mm)",
+ 				"opposite direction of the side maximum extension (px)",
+ 				"opposite direction of the side maximum extension (zoom corrected) (mm)",
+ 				"fillgrade of side convex hull (%)",
+ 				"top area of convex hull (px)",
+ 				"top area of convex hull (zoom corrected) (mm^2)",
+ 				"top maximum extension (px)",
+ 				"top maximum extension (zoom corrected) (mm)",
+ 				"opposite direction of the top maximum extension (px)",
+ 				"opposite direction of the top maximum extension (zoom corrected) (mm)",
+ 				"fillgrade of top convex hull (%)",
+ 				"side visible hue average value",
+ 				"top visible hue average value",
+ 				"blue marker position from top (%)",
+ 				"blue marker position from middle (%)",
+ 				"blue marker position from bottom  (%)",
+ 				"top ir intensity",
+ 				"side ir intensity"
+ 		)		
+ 	
+ 	nBoxOptions= NULL
+ 	
+ 	#boxplot
+ 	descriptorSet_boxplot = c(#"volume.my"
+ 			"side.height.norm (mm)", 
+ 			"side.width.norm (mm)", 
+ 			"side.area.norm (mm^2)", 
+ 			"top.area.norm (mm^2)", 
+ 			"volume.fluo.iap", 
+ 			"volume.iap (px^3)", 
+ 			"volume.lt (px^3)", 
+ 			"side.height (px)", 
+ 			"side.width (px)", 
+ 			"side.area (px)", 
+ 			"top.area (px)"
+ 	)
+ 	
+ 	descriptorSetName_boxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 			"height (zoom corrected) (mm)", 
+ 			"width (zoom corrected) (mm)", 
+ 			"side area (zoom corrected) (mm^2)", 
+ 			"top area (zoom corrected) (mm^2)", 
+ 			"digital biomass (flurescence images, IAP formula) (px^3)", 
+ 			"digital biomass (visible light images, IAP formula) (px^3)", 
+ 			"digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 			"height (px)", 
+ 			"width (px)", 
+ 			"side area (px)", 
+ 			"top area (px)"
+ 	)	
+ 	
+ 	#boxOptions= list(daysOfBoxplotNeeds=c("phase4"))
+ 	boxOptions= NULL
+ 	
+ 	#violinplot
+ 	descriptorSet_violinBox = c(
+ 			"side.height.norm (mm)",
+ 			"side.width.norm (mm)",
+ 			"side.area.norm (mm^2)",
+ 			"top.area.norm (mm^2)",
+ 			"side.fluo.intensity.average (relative)",
+ 			"side.nir.intensity.average (relative)",
+ 			"side.vis.hue.average",
+ 			"top.vis.hue.average",
+ 			"top.ir.intensity.average",
+ 			"side.ir.intensity.average"
+ 	)	
+ 	
+ 	descriptorSetName_violinBox = c(
+ 			"height (zoom corrected) (mm)",
+ 			"width (zoom corrected) (mm)",
+ 			"side area (zoom corrected) (mm^2)",
+ 			"top area (zoom corrected) (mm^2)",
+ 			"side fluo intensity",
+ 			"side nir intensity",
+ 			"side visible hue average value",
+ 			"top visible hue average value",
+ 			"top ir intensity",
+ 			"side ir intensity"
+ 	)	
+ 	
+ 	violinOptions= NULL
+ 	
+ 	
+ 	#boxplotStacked
+ 	descriptorSet_boxplotStacked = c("side.nir.normalized.histogram.bin.", 
+ 			"side.fluo.histogram.bin.", 
+ 			"top.nir.histogram.bin.", 
+ 			"side.fluo.histogram.ratio.bin.", 
+ 			"side.nir.normalized.histogram.bin.", 
+ 			"side.fluo.normalized.histogram.bin.", 
+ 			"side.fluo.normalized.histogram.ratio.bin.", 
+ 			"side.vis.hue.histogram.ratio.bin.", 
+ 			"side.vis.normalized.histogram.ratio.bin.", 
+ 			"top.fluo.histogram.bin.", 
+ 			"top.fluo.histogram.ratio.bin.", 
+ 			"top.nir.histogram.bin.", 
+ 			"top.vis.hue.histogram.ratio.bin.",
+ 			"top.ir.histogram.bin.",
+ 			"side.ir.histogram.bin."
+ 	)
+ 	
+ 	
+ 	descriptorSetName_boxplotStacked = c("side near-infrared intensities (zoom corrected) (%)", 
+ 			"side fluorescence colour spectra (%)", 
+ 			"top near-infrared intensities (%)", 
+ 			"side fluorescence ratio histogram (%)", 
+ 			"side near-infrared (zoom corrected) (%)", 
+ 			"side fluorescence colour spectra (zoom corrected) (%)", 
+ 			"side fluorescence  colour spectra (%)", 
+ 			"side visible light colour histogram (%)", 
+ 			"side visible light ratio histogram (zoom corrected) (%)", 
+ 			"top fluorescence colour spectra (%)", 
+ 			"top fluo ratio histogram (%)", 
+ 			"NIR top histogram (%)", 
+ 			"top visible light color histogram (%)",
+ 			"top infrared light heat histogram (%)",
+ 			"side infrared light heat histogram (%)"
+ 	)
+ 	
+ 	#spiderplot
+ 	descriptorSet_spiderplot = c(#"volume.my"
+ 			"side.height.norm (mm)$side.width.norm (mm)$side.area.norm (mm^2)$top.area.norm (mm^2)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average",
+ 			"side.height (px)$side.width (px)$side.area (px)$top.area (px)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average"
+ 	
+ 	)
+ 	
+ 	descriptorSetName_spiderplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 			"height (zc) (mm)$width (zc) (mm)$side area (zc) (mm^2)$top area (zc) (mm^2)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value",
+ 			"height (px)$width (px)$side area (px)$top area (px)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value"
+ #						"Zoom corrected Spiderchart", 
+ #						"Spiderchart"
+ 	)	
+ 	
+ 	#spiderOptions= list(typOfGeomBar=c("x", "y"))
+ 	spiderOptions= list(typOfGeomBar=c("x"))
+ 	
+ 	descriptorList <- addDesSet(descriptorSet_boxplotStacked, descriptorSetName_boxplotStacked, workingDataSet)
+ 	descriptorSet_boxplotStacked <- descriptorList$desSet
+ 	descriptorSetName_boxplotStacked <- descriptorList$desName
+ 	
+ 	stackedBarOptions = list(typOfGeomBar=c("fill", "stack", "dodge"))
+ 		
+ 		
+ 		boxDes = descriptorSet_boxplot
+ 		boxStackDes = descriptorSet_boxplotStacked 
+ 		boxDesName = descriptorSetName_boxplot
+ 		boxStackDesName = descriptorSetName_boxplotStacked 
+ 		nBoxOptions= nBoxOptions
+ 		boxOptions= boxOptions
+ 		stackedBarOptions = stackedBarOptions
+ 		nBoxDes <- descriptorSet_nBoxplot
+ 		nBoxDesName <- descriptorSetName_nBoxplot
+ 		boxSpiderDes <- descriptorSet_spiderplot
+ 		boxSpiderDesName <- descriptorSetName_spiderplot
+ 		violinBoxDes <- descriptorSet_violinBox
+ 		violinBoxDesName <- descriptorSetName_violinBox
+ 		
+ 		appendix <- FALSE
+ 		if (appendix) {
+ 			blacklist = buildBlacklist(workingDataSet, descriptorSet_nBoxplot)
+ 			descriptorSetAppendix = colnames(workingDataSet[!as.data.frame(sapply(colnames(workingDataSet), '%in%', blacklist))[, 1]])
+ 			descriptorSetNameAppendix = descriptorSetAppendix
+ 			#diagramTypVectorAppendix = rep.int("nboxplot", times=length(descriptorSetNameAppendix))		
+ 			descriptorSet_nBoxplot = descriptorSetAppendix
+ 			descriptorSetName_nBoxplot = descriptorSetNameAppendix
+ 			#diagramTypVector = diagramTypVectorAppendix
+ 			descriptorSet_boxplot = NULL
+ 			descriptorSetName_boxplot = NULL
+ 			descriptorSet_boxplotStacked = NULL
+ 			descriptorSetName_boxplotStacked = NULL
+ 			descriptorSet_spiderplot = NULL
+ 			descriptorSetName_spiderplot = NULL
+ 			descriptorSet_violinBox = NULL
+ 		}
+ 		
+ 		listOfTreatAndFilterTreat = checkOfTreatments(args, treatment, filterTreatment, secondTreatment, filterSecondTreatment, workingDataSet, debug)
+ 		treatment = listOfTreatAndFilterTreat[[1]][[1]]
+ 		secondTreatment = listOfTreatAndFilterTreat[[1]][[2]]
+ 		filterTreatment = listOfTreatAndFilterTreat[[2]][[1]]
+ 		filterSecondTreatment = listOfTreatAndFilterTreat[[2]][[2]]
+ 		
+ 		if (treatment == "noneTreatment") {
+ 			workingDataSet <- cbind(workingDataSet, noneTreatment=rep.int("average", times = length(workingDataSet[,1])))	
+ 		}
+ 		
+ 	}
Lade nötiges Paket: snow
Calling a snowfall function without calling 'sfInit' first or after sfStop().
'sfInit()' is called now.
snowfall 1.84 initialized: sequential execution, one CPU.

Check for new packages...
Check for package updates...
Load libraries:
Cairo
RColorBrewer
data.table
data.table 1.8.0  For help type: help("data.table")

Attaching package: 'data.table'

The following object(s) are masked from 'package:ade4':

    between

ggplot2
fmsb
methods
grid
snow
snowfall
Calling a snowfall function without calling 'sfInit' first or after sfStop().
'sfInit()' is called now.
snowfall 1.84 initialized: sequential execution, one CPU.

Read input file report.csv
DebugBreakPoint:  Start of checkOfTreatments()
Descriptor 'Treatment' is missing!
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions
Zusätzlich: Warnmeldung:
In is.na(iniDataSet[descriptorVector]) :
  is.na() auf nicht-(Liste oder Vektor) des Typs 'NULL' angewendet
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions

2: stop("Non convenient dimension")
1: mantel.rtest(m1 = as.dist(dSNPms), m2 = as.dist(dCNV_Bio_MB_ms), 
       nrepet = 1e+05)
> 	
> 	if (typOfStartOptions != "test"){
+ 		secondRun = appendix
+ 		appendix =  FALSE
+ 		
+ 		if (fileName != "error" & (length(descriptorSet_nBoxplot) > 0 || length(descriptorSet_boxplot) > 0 || length(descriptorSet_boxplotStacked) > 0)) {
+ 			time = system.time({
+ 				repeat {					
+ 					if (appendix) 
+ 						ownCat("Generate diagrams for annotation descriptors...")
+ 					else
+ 						ownCat("Generate diagrams for main descriptors...")
+ 					createDiagrams(iniDataSet = workingDataSet, saveFormat = saveFormat, dpi = dpi, isGray = isGray,
+ 										nBoxDes = descriptorSet_nBoxplot, boxDes = descriptorSet_boxplot, boxStackDes = descriptorSet_boxplotStacked, boxSpiderDes = descriptorSet_spiderplot, violinBoxDes = descriptorSet_violinBox,
+ 										nBoxDesName = descriptorSetName_nBoxplot, boxDesName = descriptorSetName_boxplot, boxStackDesName = descriptorSetName_boxplotStacked, boxSpiderDesName = descriptorSetName_spiderplot, violinBoxDesName = descriptorSetName_violinBox,
+ 										nBoxOptions= nBoxOptions, boxOptions= boxOptions, stackedBarOptions = stackedBarOptions, spiderOptions = spiderOptions, violinOptions = violinOptions,
+ 										treatment = treatment, filterTreatment = filterTreatment, 
+ 										secondTreatment = secondTreatment, filterSecondTreatment = filterSecondTreatment, filterXaxis = filterXaxis, xAxis = xAxis, 
+ 										xAxisName = xAxisName, debug = debug, appendix=appendix, isRatio=isRatio,
+ 										stress.Start=stress.Start, stress.End = stress.End, stress.Typ = stress.Typ, stress.Label = stress.Label)
+ 					if (secondRun) {
+ 						appendix = TRUE
+ 						secondRun = FALSE
+ 						descriptorSet_nBoxplot = descriptorSetAppendix
+ 						descriptorSetName_nBoxplot = descriptorSetNameAppendix
+ 						#diagramTypVector = diagramTypVectorAppendix
+ 						descriptorSet_boxplot = NULL
+ 						descriptorSetName_boxplot = NULL
+ 						descriptorSet_boxplotStacked = NULL
+ 						descriptorSetName_boxplotStacked = NULL
+ 						descriptorSet_spiderplot = NULL
+ 						descriptorSetName_spiderplot = NULL
+ 						descriptorSet_violinBox = NULL
+ 						descriptorSetName_violinBox = NULL
+ 						
+ 					} else {
+ 						break
+ 					}
+ 				}
+ 				checkIfAllNecessaryFilesAreThere()
+ 			}, TRUE)
+ 			
+ 			ownCat("Processing finished")		
+ 			ownCat(time)
+ 			
+ 		} else {
+ 			ownCat("No filename or no descriptor!")
+ 			checkIfAllNecessaryFilesAreThere()
+ 		}
+ 		
+ 		if (debug) {
+ 			ownCat(warnings())
+ 			
+ 		}
+ 	} 
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions
Zusätzlich: Warnmeldungen:
1: Neustart einer unterbrochenen promise evaluation 
2: In is.na(iniDataSet[descriptorVector]) :
  is.na() auf nicht-(Liste oder Vektor) des Typs 'NULL' angewendet
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions

5: stop("'x' must be an array of at least two dimensions") at #10
4: colSums(!is.na(iniDataSet[descriptorVector])) at #10
3: checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, 
       FALSE) at #2
2: getVector(checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, 
       FALSE)) at #24
1: checkOfTreatments(args, treatment, filterTreatment, secondTreatment, 
       filterSecondTreatment, workingDataSet, debug) at #606
> rm(list=ls(all=TRUE))
> # Author: Entzian, Klukas
> ###############################################################################
> 
> cat(paste("used R-Version: ", sessionInfo()$R.version$major, ".", sessionInfo()$R.version$minor, "\n", sep=""))
used R-Version: 2.15.0
> 
> # multi threaded (4, ba-09: 48sec)
> # not threaded   (ba-09:    33sec)
> 
> threaded <- FALSE
> innerThreaded = FALSE
> cpuCNT <- 2
> cpuAutoDetected <- TRUE
> debug <- TRUE
> 
> 
> getSpecialRequestDependentOfUserAndTypOfExperiment <- function() {
+ 	requestList = list(
+ 			KN = list(barley = list(boxplot = list(daysOfBoxplotNeedsReplace = c("27", "44", "45")),
+ 									spiderplot = list(daysOfBoxplotNeedsReplace = c("27", "44", "45")))
+ 			)
+ 	)
+ 	return(requestList)
+ }
> 
> "%break%" <- function(typOfBreak, breakValue) {
+ 	# 0 %break% 1 --> stopp the code
+ 	# 1 %break% 10 --> stopp the code for 10 sec
+ 	if (typOfBreak == 0) {
+ 		stop("The code stopps manual by the \"break\" function", call. = FALSE)
+ 	} else {
+ 		ownCat(paste("Script will stopped for ",breakValue, " sec!", sep=""))
+ 		
+ 		Sys.sleep(breakValue)
+ 		ownCat("Break ends!")
+ 	}
+ }
> 
> "%debug%" <- function(debug, debugNumber) {
+ 	if (debug) {
+ 		ownCat(paste("DebugBreakPoint: ", debugNumber))
+ 		
+ 	}
+ }
> 
> "%checkEqual%" <- function(treat, seconTreat) {
+ 	if (treat == seconTreat) {
+ 		ownCat("Second filter has the same value as first filter so it set to \"none\"")
+ 		
+ 		return("none")
+ 	} else {
+ 		return(seconTreat)
+ 	}
+ }
> 
> "%errorReport%" <- function(errorDescriptor, typOfError="notExists") {
+ 	#overallList$debug %debug% "%errorReport%"
+ 	if (length(errorDescriptor) > 0) {
+ 		if (tolower(typOfError) == "notexists") {
+ 			ownCat(paste("Descriptor '", errorDescriptor, "' is missing!", sep=""))
+ 			
+ 		} else if (tolower(typOfError) == "notnumericorallzero") {
+ #			ownCat(paste("the values of the descriptor(s) '", errorDescriptor, "', are all zero or not numeric!", sep=""))
+ 		}
+ 	}
+ }
> 
> "%exists%" <- function(standardValue, argsValue) {
+ 	if (!is.na(argsValue) & argsValue != "") {
+ 		return(argsValue)
+ 	} else {
+ 		return(standardValue)
+ 	}
+ }
> 
> "%readInputDataFile%" <- function(separation, fileName) {
+ 	#loadAndInstallPackages(TRUE, FALSE)
+ 	
+ 	#separation = ";"
+ 	ownCat(paste("Read input file", fileName))
+ 	if (file.exists(fileName)) {
+ 		
+ 		preScanForPointOrComma <- scan(file=fileName, what=character(0), nlines=2, sep="\n")
+ 		preScanForPointOrComma <- paste(preScanForPointOrComma[2],",.", sep="")
+ 		allCharacterSeparated <- table(strsplit(toupper(preScanForPointOrComma), '')[[1]])
+ 		
+ 		if (allCharacterSeparated["."] > allCharacterSeparated[","]) {
+ 			
+ 			ownCat("Read input (English number format)...")
+ 			
+ 			return(read.csv(fileName, header=TRUE, sep=separation, fileEncoding="UTF-8")) #encoding="UTF-8"
+ 		} else {
+ 			
+ 			ownCat("Read input (German number format)...")
+ 			
+ 			return(read.csv2(fileName, header=TRUE, sep=separation, fileEncoding="UTF-8")) #, encoding="UTF-8"
+ 		}
+ 	} else {
+ 		return(NULL)
+ 	}
+ }
> 
> "%checkIfDescriptorExists%" <- function(descriptor, dataSet) {
+ 	if (is.data.frame(dataSet)) {
+ 		return(descriptor %in% colnames(dataSet))
+ 	} else {
+ 		return(descriptor %in% dataSet)
+ 	}	
+ }
> 
> "%GetDescriptorsAfterCheckIfDescriptorExists%" <- function(descriptor, dataSet) {
+ 	return(descriptor[descriptor %checkIfDescriptorExists% dataSet])
+ }
> 
> "%GetDescriptorAfterCheckIfDescriptorNotExists%" <- function(descriptor, dataSet) {
+ 	return(descriptor[!descriptor %checkIfDescriptorExists% dataSet])
+ }
> 
> "%contactAllWithAll%" <- function(vector1, vector2) {
+ 	vectorTemp = character(0)
+ 	for (k in vector2) {
+ 		if (k == "none") {
+ 			vectorTemp = c(vectorTemp, vector1)
+ 		} else {
+ 			vectorTemp = c(vectorTemp, paste(vector1, k, sep = "/")) #    #/#
+ 		}
+ 	}
+ 	return(vectorTemp)
+ }
> 
> "%allColnamesWithoutThisOnes%" <- function(dataSet, withoutColNamesVector) {
+ 	return(colnames(dataSet)[!colnames(dataSet) %in% withoutColNamesVector])
+ }
> 
> ownCat <- function(text, endline=TRUE){
+ 	#print(text)
+ 	
+ #	while (class(text) == "list") {
+ #		text <- unlist(text)
+ #	}
+ 	
+ 	if (sfParallel()) {
+ 		sfCat(text, master=TRUE)
+ 		if (endline)
+ 			sfCat("\n", master=TRUE)
+ 	} else {
+ 		cat(unlist(text))
+ 		if (endline)
+ 			cat("\n")
+ 	}
+ 	
+ #tryCatch({	
+ #	if (sfParallel()) {
+ #		sfCat(text, master=TRUE)
+ #		if (endline)
+ #			sfCat("\n", master=TRUE)
+ #	} else {
+ #		cat(unlist(text))
+ #		if (endline)
+ #			cat("\n")
+ #	}
+ #	},
+ #	error = function(e) {
+ #		print("aaaaaaaaaaaaaaaaaaaaaaaaaaaa")
+ #		print(text)
+ #		print("hhhhhhhhhhhhhhhhhhhhhhhhhhhh")})
+ }
> 
> overallOutlierDetection <- function(overallList) {
+ 	overallList$debug %debug% "overallOutlierDetection()"	
+ 	
+ 	
+ 	workingDataSet <- overallList$iniDataSet[,!colnames(overallList$iniDataSet) %in% c(overallList$treatment, overallList$secondTreatment, overallList$xAxis)]
+ 	workingDataSet[is.na(workingDataSet)] <- 0
+ 
+ 	
+ 	test <- cbind(overallList$iniDataSet[overallList$xAxis], workingDataSet[,1])
+ 	test2 <- cbind(workingDataSet[,c(1,21,22)])
+ 	aq.plot(test2, alpha=0.1)
+ 	color.plot(test, quan=0.75)
+ 	
+ 	
+ #	sehr gut
+ 	# create data:
+ 	set.seed(134)
+ 	x <- cbind(rnorm(80), rnorm(80), rnorm(80))
+ 	y <- cbind(rnorm(10, 5, 1), rnorm(10, 5, 1), rnorm(10, 5, 1))
+ 	z <- rbind(x,y)
+ # execute:
+ 	aq.plot(z, alpha=0.05)
+ 	
+ 	
+ 	###################
+ 
+ 	data(humus)
+ 	res <-chisq.plot(log(humus[,c("Co","Cu","Ni")]))
+ 	res <-chisq.plot(z)
+ 	res$outliers # these are the potential outliers
+ 	
+ 	################
+ 	
+ #	geht nur mit zwei dimensionen
+ 	# create data:
+ 	x <- cbind(rnorm(100), rnorm(100))
+ 	y <- cbind(rnorm(10, 5, 1), rnorm(10, 5, 1))
+ 	z <- rbind(x,y)
+ # execute:
+ 	color.plot(z, quan=0.75)
+ 	
+ 	################
+ 	
+ 	# create data:
+ 	x <- cbind(rnorm(100), rnorm(100))
+ 	y <- cbind(rnorm(10, 3, 1), rnorm(10, 3, 1))
+ 	z <- rbind(x,y)
+ # execute:
+ 	dd.plot(z)
+ 
+ 	##################
+ 
+ # Geostatistical data:
+ 	data(humus) # Load humus data
+ 	uni.plot(log(humus[, c("As", "Cd", "Co", "Cu", "Mg", "Pb", "Zn")]),symb=TRUE)
+ }
> 
> 
> loadInstallAndUpdatePackages <- function(libraries, install=FALSE, update = FALSE, useDev=FALSE) {	
+ #	libraries  <- c("Cairo", "RColorBrewer", "data.table", "ggplot2", "psych", "fmsb", "plotrix")	
+ 	repos <- c("http://cran.r-project.org","http://www.rforge.net/")
+ 	#libPath <- ".libPaths()[1]"
+ 	libPath <- Sys.getenv("R_LIBS_USER")
+ 	
+ 	if (install & length(libraries) > 0) {
+ 		ownCat("Check for new packages...")
+ 		
+ 		for(n in repos) {
+ 			
+ 			installedPackages <- names(installed.packages()[, 'Package'])
+ 			availablePackagesOnTheRepos <- available.packages(contriburl= contrib.url(n))[,1]
+ 			ins <- libraries[!libraries %in% installedPackages & libraries %in% availablePackagesOnTheRepos]
+ 		
+ 			if (length(ins) > 0) {
+ 				ownCat(paste("The following packages will be installed: ", ins, sep=""))
+ 				
+ 				install.packages(ins, lib=libPath, repos=n, dependencies = TRUE)
+ 			}
+ 		
+ 		}
+ 		
+ 		if (useDev) {
+ 			#install.packages(c("devtools"), lib=libPath, repos=repos, dependencies = TRUE)
+ 			#dev_mode()
+ 			#install_github("ggplot2")
+ 		}
+ 	}
+ 	
+ 	if (update) {
+ 		#installedOldPackages <- names(old.packages()[, 'Package'])
+ 		ownCat("Check for package updates...")
+ 		
+ 		for(n in repos) {
+ 			update.packages(lib.loc = libPath, checkBuilt=TRUE, ask=FALSE,	repos=n)
+ 		}
+ 	}
+ 	
+ 	if (length(libraries) > 0) {
+ 		ownCat("Load libraries:")
+ 		for(n in libraries) {
+ 			ownCat(n)
+ 			if (sfParallel())
+ 				sfLibrary(n, character.only = TRUE)
+ 			else
+ 				library(n, character.only = TRUE)
+ 		}
+ 	
+ 		if (useDev) {
+ 			library("devtools")
+ 		}	
+ 	}	
+ }
> 
> buildDataSet <- function(workingDataSet, overallResult, colname, index, diagramTyp = "none") {
+ 	if (length(colname) > 0) {
+ 		for (n in 1:length(colname)) {
+ 			if (diagramTyp == "spiderplot") {
+ 				searchVector <- gsub("\\.[0-9]*","",colnames(overallResult)) %in% paste(colname[n], index, sep="")	
+ 			} else {
+ 				searchVector <- paste(colname[n], index, sep="")
+ 			}		
+ 			workingDataSet = cbind(workingDataSet, overallResult[searchVector])
+ 		}	
+ 		return(workingDataSet)
+ 	}
+ }
> 
> reNameSpin <- function(colNameWichMustBind, colNames) {
+ 	
+ 	descriptorListIndex <- strsplit(substr(colNameWichMustBind,nchar(colNames$colOfMean)+1, nchar(colNameWichMustBind)),"\\.")
+ 	
+ 	if (descriptorListIndex[[1]][1] != "" & descriptorListIndex[[1]][2] != "") {
+ 		return(colNames$desNames[[descriptorListIndex[[1]][1]]][descriptorListIndex[[1]][2],])
+ 	} else {
+ 		return(colNameWichMustBind)
+ 	}
+ }
> 
> 
> reNameHist <-  function(colNameWichMustBind) {
+ 	colNameWichMustBind = as.character(colNameWichMustBind)
+ 	positions = which(strsplit(colNameWichMustBind, '')[[1]] == '.')
+ 	colNameWichMustBind = substr(colNameWichMustBind, positions[length(positions)]+1, nchar(colNameWichMustBind))
+ 	
+ 	regExpressionSpezialCharacter = "\\_"
+ 	colNameWichMustBind = gsub(regExpressionSpezialCharacter, "..", colNameWichMustBind)
+ 	
+ 	return(colNameWichMustBind)	
+ }
> 
> reNameColumn <-  function(plotThisValues, columnNameReplace="name", columnNameWhichUsedToReplace="primaerTreatment") {
+ 	if (!is.null(plotThisValues[columnNameWhichUsedToReplace])) {
+ 		plotThisValues[columnNameReplace] = plotThisValues[columnNameWhichUsedToReplace]
+ 	}
+ 	return(plotThisValues)
+ }
> 
> swap <- function(listWithTwoParameter) {
+ 	temp = listWithTwoParameter[[1]]
+ 	listWithTwoParameter[[1]] = listWithTwoParameter[[2]]
+ 	listWithTwoParameter[[2]] = temp
+ 	return(listWithTwoParameter)
+ }
> 
> changeWhenTreatmentNoneAndSecondTreatmentNotNone <- function(listOfTreat, listOfFilterTreat) {
+ 	if (listOfTreat[[1]] == "none" & listOfTreat[[2]] != "none") {
+ 		ownCat("The values of Treatment and SecondTreamt are changed (filter values also)")
+ 		
+ 		return(list(swap(listOfTreat), swap(listOfFilterTreat)))	
+ 	} else {
+ 		return(list(listOfTreat, listOfFilterTreat))
+ 	}
+ }
> 
> checkOfTreatments <- function(args, treatment, filterTreatment, secondTreatment, filterSecondTreatment, workingDataSet, debug) {
+ 	debug %debug% "Start of checkOfTreatments()"
+ #	ownCat(args[5])
+ #	ownCat(args[6])
+ 
+ 	treatment = treatment %exists% args[3]
+ 	secondTreatment = secondTreatment %exists% args[4]
+ 	secondTreatment = treatment %checkEqual% secondTreatment
+ 	
+ 	listOfTreat = list(treatment=treatment, secondTreatment=secondTreatment)
+ 	listOfFilterTreat = list(filterTreatment=filterTreatment, filterSecondTreatment=filterSecondTreatment)	## wird erstmal noch nichts weiter mit gemacht! nur geswapt falls notwendig
+ 	
+ 	if (treatment == "none" & secondTreatment == "none") {
+ 		listOfTreat$treatment = "noneTreatment"
+ 		listOfTreatAndFilterTreat <- list(listOfTreat, listOfFilterTreat)
+ 	} else {	
+ 		for (k in names(listOfTreat)) {
+ 			if (listOfTreat[[k]] != "none") {
+ 				#overallTreat = list(iniDataSet=workingDataSet, descriptor=listOfTreat[[k]], debug=debug, stoppTheCalculation = FALSE, errorDescriptor=character())
+ 				#overallTreat = list(iniDataSet=workingDataSet, descriptor=listOfTreat[[k]], debug=debug, stoppTheCalculation = FALSE)
+ 				descriptorVector = getVector(preprocessingOfDescriptor(listOfTreat[[k]], workingDataSet))
+ 				
+ 				if (!is.null(descriptorVector)) {
+ 					descriptorVector = getVector(checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, FALSE))
+ 					
+ 					if (!is.null(descriptorVector)) {
+ 						listOfTreat[[k]] = descriptorVector
+ 					} 
+ 				} 
+ 				
+ 				if (is.null(descriptorVector)) {
+ 					ownCat(paste(k, "set to \"none\""))
+ 					
+ 					listOfTreat[[k]] = "none"
+ 				}
+ 			}
+ 		}
+ 	
+ 		listOfTreatAndFilterTreat = changeWhenTreatmentNoneAndSecondTreatmentNotNone(listOfTreat, listOfFilterTreat)
+ 	}
+ 	debug %debug% "End of checkOfTreatments()"
+ 
+ 	return(listOfTreatAndFilterTreat)
+ }
> 
> overallCheckIfDescriptorIsNaOrAllZero <- function(overallList) {
+ 	overallList$debug %debug% "overallCheckIfDescriptorIsNaOrAllZero()"	
+ 	
+ 	if (sum(!is.na(overallList$nBoxDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$nBoxDes), "nBoxplots..."));}
+ 		for (n in 1:length(overallList$nBoxDes)) {
+ 			if (!is.na(overallList$nBoxDes[[n]][1])) {
+ 				overallList$nBoxDes[n] = checkIfDescriptorIsNaOrAllZero(overallList$nBoxDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$nBoxDes) = c(1:length(overallList$nBoxDes))
+ 	} else {
+ 		ownCat("All values for nBoxplot are 'NA'")
+ 		
+ 	}
+ 	
+ 	if (sum(!is.na(overallList$boxDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$boxDes), "Boxplots..."))}
+ 		for (n in 1:length(overallList$boxDes)) {
+ 			if (!is.na(overallList$boxDes[[n]][1])) {
+ 				overallList$boxDes[[n]] = checkIfDescriptorIsNaOrAllZero(overallList$boxDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$boxDes) = c(1:length(overallList$boxDes))
+ 	} else {
+ 		ownCat("All values for Boxplot are 'NA'")
+ 		
+ 	}
+ 
+ 	if (sum(!is.na(overallList$boxStackDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$boxStackDes), "stacked boxplots..."))}
+ 		for (n in 1:length(overallList$boxStackDes)) {
+ 			if (!is.na(overallList$boxStackDes[[n]][1])) {
+ 				overallList$boxStackDes[[n]] = checkIfDescriptorIsNaOrAllZero(overallList$boxStackDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$boxStackDes) = c(1:length(overallList$boxStackDes))
+ 	} else {
+ 		ownCat("All values for stackedBoxplot are 'NA'")
+ 		
+ 	}
+ 
+ 	if (sum(!is.na(overallList$boxSpiderDes)) > 0) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$boxSpiderDes), "spiderplots..."))}
+ 		for (n in 1:length(overallList$boxSpiderDes)) {
+ 			if (!is.na(overallList$boxSpiderDes[[n]][1])) {
+ 				initDescriptor <- overallList$boxSpiderDes[[n]]
+ 				overallList$boxSpiderDes[[n]] = checkIfDescriptorIsNaOrAllZero(overallList$boxSpiderDes[[n]], overallList$iniDataSet)
+ 				booleanVector <- unlist(initDescriptor) %in% unlist(overallList$boxSpiderDes[[n]])
+ 				overallList$boxSpiderDesName[[n]] = as.data.frame(overallList$boxSpiderDesName[[n]][booleanVector])
+ 				
+ 			}
+ 		}
+ 		names(overallList$boxSpiderDes) = c(1:length(overallList$boxSpiderDes))
+ 		names(overallList$boxSpiderDesName) = c(1:length(overallList$boxSpiderDesName))
+ 	} else {
+ 		ownCat("All values for spider plot are 'NA'")
+ 		
+ 	}
+ 	
+ 	if (sum(!is.na(overallList$violinBoxDes)) > 0 & overallList$isRatio) {
+ 		if (overallList$debug) {ownCat(paste(length(overallList$violinBoxDes), "violinplot..."))}
+ 		for (n in 1:length(overallList$violinBoxDes)) {
+ 			if (!is.na(overallList$violinBoxDes[[n]][1])) {
+ 				overallList$violinBoxDes[n] = checkIfDescriptorIsNaOrAllZero(overallList$violinBoxDes[[n]], overallList$iniDataSet)
+ 			}
+ 		}
+ 		names(overallList$violinBoxDes) = c(1:length(overallList$violinBoxDes))
+ 	} else {
+ 		ownCat("All values for violin plot are 'NA'")
+ 		
+ 	}
+ 	
+ 	
+ 	if ((!sum(!is.na(overallList$boxStackDes)) > 0 && !sum(!is.na(overallList$boxDes)) > 0 && !sum(!is.na(overallList$nBoxDes)) > 0 && !sum(!is.na(overallList$boxSpiderDes)) && !sum(!is.na(overallList$violinBoxDes))) > 0) {
+ 		ownCat("No descriptor set (all descriptors are zero or NA) - the program needs to stop!")
+ 		
+ 		overallList$stoppTheCalculation = TRUE 
+ 	}
+ 	
+ 	return(overallList)
+ }
> 
> checkIfDescriptorIsNaOrAllZero <- function(descriptorVector, iniDataSet, isDescriptor = TRUE) {
+ 	#overallList$debug %debug% "checkIfDescriptorIsNaOrAllZero()"
+ 	descriptorVector = as.vector(descriptorVector)
+ 	#descriptorVector = getVector(descriptorVector)
+ 	tempDescriptor = descriptorVector 
+ 	
+ 	if (isDescriptor) {
+ 		descriptorVector = descriptorVector[colSums(!is.na(iniDataSet[descriptorVector])) != 0 & colSums(iniDataSet[descriptorVector] *1, na.rm = TRUE) > 0]
+ 	} else {
+ 		descriptorVector = descriptorVector[colSums(!is.na(iniDataSet[descriptorVector])) != 0]
+ 	}
+ 	errorDescriptor = tempDescriptor %GetDescriptorAfterCheckIfDescriptorNotExists% descriptorVector
+ 
+ 	if (length(errorDescriptor) > 0) {
+ 		errorDescriptor %errorReport% "NotNumericOrAllZero"	
+ 	}
+ 	
+ 	if (length(descriptorVector) > 0) {
+ 		return(as.data.frame(descriptorVector))
+ 	} else {
+ 		return(NA)
+ 	}
+ }
> 
> overallChangeName <- function(overallList) {
+ 	overallList$debug %debug% "overallChangefileName()"	
+ 	
+ 	if (!is.null(overallList$imageFileNames_nBoxplots)) {
+ 		if (overallList$debug) {ownCat("line plots..."); }
+ 		overallList$imageFileNames_nBoxplots = changefileName(overallList$imageFileNames_nBoxplots)
+ 		names(overallList$imageFileNames_nBoxplots) = c(1:length(overallList$imageFileNames_nBoxplots))
+ 		
+ 		overallList$nBoxDesName = as.list(overallList$nBoxDesName)
+ 		names(overallList$nBoxDesName) = c(1:length(overallList$nBoxDesName))
+ 	}
+ 	
+ 	if (!is.null(overallList$imageFileNames_Boxplots)) {
+ 		if (overallList$debug) {ownCat("boxplots...");}
+ 		overallList$imageFileNames_Boxplots = changefileName(overallList$imageFileNames_Boxplots)
+ 		names(overallList$imageFileNames_Boxplots) = c(1:length(overallList$imageFileNames_Boxplots))
+ 		
+ 		overallList$boxDesName = as.list(overallList$boxDesName)
+ 		names(overallList$boxDesName) = c(1:length(overallList$boxDesName))
+ 	}
+ 	
+ 	if (!is.null(overallList$imageFileNames_StackedPlots)) {
+ 		if (overallList$debug) {ownCat("Stacked boxplots...");}
+ 		overallList$imageFileNames_StackedPlots = changefileName(overallList$imageFileNames_StackedPlots)
+ 		names(overallList$imageFileNames_StackedPlots) = c(1:length(overallList$imageFileNames_StackedPlots))
+ 		
+ 		overallList$boxStackDesName = as.list(overallList$boxStackDesName)
+ 		names(overallList$boxStackDesName) = c(1:length(overallList$boxStackDesName))
+ 	}
+ 	
+ 	if (!is.null(overallList$imageFileNames_SpiderPlots)) {
+ 		if (overallList$debug) {ownCat("spiderplots...");}
+ 		overallList$imageFileNames_SpiderPlots = changefileName(overallList$imageFileNames_SpiderPlots)
+ 		names(overallList$imageFileNames_SpiderPlots) = c(1:length(overallList$imageFileNames_SpiderPlots))
+ 		
+ 		#overallList$boxSpiderDesName = as.list(overallList$boxSpiderDesName)
+ 		#names(overallList$boxSpiderDesName) = c(1:length(overallList$boxSpiderDesName))
+ 	}
+ 
+ 	if (!is.null(overallList$imageFileNames_violinPlots) & overallList$isRatio) {
+ 		if (overallList$debug) {ownCat("violinplots...");}
+ 		overallList$imageFileNames_violinPlots = changefileName(overallList$imageFileNames_violinPlots)
+ 		names(overallList$imageFileNames_violinPlots) = c(1:length(overallList$imageFileNames_violinPlots))
+ 		
+ 		overallList$violinBoxDesName = as.list(overallList$violinBoxDesName)
+ 		names(overallList$violinBoxDesName) = c(1:length(overallList$violinBoxDesName))
+ 	}
+ 	
+ 	
+ 	return(overallList)
+ }
> 
> setOptions <- function(overallList, typOfPlot, typOfOptions, listOfExtraOptions) {
+ 	overallList$debug %debug% "setOptions()"
+ 	
+ 	for (values in names(listOfExtraOptions[[typOfPlot]])) {
+ 		if (values %in% names(overallList[[typOfOptions]])) {
+ 			overallList[[typOfOptions]][[values]] = c(overallList[[typOfOptions]][[values]], listOfExtraOptions[[typOfPlot]][[values]])
+ 		} else {
+ 			overallList[[typOfOptions]][[values]] = c(listOfExtraOptions[[typOfPlot]][[values]])
+ 		}
+ 	}
+ 	return(overallList)
+ }
> 
> 
> setSomePrintingOptions <- function(overallList) {
+ 	overallList$debug %debug% "setSomePrintingOptions()"
+ 
+ 	requestList = 	getSpecialRequestDependentOfUserAndTypOfExperiment()
+ 	if (!(overallList$user == "none" & overallList$typOfExperiment == "none")) {
+ 		listOfExtraOptions = requestList[[overallList$user]][[overallList$typOfExperiment]]	
+ 		for (n in names(listOfExtraOptions)) {
+ 			if (n == "boxplot") {
+ 				return(setOptions(overallList, "boxplot", "boxOptions", listOfExtraOptions))				
+ 			} else if (n == "nBoxplot") {
+ 				return(setOptions(overallList, "nBoxplot", "nBoxOptions", listOfExtraOptions))
+ 			} else if (n == "stackBoxplot") {
+ 				return(setOptions(overallList, "stackBoxplot", "stackedBarOptions", listOfExtraOptions))
+ 			} else if (n == "spiderplot") {
+ 				return(setOptions(overallList, "spiderplot", "spiderOptions", listOfExtraOptions))
+ 			} else if (n == "violinplot" & overallList$isRatio) {
+ 				return(setOptions(overallList, "violinplot", "violinOptions", listOfExtraOptions))
+ 			}			
+ 		}		
+ 	}
+ 	
+ 	return(overallList)
+ }
> 
> checkUserOfExperiment <- function(overallList) {
+ 	overallList$debug %debug% "checkUserOfExperiment()"
+ 
+ 	user = "none"
+ 	if ("Plant.ID" %in% colnames(overallList$iniDataSet)) {
+ 		user = substr(overallList$iniDataSet$'Plant.ID'[1], 5, 6)		
+ 	}
+ 	overallList$user = user
+ 	return(overallList)
+ }
> 
> 
> checkTypOfExperiment <- function(overallList) {
+ 	overallList$debug %debug% "checkTypOfExperiment()"
+ 
+ 	typ = "none"
+ 	if ("Species" %in% colnames(overallList$iniDataSet)) {
+ 		if (length(grep("barley", overallList$iniDataSet$Species[1], ignore.case=TRUE)) > 0) {
+ 			typ = "barley"
+ 		} else if (length(grep("maize", overallList$iniDataSet$Species[1], ignore.case=TRUE)) > 0) {
+ 			typ = "maize"
+ 		} else if (length(grep("arabidopsis", overallList$iniDataSet$Species[1], ignore.case=TRUE)) > 0) {
+ 			typ = "arabidopsis"
+ 		}	
+ 	}
+ 	
+ 	overallList$typOfExperiment = typ
+ 	return(overallList)	
+ }
> 
> 
> changefileName <- function(fileNameVector) {
+ 	#Sollten hier nicht noch die Leerzeichen durch Punkte ersetzt werden?
+ 	
+ 	fileNameVector = gsub("\\$", ";", substr(fileNameVector, 1, 70))
+ 	fileNameVector = gsub("\\^", "", fileNameVector)
+ 
+ 	for(i in 1:length(fileNameVector)) {
+ 		if (length(grep("\\.bin\\.",fileNameVector[i], ignore.case=TRUE)) > 0){
+ 			stringSplit <- paste(strsplit(fileNameVector[i], '\\.bin\\.')[[1]][1], ".bin.", sep="")
+ 			fileNameVector[i] <- stringSplit
+ 		} 
+ 	}
+ 
+ 	return(as.list(fileNameVector))
+ }
> 
> preprocessingOfValues <- function(value, isColValue=FALSE, replaceString=".", isColName=FALSE) {
+ 	if (!is.null(value)) {
+ 		regExpressionCol = "[^[:alnum:]|^_]|[[:space:]|\\^]"
+ 		#regExpressionCol = "[^[:alnum:]]|[[:space:]|\\^]"
+ 		if (isColValue || isColName) {
+ 			value = strsplit(as.character(value), "$", fixed=TRUE)
+ 		}
+ 		
+ 		if (!isColName){
+ 			for (n in 1:length(value)) {
+ 				value[[n]] = gsub(regExpressionCol, replaceString, value[[n]])
+ 			}
+ 		}
+ 	} else {
+ 		return("none")
+ 	}
+ 	return(value)
+ }
> 
> overallPreprocessingOfDescriptor <- function(overallList) {
+ 	overallList$debug %debug% "overallPreprocessingOfDescriptor()"	
+ 	
+ 	if (!is.null(overallList$nBoxDes)) {
+ 		if (overallList$debug) {ownCat("nBoxplot")}
+ 		for (n in 1:length(overallList$nBoxDes)) {
+ 			overallList$nBoxDes[n] = preprocessingOfDescriptor(overallList$nBoxDes[[n]], overallList$iniDataSet)
+ 		}
+ 	} else {
+ 		ownCat("nBoxplot is NULL")
+ 		
+ 	} 
+ 	
+ 	if (!is.null(overallList$boxDes)) {
+ 		if (overallList$debug) {ownCat("boxplot")}
+ 		for (n in 1:length(overallList$boxDes)) {
+ 			overallList$boxDes[n] = preprocessingOfDescriptor(overallList$boxDes[[n]], overallList$iniDataSet)
+ 		}
+ 	} else {
+ 		ownCat("Boxplot is NULL")
+ 		
+ 	} 
+ 	
+ 	if (!is.null(overallList$boxStackDes)) {
+ 		if (overallList$debug) {ownCat("Stacked boxplots...")}
+ 		for (n in 1:length(overallList$boxStackDes)) {
+ 			overallList$boxStackDes[n] = preprocessingOfDescriptor(overallList$boxStackDes[[n]], overallList$iniDataSet)
+ 		}
+ 	} else {
+ 		ownCat("stackedBoxplot is NULL")
+ 		
+ 	} 
+ 
+ 	if (!is.null(overallList$boxSpiderDes)) {
+ 		if (overallList$debug) {ownCat("spider plot")}
+ 		for (n in 1:length(overallList$boxSpiderDes)) {
+ 			initDescriptor <- preprocessingOfValues(overallList$boxSpiderDes[n], isColValue = TRUE)
+ 			overallList$boxSpiderDes[n] = preprocessingOfDescriptor(overallList$boxSpiderDes[[n]], overallList$iniDataSet)
+ 			booleanVector <- initDescriptor[[1]] %in% overallList$boxSpiderDes[n][[1]]
+ 			overallList$boxSpiderDesName[n] = as.data.frame(preprocessingOfValues(overallList$boxSpiderDesName[[n]], isColName=TRUE)[[1]][booleanVector])
+ 		}
+ 	} else {
+ 		ownCat("Spider plot is NULL")
+ 		
+ 	} 
+ 
+ 	if (!is.null(overallList$violinBoxDes) & overallList$isRatio) {
+ 		if (overallList$debug) {ownCat("violin plot")}
+ 		for (n in 1:length(overallList$violinBoxDes)) {
+ 			initDescriptor <- preprocessingOfValues(overallList$violinBoxDes[n], isColValue = TRUE)
+ 			overallList$violinBoxDes[n] = preprocessingOfDescriptor(overallList$violinBoxDes[[n]], overallList$iniDataSet)
+ 			booleanVector <- initDescriptor[[1]] %in% overallList$violinBoxDes[n][[1]]
+ 			overallList$violinBoxDesName[n] = as.data.frame(preprocessingOfValues(overallList$violinBoxDesName[[n]], isColName=TRUE)[[1]][booleanVector])
+ 		}
+ 	} else {
+ 		ownCat("No ratio data set/violin plot")
+ 		
+ 	} 
+ 	
+ 	if ((!sum(!is.na(overallList$boxStackDes)) > 0 && !sum(!is.na(overallList$boxDes)) > 0 && !sum(!is.na(overallList$nBoxDes)) > 0 && !sum(!is.na(overallList$boxSpiderDes)) && !sum(!is.na(overallList$violinBoxDes))) > 0) {
+ 		ownCat("No descriptor set - this run needs to stop!")
+ 		
+ 		overallList$stoppTheCalculation = TRUE
+ 	}
+ 	return(overallList)
+ }
> 
> preprocessingOfDescriptor <- function(descriptorVector, iniDataSet) {
+ 	#overallList$debug %debug% "preprocessingOfDescriptor()"
+ 	descriptorVector = unlist(preprocessingOfValues(descriptorVector, isColValue = TRUE))	#descriptor is value for yAxis
+ 	
+ 	errorDescriptor = descriptorVector %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
+ 	descriptorVector = descriptorVector %GetDescriptorsAfterCheckIfDescriptorExists% iniDataSet
+ 	if (length(errorDescriptor)>0) {
+ 		errorDescriptor %errorReport% "notExists"
+ 	} 
+ 	
+ 	if (length(descriptorVector) > 0) {
+ 		return(as.data.frame(descriptorVector))
+ 	} else {
+ 		return(NA)
+ 	}	
+ }
> 
> preprocessingOfxAxisValue <- function(overallList) {
+ 	overallList$debug %debug% "preprocessingOfxAxisValue()"
+ 	overallList$xAxis = unlist(preprocessingOfValues(overallList$xAxis, TRUE))
+ 	
+ 	if (overallList$filterXaxis != "none") {
+ 		overallList$filterXaxis = as.numeric(strsplit(overallList$filterXaxis, "$", fixed=TRUE)[[1]])
+ 	} else {
+ 		overallList$filterXaxis = as.numeric(unique(overallList$iniDataSet[overallList$xAxis])[[1]])	#xAxis muss einen Wert enthalten ansonsten Bricht das Program weiter oben ab
+ 	}
+ 	return(overallList)
+ }
> 
> getSingelFilter <- function(filter, treatment, dataSet) {
+ 	if (filter != "none") {
+ 		return(strsplit(filter, "$", fixed=TRUE)[[1]])
+ 	} else {
+ 		return(as.character(unique(dataSet[treatment])[[1]]))
+ 	}
+ }
> 
> preprocessingOfTreatment <- function(overallList) {
+ 	overallList$debug %debug% "preprocessingOfTheTreatment()"
+ 	
+ 	if (!is.null(overallList$treatment)) {
+ 		overallList$treatment = preprocessingOfValues(overallList$treatment)
+ 		
+ 		if (overallList$treatment != "none" & (overallList$treatment %checkIfDescriptorExists% overallList$iniDataSet)) {	
+ 			overallList$filterTreatment = getSingelFilter(overallList$filterTreatment, overallList$treatment, overallList$iniDataSet)
+ 
+ 		} else {
+ 			overallList$treatment = "none"
+ 			overallList$filterTreatment = "none"
+ 			ownCat("Set 'filterTreatment' and 'treatment' to 'none'!")
+ 					
+ 		}			
+ 	} else {
+ 		overallList$treatment = "none"
+ 		overallList$filterTreatment = "none"
+ 		ownCat("Set 'filterTreatment' and 'treatment' to 'none'!")
+ 		
+ 	}
+ 	return(overallList)
+ }
> 
> preprocessingOfSecondTreatment <- function(overallList) {
+ 	overallList$debug %debug% "preprocessingOfTheSecondTreatment()"
+ 	
+ 	if (!is.null(overallList$secondTreatment)) {
+ 		overallList$secondTreatment = preprocessingOfValues(overallList$secondTreatment)
+ 
+ 		if (overallList$secondTreatment != "none" & (overallList$secondTreatment %checkIfDescriptorExists% overallList$iniDataSet)) {
+ 			overallList$filterSecondTreatment = getSingelFilter(overallList$filterSecondTreatment, overallList$secondTreatment, overallList$iniDataSet)
+ 			
+ 			if (length(overallList$filterSecondTreatment) == 1) {
+ 				overallList$secondTreatment = "none"
+ 				overallList$filterSecondTreatment = "none"
+ 				ownCat("Set 'filterSecondTreatment' and 'secondTreatment' to 'none' because only one filter is there!")
+ 			}
+ 			
+ 		} else {
+ 			overallList$secondTreatment = "none"
+ 			overallList$filterSecondTreatment = "none"
+ 			ownCat("Set 'filterSecondTreatment' and 'secondTreatment' to 'none'!")
+ 			
+ 		}	
+ 	} else {
+ 		overallList$secondTreatment = "none"
+ 		overallList$filterSecondTreatment = "none"
+ 		ownCat("Set 'filterSecondTreatment' and 'secondTreatment' to 'none'!")
+ 		
+ 	}
+ 	return(overallList)
+ }
> 
> check <- function(value, checkValue=c("none", NA)) {
+ 	if (!is.null(value)) {
+ 		return(value %GetDescriptorAfterCheckIfDescriptorNotExists% checkValue)
+ 		#return(unique(value %GetDescriptorAfterCheckIfDescriptorNotExists% checkValue))
+ 	} else {
+ 		return(character(0))
+ 	}
+ }
> 
> getVector <- function(descriptorSet) {
+ 	if (!is.null(descriptorSet)) {
+ 		vector =  vector()
+ 		for (n in 1:length(descriptorSet)) {
+ 			vector = c(vector, as.vector(unlist(descriptorSet[[n]])))
+ 		}
+ 		return(vector)
+ 	}
+ 	return(character(0))
+ }
> 
> reduceWorkingDataSize <- function(overallList) {
+ 	overallList$debug %debug% "reduceWorkingDataSize()"
+ 	if (overallList$isRatio) {
+ 		overallList$iniDataSet = overallList$iniDataSet[unique(c(check(getVector(overallList$nBoxDes)), check(getVector(overallList$boxDes)), check(getVector(overallList$boxStackDes)), check(getVector(overallList$boxSpiderDes)), check(getVector(overallList$violinBoxDes)), check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment)))]
+ 	} else {
+ 		overallList$iniDataSet = overallList$iniDataSet[unique(c(check(getVector(overallList$nBoxDes)), check(getVector(overallList$boxDes)), check(getVector(overallList$boxStackDes)), check(getVector(overallList$boxSpiderDes)), check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment)))]
+ 	}
+ 	return(overallList)
+ }
> 
> setRowAndColNameOfFinalDataFrame <- function(overallList) {
+ 	overallList$debug %debug% "setRowAndColNameOfFinalDataFrame()"
+ 
+ 	overallList$rowName = (overallList$descriptor %contactAllWithAll% overallList$filterTreatment) %contactAllWithAll% overallList$filterSecondTreatment
+ 	overallList$colName = as.character(overallList$filterXaxis)
+ 	
+ 	return(overallList)
+ }
> 
> groupByFunction <- function(groupByList) {
+ 	groupByList = unlist(groupByList)
+ 	return(unlist(groupByList[ifelse(groupByList != "none", TRUE, FALSE)]))
+ }
> 
> getBooleanVectorForFilterValues <- function(groupedDataFrame, listOfValues, plot=FALSE) {
+ ###############
+ #groupedDataFrame <- groupedDataFrameMean
+ #listOfValues <- booleanVectorList
+ #plot=FALSE
+ ###############
+ 	
+ 	iniType = !plot
+ 	tempVector = rep.int(iniType, times=length(groupedDataFrame[, 1]))
+ 	
+ 	for (h in names(listOfValues)) {
+ 		if (h != "none" & !is.null(groupedDataFrame[[h]])) {
+ 			if (plot) {
+ 				tempVector = tempVector | groupedDataFrame[[h]] %in% listOfValues[[h]]
+ 			} else {
+ 				tempVector = tempVector & groupedDataFrame[[h]] %in% listOfValues[[h]]
+ 			}
+ 		}
+ 	}
+ 	return(tempVector)
+ }
> 
> buildRowForOverallList <- function(i, des, listOfValues, dataSet, day) {
+ 	rowString = list(row=des, day=numeric())
+ 	for (k in listOfValues) {
+ 		if (k != "none") {
+ 			rowString$row = paste(rowString$row, dataSet[i, k])
+ 		}
+ 	}
+ 	return(rowString)
+ } 
> 
> fillOverallResult <- function(overallList, preErrorBars) {
+ 	overallList$debug %debug% "fillOverallResult()"
+ 	if (length(overallList$iniDataSet[, 1]) > 0) {
+ 		for (i in 1:length(overallList$iniDataSet[, 1])) {
+ 			for (des in overallList$descriptor) {
+ 				rowAndColumn = buildRowForOverallList(i, des, c(overallList$treatment, overallList$secondTreatment), overallList$iniDataSet, overallList$xAxis)
+ 				overallList$overallResult[rowAndColumn$row, as.character(overallList$iniDataSet[i, overallList$xAxis])] = overallList$iniDataSet[i, des]
+ 				if (tolower(overallList$diagramTyp) != "boxplotstacked")
+ 					overallList$errorBars[rowAndColumn$row, as.character(overallList$iniDataSet[i, overallList$xAxis])] = preErrorBars[i, des]
+ 			}
+ 		}
+ 	} else {
+ 		ownCat("No Value for the OverallResult-DataFrame - Wrong filter!")
+ 		
+ 		overallList$stoppTheCalculation = TRUE
+ 	}
+ 	return(overallList)
+ }
> 
> buildList <- function(overallList, colOfXaxis) {
+ 	overallList$debug %debug% "buildList()"
+ 	newList = list()
+ 	
+ 	newList[[overallList$treatment]] = overallList$filterTreatment
+ 	newList[[overallList$secondTreatment]] = overallList$filterSecondTreatment
+ 	newList[[colOfXaxis]] = overallList$filterXaxis
+ 	
+ 	return(newList)
+ }
> 
> buildRowName <- function(mergeDataSet, groupBy, yName = "value") {	
+ #####
+ #mergeDataSet <- iniDataSet
+ #####
+ 		
+ 	if (length(groupBy) == 0) {
+ 		return(data.frame(name=rep.int(yName, length(mergeDataSet[, 1])), mergeDataSet))
+ 	} else if (length(groupBy) == 1) {
+ 		return(data.frame(name=mergeDataSet[, groupBy], mergeDataSet[, !(colnames(mergeDataSet) %in% groupBy)]))
+ 	} else {		
+ 		#temp = mergeDataSet[, groupBy[2]]
+ 		temp = mergeDataSet[, groupBy[2]]
+ 		if (length(groupBy) > 2) {
+ 			reduceGroupBy <- groupBy[3:length(groupBy)]
+ 			for (h in seq(along=reduceGroupBy)) {
+ 				temp = paste(temp, mergeDataSet[, reduceGroupBy[h]], sep = "/") #  #/#
+ 			}
+ 		}
+ 		
+ 		return(data.frame(name=temp, primaerTreatment= mergeDataSet[, groupBy[1]], mergeDataSet[, mergeDataSet %allColnamesWithoutThisOnes% groupBy]))
+ 	}	
+ }
> 
> getToPlottedDays <- function(xAxis, changes=NULL) {
+ ##########
+ #xAxis <- xAxisValue
+ ##########
+ 	
+ 	uniqueDays = unique(xAxis)
+ 	medianPosition = floor(median(1:length(uniqueDays)))
+ 
+ 	days = uniqueDays[floor(median(1:length(uniqueDays[uniqueDays<=uniqueDays[medianPosition]])))]
+ 	days = c(days, uniqueDays[medianPosition])
+ 	days = c(days, uniqueDays[floor(median(length(uniqueDays[uniqueDays>=uniqueDays[medianPosition]]):length(uniqueDays)))])
+ 	days = c(days, uniqueDays[length(uniqueDays)])
+ 	 
+ 	if (!is.null(changes)) {
+ 		days = c(as.numeric(changes), days[(length(changes)+1):4])
+ 	}
+ 	
+ 	return(days)
+ }
> 
> setxAxisfactor <- function(xAxisName, xAxisValue, options) {
+ ##############
+ #xAxisName <- overallList$xAxisName
+ #xAxisValue <- overallResult$xAxis
+ ##############
+ 	
+ 	
+ 	if (!is.null(options$daysOfBoxplotNeedsReplace)) {
+ 		whichDayShouldBePlot = getToPlottedDays(xAxisValue, options$daysOfBoxplotNeedsReplace)
+ 	} else {
+ 		whichDayShouldBePlot = getToPlottedDays(xAxisValue)
+ 	}
+ 		
+ 	xAxisfactor = factor(xAxisValue, levels=whichDayShouldBePlot)
+ 
+ 	xAxisfactor = paste(xAxisName, xAxisfactor)
+ 	naString = paste(xAxisName, "NA")
+ 	xAxisfactor[xAxisfactor == naString] = NA
+ 	
+ #	xAxisfactor = paste("DAS", xAxisfactor)
+ #	xAxisfactor[xAxisfactor == "DAS NA"] = NA
+ 	return(xAxisfactor)
+ }
> 
> 
> overallGetResultDataFrame <- function(overallList) {
+ 	overallList$debug %debug% "overallGetResultDataFrame()"	
+ 
+ 	if (!calculateNothing) {	
+ 			groupBy = groupByFunction(list(overallList$treatment, overallList$secondTreatment))
+ 			colNames = list(colOfXaxis="xAxis", colOfMean="mean", colOfSD="se", colName="name", xAxis=overallList$xAxis)
+ 			booleanVectorList = buildList(overallList, colNames$colOfXaxis)
+ 			columnsStandard = c(check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment))
+ 	
+ 			if (sum(!is.na(overallList$nBoxDes)) > 0) {
+ 				if (overallList$debug) {ownCat("nBoxplot")}
+ 				columns = c(columnsStandard, check(getVector(overallList$nBoxDes)))
+ 				overallList$overallResult_nBoxDes = getResultDataFrame("nboxplot", overallList$nBoxDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for nBoxplot are 'NA'")
+ 			}
+ 			
+ 			if (sum(!is.na(overallList$boxDes)) > 0) {
+ 				if (overallList$debug) {ownCat("Boxplot")}
+ 				colNames$colOfMean = "value"
+ 				columns = c(columnsStandard, check(getVector(overallList$boxDes)))
+ 				overallList$overallResult_boxDes = getResultDataFrame("boxplot", overallList$boxDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for Boxplot are 'NA'")
+ 			}
+ 			
+ 			if (sum(!is.na(overallList$boxStackDes)) > 0) {
+ 				if (overallList$debug) {ownCat("stackedBoxplot")}
+ 				colNames$colOfMean = check(getVector(overallList$boxStackDes))
+ 				colNames$colOfXaxis = overallList$xAxis
+ 				columns = c(columnsStandard, check(getVector(overallList$boxStackDes)))
+ 				overallList$overallResult_boxStackDes = getResultDataFrame("boxplotStacked", overallList$boxStackDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for stackedBoxplot are 'NA'")
+ 			}
+ 		
+ 			if (sum(!is.na(overallList$boxSpiderDes)) > 0) {
+ 				if (overallList$debug) {ownCat("spider plot")}
+ 				#colNames$colOfMean = check(getVector(overallList$boxSpiderDes))
+ 				colNames$colOfMean = "value"
+ 				colNames$colOfXaxis = overallList$xAxis
+ 				colNames$desNames = overallList$boxSpiderDesName
+ 				columns = c(columnsStandard, check(getVector(overallList$boxSpiderDes)))
+ 				overallList$overallResult_boxSpiderDes = getResultDataFrame("spiderplot", overallList$boxSpiderDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			} else {
+ 				ownCat("All values for spider plot are 'NA'")
+ 			}
+ 
+ 			if (sum(!is.na(overallList$violinBoxDes)) > 0 & overallList$isRatio) {
+ 				if (overallList$debug) {ownCat("violin plot")}
+ 				colNames$colOfMean = "mean"
+ 				colNames$colOfXaxis = "xAxis"
+ 				columns = c(columnsStandard, check(getVector(overallList$violinBoxDes)))
+ 				overallList$overallResult_violinBoxDes = getResultDataFrame("violinplot", overallList$violinBoxDes, overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$debug)
+ 			}
+ 			
+ 			
+ 			if (is.null(overallList$boxStackDes) && is.null(overallList$boxDes) && is.null(overallList$nBoxDes) && is.null(overallList$boxSpiderDes) && is.null(overallList$violinBoxDes)) {
+ 				ownCat("No descriptor set - this run needs to stop!")
+ 				overallList$stoppTheCalculation = TRUE
+ 			}
+ 	}
+ 	return(overallList)
+ }
> 
> getPlotNumber <- function(colNameWichMustBind, descriptorList, diagramTyp) {
+ 	
+ 	if (diagramTyp == "boxplotStacked") {
+ 	
+ 		for (n in names(descriptorList)) {
+ 			if (colNameWichMustBind %in% as.vector(unlist(descriptorList[[n]]))) {
+ 				return(n)
+ 			}
+ 		}
+ 		return(-1)
+ 	} else if (diagramTyp == "spiderplot") {
+ 		return(strsplit(substring(colNameWichMustBind,nchar("value")+1),"\\.")[[1]][1])
+ 	}
+ }
> 
> 
> getResultDataFrame <- function(diagramTyp, descriptorList, iniDataSet, groupBy, colNames, booleanVectorList, debug) {	
+ #############################
+ #	diagramTyp = "spiderplot"
+ #	descriptorList = overallList$boxSpiderDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug
+ #########################	
+ #	diagramTyp = "boxplotStacked"
+ #	descriptorList = overallList$boxStackDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug	
+ #########################
+ #	diagramTyp = "nboxplot"
+ #	descriptorList = overallList$nBoxDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug
+ #########################
+ #	diagramTyp = "violinplot"
+ #	descriptorList = overallList$violinBoxDes
+ #	iniDataSet = overallList$iniDataSet[columns]
+ #	debug = overallList$debug
+ #########################
+ 
+ 
+ 
+ 	debug %debug% "getResultDataFrame()"
+ 	
+ 	descriptor = getVector(descriptorList)
+ 
+ 	if (diagramTyp == "spiderplot") {
+ 		descriptorName <- character()
+ 		for(n in 1:length(descriptorList)){
+ 			lengthVector <- length(descriptorList[[n]][,1])
+ 			descriptorName <- c(descriptorName, paste(rep.int(n, lengthVector),c(1:lengthVector), sep="."))		
+ 		}
+ 	} else {	
+ 		descriptorName = seq(1:length(descriptor))
+ 	}
+ 	
+ 	descriptorName = descriptorName[!is.na(descriptor)]
+ 	descriptor = descriptor[!is.na(descriptor)]
+ 
+ 	
+ 	if (diagramTyp != "boxplot") {
+ 		groupedDataFrame = data.table(iniDataSet)
+ 		#key(groupedDataFrame) = c(groupBy, colNames$xAxis)
+ 		setkeyv(groupedDataFrame,c(groupBy, colNames$xAxis))
+ 	}
+ 	
+ 	if (diagramTyp == "boxplot") {
+ 		groupedDataFrameMean = iniDataSet[groupBy[1]]
+ 		
+ 		groupByReduce = groupBy[groupBy!=groupBy[1]]
+ 		for (n in c(groupByReduce, colNames$xAxis, descriptor)) {
+ 			groupedDataFrameMean = cbind(groupedDataFrameMean, iniDataSet[n])
+ 		}		
+ 	} else {
+ 		groupedDataFrameMean = as.data.frame(groupedDataFrame[, lapply(.SD, mean, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 		#groupedDataFrameMean = as.data.frame(groupedDataFrame[, lapply(colnames(groupedDataFrame), mean, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 	}
+ 	
+ 	if (diagramTyp == "nboxplot" || diagramTyp == "boxplot" || diagramTyp == "spiderplot" || diagramTyp == "violinplot") {
+ 		#colNamesOfTheRest = paste(colNames$colOfMean, seq(1:length(descriptor)), sep="")	
+ 		colNamesOfTheRest = paste(colNames$colOfMean, descriptorName, sep="")	
+ 	} else {
+ 		colNamesOfTheRest = groupedDataFrameMean %allColnamesWithoutThisOnes% c(groupBy, colNames$xAxis)
+ 	}
+ 
+ 	colnames(groupedDataFrameMean) = c(groupBy, colNames$colOfXaxis, colNamesOfTheRest)
+ 	
+ 	if (diagramTyp == "nboxplot") {
+ 		groupedDataFrameSD = as.data.frame(groupedDataFrame[, lapply(.SD, sd, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 		#groupedDataFrameSD = as.data.frame(groupedDataFrame[, lapply(colnames(groupedDataFrame), sd, na.rm=TRUE), by=c(groupBy, colNames$xAxis)])
+ 		colnames(groupedDataFrameSD) = c(groupBy, colNames$colOfXaxis, paste(colNames$colOfSD, descriptorName, sep=""))
+ 	}
+ 	
+ 	booleanVector = getBooleanVectorForFilterValues(groupedDataFrameMean, booleanVectorList)
+ 	
+ 	if (diagramTyp == "nboxplot") {
+ 		iniDataSet = merge(sort=FALSE, groupedDataFrameMean[booleanVector, ], groupedDataFrameSD[booleanVector, ], by = c(groupBy, colNames$colOfXaxis))
+ 		overallResult = buildRowName(iniDataSet, groupBy)
+ 		
+ 	} else	if (diagramTyp == "boxplot" || diagramTyp == "violinplot") {
+ 		#|| diagramTyp == "spiderplot"
+ 		iniDataSet = groupedDataFrameMean[booleanVector, ]
+ 		overallResult = buildRowName(iniDataSet, groupBy)
+ 	} else if (diagramTyp == "spiderplot") {
+ 		iniDataSet = groupedDataFrameMean[booleanVector, ]
+ 		buildRowNameDataSet = buildRowName(iniDataSet, groupBy)
+ 		temp = data.frame()
+ 
+ 		
+ 		for (colNameWichMustBind in buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")) {
+ 			plot = getPlotNumber(colNameWichMustBind, descriptorList, diagramTyp)
+ 			
+ 			colNameWichMustBindReNamed <- reNameSpin(colNameWichMustBind, colNames)
+ 		
+ 			if (is.null(buildRowNameDataSet$primaerTreatment)) {	
+ 				temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot=plot))			
+ 			} else {
+ 				temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), primaerTreatment=buildRowNameDataSet[, "primaerTreatment"], values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot = plot))			
+ 			}
+ 		}
+ 		overallResult = temp
+ 		
+ 	} else {
+ 		iniDataSet <- groupedDataFrameMean[booleanVector, ]	
+ 		buildRowNameDataSet <- buildRowName(iniDataSet, groupBy)
+ 		temp = data.frame()
+ 		
+ 		for (colNameWichMustBind in buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")) {
+ 			plot = getPlotNumber(colNameWichMustBind, descriptorList, diagramTyp)
+ 		
+ 			if (plot!=-1) {
+ 				colNameWichMustBindReNamed = reNameHist(colNameWichMustBind)
+ 		
+ 				if (is.null(buildRowNameDataSet$primaerTreatment)) {	
+ 					temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot=plot))			
+ 				} else {
+ 					temp = rbind(temp, data.frame(hist=rep.int(x=colNameWichMustBindReNamed, times=length(buildRowNameDataSet[, colNameWichMustBind])), primaerTreatment=buildRowNameDataSet[, "primaerTreatment"], values=buildRowNameDataSet[, colNameWichMustBind], xAxis=buildRowNameDataSet[, colNames$colOfXaxis], name=buildRowNameDataSet[, colNames$colName], plot = plot))			
+ 				}
+ 			}
+ 		}
+ 		overallResult = temp		
+ 	}
+ 	return(overallResult)
+ }
> 
> setDefaultAxisNames <- function(overallList) {
+ 	overallList$debug %debug% "setDefaultAxisNames()"
+ 	
+ 	if (overallList$xAxisName == "none") {
+ 		overallList$xAxisName = gsub('[[:punct:]]', " ", overallList$xAxis)
+ 	}
+ #	if (overallList$yAxisName == "none") {
+ #		overallList$yAxisName = gsub('[[:punct:]]', " ", overallList$descriptor)
+ #	}
+ 	return(overallList)
+ }
> 
> setColorListHist <- function(descriptorList) {
+ 	interval = seq(0.05, 0.95, by=0.1)
+ 	intervalSat = rep.int(c(0.8, 1.0), 5)
+ 	intervalFluo = seq(0, 0.166666666666, by=0.0185185185)
+ 
+ 	interval20 = seq(0.025, 0.975, by=0.05)
+ 	intervalSat20 = 1 #rep.int(c(0.8, 1.0), 10)
+ 	intervalFluo20 = seq(0, 0.166666666666, by=0.008771929789)
+ 	
+ 	if (length(grep("fluo", getVector(descriptorList), ignore.case=TRUE)) > 0) { #rot			
+ 		colorList = as.list(hsv(h=c(rev(intervalFluo), rev(intervalFluo20)), s=c(intervalSat, intervalSat20), v=1))
+ 	} else 
+ 	if (length(grep("phenol", getVector(descriptorList), ignore.case=TRUE)) > 0) { #gelb
+ 		colorList = as.list(hsv(h=c(intervalFluo, intervalFluo20), s=c(intervalSat, intervalSat20), v=1))
+ 	} else 
+ 	if (length(grep("vis", getVector(descriptorList), ignore.case=TRUE)) > 0) {
+ 		colorList = as.list(hsv(h=c(interval, interval20), s=1, v=c(intervalSat, intervalSat20)))
+ 	} else 
+ 	if (length(grep("nir", getVector(descriptorList), ignore.case=TRUE)) > 0) {
+ 		colorList = as.list(rgb(c(rev(interval), rev(interval20)), c(rev(interval), rev(interval20)), c(rev(interval),rev(interval20)), max = 1))		
+ 	} else {
+ 		return(list(0))
+ 	}
+ 	names(colorList) = c(
+ 		"0..25", "25..51", "51..76", "76..102", "102..127", 
+ 		"127..153", "153..178", "178..204", "204..229", "229..255", 
+ 		"0..12", "12..25", "25..38", "38..51", "51..63", "63..76", "76..89", 
+ 		"89..102", "102..114", "114..127", "127..140", "140..153", "153..165", 
+ 		"165..178", "178..191", "191..204", "204..216", "216..229", "229..242", 
+ 		"242..255")
+ 	return(colorList)
+ }
> 
> setColorList <- function(diagramTyp, descriptorList, overallResult, isGray) {
+ ######################
+ #diagramTyp <- "spiderplot"
+ #descriptorList <- overallList$boxSpiderDes
+ #overallResult <- overallList$overallResult_boxSpiderDes
+ #isGray <- overallList$isGray
+ ######################	
+ 		
+ 	if (!as.logical(isGray)) {
+ 		#colorVector = c(brewer.pal(8, "Set1"))
+ 		colorVector = c(brewer.pal(7, "Dark2"))
+ 		#colorVector = c(brewer.pal(11, "Spectral")) # sometimes very pale colors
+ 	} else {
+ 		colorVector = c(brewer.pal(9, "Greys"))
+ 	}
+ 	
+ 	colorList = list()
+ 	if (diagramTyp == "nboxplot" || diagramTyp == "boxplot" || diagramTyp == "violinplot") {
+ 		for (n in names(descriptorList)) {
+ 			#if (!is.na(descriptorList[[n]])) {
+ 			if (sum(!is.na(descriptorList[[n]])) > 0) {
+ 				colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$name)))
+ 			} else {
+ 				#ownCat("All values are 'NA'")
+ 			}
+ 		}
+ 	} else if (diagramTyp == "spiderplot") {
+ 		for (n in names(descriptorList)) {
+ 			#if (!is.na(descriptorList[[n]])) {
+ 			if (sum(!is.na(descriptorList[[n]])) > 0) {
+ 				#colorList[[n]] = colorRampPalette(colorVector)(length(descriptorList[[n]][,1]))
+ 				#colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$name)))
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {	
+ 					colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$primaerTreatment)))	
+ 				} else {
+ 					colorList[[n]] = colorRampPalette(colorVector)(length(unique(overallResult$name)))
+ 				}
+ 				##################### Anpassen huier werden noch zuviel Farbwerte ausgelesen ###############
+ 			} else {
+ 				#ownCat("All values are 'NA'")
+ 			}
+ 		}
+ 	} else {
+ 		for (n in names(descriptorList)) {
+ 			if (sum(!is.na(descriptorList[[n]])) > 0) {
+ 				colorList[[n]] = setColorListHist(descriptorList[n])
+ 			} else {
+ 				#ownCat("All values are 'NA'")
+ 			}
+ 		}
+ 	}
+ 	return(colorList)
+ }
> 
> setColor <- function(overallList) {
+ 	overallList$debug %debug% "setColor()"  
+ 	overallList$color_nBox = setColorList("nboxplot", overallList$nBoxDes, overallList$overallResult_nBoxDes, overallList$isGray)
+ 	overallList$color_box = setColorList("boxplot", overallList$boxDes, overallList$overallResult_boxDes, overallList$isGray)
+ 	overallList$color_boxStack = setColorList("boxplotStacked", overallList$boxStackDes, overallList$overallResult_boxStackDes, overallList$isGray)
+ 	overallList$color_spider = setColorList("spiderplot", overallList$boxSpiderDes, overallList$overallResult_boxSpiderDes, overallList$isGray)
+ 	#overallList$color_violin = setColorList("violinplot", overallList$violinBoxDes, overallList$overallResult_violinBoxDes, overallList$isGray)
+ 	return(overallList)
+ }
> 
> normalizeToHundredPercent =  function(whichRows, overallResult) {
+ 	return(t(apply(overallResult[whichRows, ], 1, function(x, y) {(100*x)/y}, y=colSums(overallResult[whichRows, ]))))
+ }
> 
> renameYForSubsection <- function(label) {
+ 	
+ 	label <- gsub("\\\\% ","percent", label)
+ 	label <- gsub("\\^2","$^2$", label)
+ 	
+ 	return(label)
+ }
> 
> writeLatexFile <- function(fileNameLatexFile, fileNameImageFile="", o="", ylabel="", subsectionDepth=1) { #insertSubsections=FALSE,
+ 	fileNameImageFile = preprocessingOfValues(fileNameImageFile, FALSE, "_")
+ 	fileNameLatexFile = preprocessingOfValues(fileNameLatexFile, FALSE, "_")
+ 	o = gsub('[[:punct:]]', "_", o)
+ 	
+ 	latexText <- ""
+ 	if (nchar(ylabel) > 0) {
+ 		ylabel <- renameYForSubsection(ylabel)
+ 		if (subsectionDepth == 1) {
+ 			latexText = paste(latexText, "\\subsection{",ylabel,"}\n", sep="" )
+ 		} else if (subsectionDepth == 2) {
+ 			latexText = paste(latexText, "\\subsubsection{",ylabel,"}\n", sep="" )
+ 		} else if (subsectionDepth == 3) {
+ 			latexText = paste(latexText, "\\subsubsubsection{",ylabel,"}\n", sep="" )
+ 		}
+ 	}
+ 	
+ #	if (insertSubsections & nchar(ylabel) > 0) {
+ #		ylabel <- renameYForAppendix(ylabel)
+ #		latexText = paste(latexText, "\\subsection{",ylabel,"}\n", sep="" )
+ #	}
+ 	latexText = paste(latexText,
+ 					 "\\loadImage{", 
+ 					   ifelse(fileNameImageFile == "", fileNameLatexFile, fileNameImageFile), 
+ 					  #ifelse(o == "", "", paste("_", o , sep="")), 
+ 					   ifelse(o == "", "", o), 
+ 					   ".pdf}", sep="")
+ 	
+ 	write(x=latexText, append=TRUE, file=paste(fileNameLatexFile, "tex", sep="."))
+ }
> 
> 
> writeLatexTable <- function(fileNameLatexFile, columnName=NULL, value=NULL, columnWidth=NULL) {
+ 	latexText <- ""
+ 
+ 	if (length(columnName) > 0) {
+ 		#latexText <- "\\begin{tabular}{|"
+ 		latexText <- "\\begin{longtable}{|"
+ 		
+ 		for(n in 1:length(columnName)) {
+ 			latexText <- paste(latexText, "p{",columnWidth[n],"}|", sep="")
+ 		}
+ 		latexText <- paste(latexText, "}", sep="")
+ 		
+ 		#This is the header for the first page of the table... --> endfirsthead
+ 		#This is the header for the remaining page(s) of the table... --> endhead
+ 		for(n in 1:2) {
+ 			
+ 			latexText <- paste(latexText, " \\hline ", sep="")
+ 			for(n in 1:length(columnName)) {
+ 				latexText <- paste(latexText, "{\\textbf{",
+ 						parseString2Latex(renameFilterOutput(as.character(columnName[n]))),
+ 					"}}", sep="")
+ 				if (n != length(columnName)) {
+ 					latexText <- paste(latexText, "& ", sep=" ")
+ 				}
+ 			}
+ 			latexText <- paste(latexText,
+ 								"\\tabularnewline",
+ 								"\\hline",
+ 								"\\hline", sep=" ")
+ 			if (n == 1) {
+ 				latexText <- paste(latexText, "\\endfirsthead", sep=" ")
+ 			} else {
+ 				latexText <- paste(latexText, "\\endhead", sep=" ")
+ 			}
+ 		}
+ 		
+ 		#This is the footer for all pages except the last page of the table...		
+ 		latexText <- paste(latexText, "\\multicolumn{", length(columnName), "}{l}{{Continued on Next Page\\ldots}} ",
+ 							"\\tabularnewline ",
+ 							"\\endfoot ", sep="")
+ 		
+ 		#This is the footer for the last page of the table...
+ 		latexText <- paste(latexText,"\\hline \\hline \\endlastfoot", sep=" ")
+ 		
+ 	} else if (length(value) > 0){
+ 		if (!is.null(value)) {
+ 			for(n in 1:length(value)) {
+ 				latexText <- paste(latexText, parseString2Latex(renameFilterOutput(as.character(value[n]))))
+ 				if (n != length(value)) {
+ 					latexText <- paste(latexText, " &", sep="")
+ 				}
+ 			}
+ 			latexText <- paste(latexText, "\\tabularnewline \\hline")
+ 		}
+ 	} else {
+ 		latexText <- paste(latexText, 
+ #						"\\hline",
+ #						"\\hline",
+ #						"\\end{tabular}", sep=" ")
+ 						"\\end{longtable}", sep=" ")
+ 	}
+ 	
+ 	if (latexText != "") {
+ 		write(x=latexText, append=TRUE, file=paste(fileNameLatexFile, "tex", sep="."))
+ 	}	
+ }
> 
> 
> saveImageFile <- function(overallList, plot, filename, extraString="") {
+ 	filename = preprocessingOfValues(paste(filename, extraString, sep=""), FALSE, replaceString = "_")	
+ 	
+ 	#ggsave (filename=paste(paste(filename, runif(1, 0.0, 1.0)), overallList$saveFormat, sep="."), plot = plot, dpi=as.numeric(overallList$dpi), width=8, height=5)
+ 	ggsave (filename=paste(filename, overallList$saveFormat, sep="."), plot = plot, dpi=as.numeric(overallList$dpi), width=8, height=5)
+ 
+ }
> 
> makeDepthBoxplotDiagram <- function(h, overallList) {
+ 	overallList$debug %debug% "makeDepthBoxplotDiagram()"
+ 	overallList$symbolParameter = 15
+ 	
+ 	if (h == 1) {
+ 		openImageFile(overallList)
+ 	}
+ 	par(mar=c(4.1, 4.1, 2.1, 2.1))
+ 	plot.depth(as.matrix(overallList$overallResult), plot.type=h, xlabel=overallList$xAxisName, l.width=12, lp.color=overallList$color)
+ 	
+ 	grid()
+ 	if (h == 1) {
+ 		dev.off()
+ 	}
+ 	if (overallList$appendix) {
+ 		writeLatexFile("appendixImage", overallList$fileName)
+ 	}
+ 	
+ 	return(overallList)
+ }
> 
> CheckIfOneColumnHasOnlyValues <- function(overallResult, descriptor="", diagramTyp="nboxplot") {	
+ 	max = -1	
+ 	for (index in levels(overallResult$name)) {
+ 		if (diagramTyp == "nboxplot" || diagramTyp == "boxplot") {
+ 			temp = sum(!is.na(overallResult$mean[overallResult$name == index]))
+ 		} else {
+ 			boolVec = overallResult$name == index
+ 			temp = sum(!is.na(overallResult[boolVec, descriptor]))
+ 		}
+ 		max = ifelse(temp > max, temp, max)
+ 	}	
+ 	return(ifelse(max == 1, TRUE, FALSE))
+ }
> 
> buildMyStats <- function(values, means, se) {
+ 	means = as.data.frame(as.vector(means))
+ 	colnames(means) = "means"
+ 	
+ 	se = as.data.frame(as.vector(se))
+ 	colnames(se) = "se"
+ 
+ 	return(data.frame(value=values, means=means, se=se))
+ }
> 
> buildMyStats2 <- function(values, means, se, rowName) {
+ 	means = as.data.frame(as.vector(means))
+ 	colnames(means) = "means"
+ 	
+ 	rowName = as.data.frame(as.vector(rowName))
+ 	colnames(rowName) = Name
+ 	
+ 	se = as.data.frame(as.vector(se))
+ 	colnames(se) = "se"
+ 	
+ 	return(data.frame(value=values, means=means, se=se, rowName=rowName))
+ }
> 
> reduceOverallResult <- function(tempOverallList, imagesIndex) {
+ 	tempOverallList$debug %debug% "reduceOverallResult()"
+ 
+ 	workingDataSet = buildDataSet(tempOverallList$overallResult[, 1:2], tempOverallList, c("mean", "se"), imagesIndex)
+ 	colnames(workingDataSet) = c(colnames(workingDataSet)[1:2], "mean", "se")
+ 	return(workingDataSet)	
+ }
> 
> 
> reduceWholeOverallResultToOneValue <- function(tempOverallResult, imagesIndex, debug, diagramTyp="nboxplot") {
+ ####################
+ #debug <- overallList$debug
+ #diagramTyp <- "nboxplot"
+ #####################
+ 	
+ 	
+ 	debug %debug% "reduceWholeOverallResultToOneValue()"
+ 	
+ 	if (diagramTyp == "boxplotstacked" || diagramTyp == "spiderplot") {
+ 		workingDataSet = tempOverallResult[tempOverallResult$plot == imagesIndex, ]
+ 		workingDataSet$hist = factor(workingDataSet$hist, unique(workingDataSet$hist))
+ 	} else {
+ 		colNames = vector()
+ 		if (diagramTyp == "nboxplot" || diagramTyp == "barplot") {
+ 			colNames = c("mean", "se")
+ 		} else if (diagramTyp == "boxplot") {
+ 			colNames = c("value")
+ 		} else if (diagramTyp == "violinplot") {
+ 			colNames = c("mean")
+ 		}
+ 		
+ 		if ("primaerTreatment" %in% colnames(tempOverallResult)) {
+ 			standardColumnName = c("name", "primaerTreatment", "xAxis")
+ 		} else {
+ 			standardColumnName = c("name", "xAxis")
+ 		}
+ 
+ 		if (sum(!(colNames %in% colnames(tempOverallResult)))>0) {
+ 
+ 			workingDataSet = buildDataSet(tempOverallResult[, standardColumnName], tempOverallResult, colNames, imagesIndex, diagramTyp)
+ 			lengthOfNewColumns <- length(colnames(workingDataSet[,-c(1:length(standardColumnName))]))
+ 			
+ #			if (diagramTyp == "spiderplot") {
+ #				if (lengthOfNewColumns > 1) {
+ #					colnames(workingDataSet) = c(standardColumnName, paste(rep.int(colNames,lengthOfNewColumns),1:lengthOfNewColumns, sep=""))
+ #				}else {
+ #					colnames(workingDataSet) = c(standardColumnName, colNames)
+ #				}
+ #			} else {
+ 				colnames(workingDataSet) = c(standardColumnName, colNames)
+ #			}
+ 		
+ #			if (lengthOfNewColumns > 1) {
+ #				colnames(workingDataSet) = c(standardColumnName, paste(rep.int(colNames,lengthOfNewColumns),1:lengthOfNewColumns, sep=""))
+ #			} else {
+ #				colnames(workingDataSet) = c(standardColumnName, colNames)
+ #			}
+ 			
+ 		} else {
+ 			workingDataSet = tempOverallResult
+ 		}
+ 	}
+ 	return(workingDataSet)	
+ }
> 
> newTreatmentNameFunction <- function(seq, n) {
+ 	numberCharAfterSeparate <- 8
+ 	if (nchar(n) > (numberCharAfterSeparate+4)) {
+ 		newTreatmentName <- paste(seq, ". ", substr(n,1,numberCharAfterSeparate), " ...", sep="")
+ 	} else {
+ 		newTreatmentName <- paste(seq, ". ", n, sep="")
+ 	}
+ 	return(newTreatmentName)
+ }
> 
> 
> renameOfTheTreatments <- function(overallList) {
+ 	overallList$debug %debug% "renameOfTheTreatments()"
+ 	
+ 	if (!overallList$appendix) {
+ 		
+ 		#newTreatmentName <- character()
+ 		columnName <- c("Short name", "Full Name")
+ 		
+ 		if (overallList$filterTreatment[1] != "none") {
+ 			seq <- 0;
+ 			FileName <- "conditionsFirstFilter"
+ 			writeLatexTable(FileName, columnName, columnWidth=c("3cm","13cm"))
+ 			for(n in overallList$filterTreatment) {
+ 				seq <- seq+1
+ 				overallList$filterTreatmentRename[[n]] <- newTreatmentNameFunction(seq, n)
+ 				writeLatexTable(FileName, value=c(overallList$filterTreatmentRename[[n]],n))
+ 			}
+ 			writeLatexTable(FileName)
+ 		}
+ 	
+ 		if (overallList$filterSecondTreatment[1] != "none") {
+ 			seq <- 0
+ 			FileName <- "conditionsSecondFilter"
+ 			writeLatexTable(FileName, columnName, columnWidth=c("3cm","13cm"))
+ 			for(n in overallList$filterSecondTreatment) {
+ 				seq <- seq+1
+ 				overallList$secondFilterTreatmentRename[[n]] <- newTreatmentNameFunction(letters[seq], n)
+ 				writeLatexTable(FileName, value=c(overallList$secondFilterTreatmentRename[[n]],n))
+ 			}
+ 			writeLatexTable(FileName)
+ 		}
+ 	}
+ 
+ 	return(overallList)
+ }
> 
> 
> replaceTreatmentNamesOverall <- function(overallList, overallResult) {
+ 	overallList$debug %debug% "replaceTreatmentNamesOverall()"
+ if(!overallList$appendix) {
+ 	if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 		overallResult$name <- replaceTreatmentNames(overallList, overallResult$name, onlySecondTreatment = TRUE)
+ 		overallResult$primaerTreatment <- replaceTreatmentNames(overallList, overallResult$primaerTreatment, onlyFirstTreatment = TRUE)
+ 	} else {
+ 		overallResult$name <- replaceTreatmentNames(overallList, overallResult$name, onlyFirstTreatment = TRUE)
+ 	}
+ }
+ 	return(overallResult)
+ }
> 
> 
> replaceTreatmentNames <- function(overallList, columnWhichShouldReplace, onlyFirstTreatment=FALSE, onlySecondTreatment=FALSE) {
+ ##########
+ #columnWhichShouldReplace <- overallResult$name
+ #onlyFirstTreatment <- TRUE
+ #onlySecondTreatment <- TRUE
+ ##########
+ 	
+ 	
+ 	overallList$debug %debug% "replaceTreatmentNames()"
+ 	
+ 	columnWhichShouldReplace <- as.character(columnWhichShouldReplace)
+ 	
+ 	if (overallList$filterSecondTreatment[1] != "none" & !onlyFirstTreatment & !onlySecondTreatment) {
+ 		for(n in overallList$filterTreatment) {
+ 			for(k in overallList$filterSecondTreatment) {
+ 				columnWhichShouldReplace <- replace(columnWhichShouldReplace, columnWhichShouldReplace==paste(n,"/",k, sep=""), paste(overallList$filterTreatmentRename[[n]],"/", overallList$secondFilterTreatmentRename[[k]], sep=""))
+ 			}
+ 		} 
+ 	} 
+ 	
+ 	if (overallList$filterTreatment[1] != "none" & onlyFirstTreatment) {
+ 		for(n in overallList$filterTreatment) {
+ 			columnWhichShouldReplace <- replace(columnWhichShouldReplace, columnWhichShouldReplace==n, overallList$filterTreatmentRename[[n]])
+ 		}
+ 	}
+ 	
+ 	if (overallList$filterSecondTreatment[1] != "none" & onlySecondTreatment) {
+ 		for(n in overallList$filterSecondTreatment) {
+ 			columnWhichShouldReplace <- replace(columnWhichShouldReplace, columnWhichShouldReplace==n, overallList$secondFilterTreatmentRename[[n]])
+ 		}
+ 	}
+ 	#ownCat(unique(columnWhichShouldReplace))
+ 	return(as.factor(columnWhichShouldReplace))
+ }
> 
> createOuputOverview <- function(typ, actualImage, maxImage, imageName) {
+ 	ownCat(paste("Create ", typ, " ", actualImage, "/", maxImage, ": '",imageName, "'", sep=""))
+ 	
+ }
> 
> parseString2Latex <- function(text) {
+ 
+ 	##text <- gsub("\\", "\\textbackslash ", text)
+ 	text <- gsub("{", "\\{ ", text, fixed=TRUE)
+ 	text <- gsub("}", "\\} ", text, fixed=TRUE)
+ 	text <- gsub("ä", "{\\\"a}", text, fixed=TRUE)
+ 	text <- gsub("ö", "{\\\"o}", text, fixed=TRUE)
+ 	text <- gsub("ü", "{\\\"u}", text, fixed=TRUE)
+ 	text <- gsub("ß", "{\\ss}", text, fixed=TRUE)
+ 	text <- gsub("_", "{\\_}", text, fixed=TRUE)
+ 	text <- gsub("<", "\\textless " , text, fixed=TRUE)
+ 	text <- gsub(">", "\\textgreater ", text, fixed=TRUE)
+ 	text <- gsub("§", "\\S ", text, fixed=TRUE)
+ 	text <- gsub("$", "\\$ ", text, fixed=TRUE)
+ 	text <- gsub("&", "\\& ", text, fixed=TRUE)
+ 	text <- gsub("#", "\\# ", text, fixed=TRUE)
+ 	
+ 	text <- gsub("%", "\\% ", text, fixed=TRUE)
+ 	text <- gsub("~", "\\textasciitilde ", text, fixed=TRUE)
+ 	text <- gsub("€", "\\texteuro ", text, fixed=TRUE)
+ 
+ 	return(text)
+ }
> 
> renameFilterOutput <- function(text) {
+ 	
+ 	text <- gsub("=",": ",text, fixed = TRUE)
+ 	text <- gsub("/", ", ", text, fixed = TRUE)
+ 	text <- gsub("(", " (", text, fixed = TRUE)
+ 	text <- gsub("  ", " ", text, fixed = TRUE)
+ 	
+ 	return(text)
+ }
> 
> renameY <- function(label) {
+ 	
+ 	if (length(grep("\\.\\.",label, ignore.case=TRUE)) > 0){
+ 		label <- sub("\\.\\.", " (",label)
+ 		label <- paste(substring(label,1,nchar(label)-1),")",sep="")
+ 	}
+ 	
+ 	label <- sub("mm\\.2","mm^2",label)	
+ 	label <- sub("percent", "(%)", label)
+ 	label <- sub("pixels", "(px)", label)
+ 	label <- sub("(c p)", "(c/p)", label)
+ 	label <- gsub("_", "-", label)
+ 	label <- sub("(relative pix)", "(relative/px)", label)
+ 	
+ 	label <- gsub("\\."," ",label)
+ 	label <- gsub("\\(\\(","(", label)
+ 	label <- gsub("\\)\\)",")", label)
+ 	return(label)		
+ }
> 
> writeTheData  <- function(overallList, plot, fileName, extraString, writeLatexFileFirstValue="", writeLatexFileSecondValue="", subSectionTitel="", makeOverallImage=FALSE, isAppendix=FALSE, subsectionDepth=1) {
+ 	
+ 	overallList$debug %debug% "writeTheData()"		
+ 
+ 	if (subSectionTitel != "") {
+ 		subSectionTitel <- parseString2Latex(subSectionTitel)
+ 	}
+ 
+ 	saveImageFile(overallList, plot, fileName, extraString)
+ 	if (makeOverallImage) {
+ 		if (subSectionTitel != "") {
+ 			writeLatexFile(writeLatexFileFirstValue, writeLatexFileSecondValue, ylabel=subSectionTitel, subsectionDepth=subsectionDepth)	
+ 		} else {
+ 			writeLatexFile(writeLatexFileFirstValue, writeLatexFileSecondValue)
+ 		}
+ 	} 
+ 	
+ #	else {
+ #		writeLatexFile(fileName, writeLatexFileSecondValue)	
+ #	}
+ 	
+ 	if (isAppendix) {
+ 		if (subSectionTitel != "") {
+ 			writeLatexFile("appendixImage", fileName, extraString, ylabel=subSectionTitel, subsectionDepth=subsectionDepth)
+ 		} else {
+ 			writeLatexFile("appendixImage", fileName, extraString)
+ 		}
+ 	}
+ }
> 
> loadLibs <- function(installAndUpdate = FALSE) {
+ 	libraries  <- c(
+ 		  "Cairo", "RColorBrewer", "data.table", "ggplot2",
+ 		 "fmsb", "methods", "grid", "snow", "snowfall") #, "mvoutlier")
+ 	loadInstallAndUpdatePackages(libraries, installAndUpdate, installAndUpdate, FALSE)
+ }
> 
> parMakeLinearDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, diagramTypSave="nboxplot") {
+ 
+ ########
+ #overallResult <- overallList$overallResult_nBoxDes
+ #overallDescriptor <- overallList$nBoxDes
+ #overallColor <- overallList$color_nBox
+ #overallDesName <-overallList$nBoxDesName
+ #overallFileName <- overallList$imageFileNames_nBoxplots
+ #diagramTypSave="nboxplot"
+ #imagesIndex <- "1"
+ #############
+ 
+ 	overallList$debug %debug% "parMakeLinearDiagram()"	
+ 	
+ 	#tempOverallResult =  na.omit(overallResult)
+ 
+ 	tempOverallResult =  overallResult	
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		if (!is.na(overallDescriptor[[imagesIndex]])) {
+ 			createOuputOverview("line plot", imagesIndex, length(names(overallDescriptor)),  overallDesName[[imagesIndex]])
+ 			overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "nboxplot")
+ 			overallResult = overallResult[!is.na(overallResult$mean), ]	#first all values where "mean" != NA are taken
+ 			overallResult[is.na(overallResult)] = 0 #second if there are values where the se are NA (because only one Value are there) -> the se are set to 0
+ 
+ 			overallResult <-  replaceTreatmentNamesOverall(overallList, overallResult)	
+ 			
+ 			if (innerThreaded)
+ 				sfClusterCall(makeLinearDiagram, 
+ 					overallResult, overallDescriptor, overallColor, 
+ 					overallDesName, overallFileName, overallList,
+ 					imagesIndex, 
+ 					stopOnError=FALSE)
+ 			else
+ 				makeLinearDiagram(
+ 					overallResult, overallDescriptor, overallColor, 
+ 					overallDesName, overallFileName, overallList,
+ 					imagesIndex)
+ 		}
+ 	}
+ }
> 
> makeLinearDiagram <- function(
+ 	overallResult, overallDescriptor, overallColor, overallDesName, 
+ 	overallFileName, overallList, imagesIndex) {
+ 
+ 
+ #  c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")	
+ #	overallList$stress.Start <- c(10,20,30,37)
+ #	overallList$stress.End <- c(13, 23, 33, 40)
+ #	overallList$stress.Typ <- c("001","001","004", "003")
+ #	overallList$stress.Label <- c(-1, -1, -1, -1)
+ #	
+ #	overallList$stress.Start <- c(10,20,30)
+ #	overallList$stress.End <- c(13, 23,33)
+ #	overallList$stress.Typ <- c("002","001","002")
+ #	overallList$stress.Label <- c(-1, -1,-1)
+ 
+ 	overallList$debug %debug% "makeLinearDiagram()"	
+ 	ylabelForAppendix <- ""
+   	diagramTypSave <- "nboxplot"
+ 	color <- overallColor[[imagesIndex]]
+ 	stressArea <- data.frame()
+ 	
+ 	if(overallList$stress.Start != -1) {
+ 		stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$mean, diagramTypSave, overallResult$se)
+ 		color <- addColorForStressPhaseAndOther(stressArea, color, diagramTypSave)
+ 	}
+   
+ 	if (length(overallResult[, 1]) > 0) {
+ 	
+ 		if (!CheckIfOneColumnHasOnlyValues(overallResult)) {
+ 	
+ 			plot <-	ggplot() 
+ 					
+ 			if(length(stressArea) >0) {
+ 				plot <- plot + 
+ 						geom_rect(data=stressArea, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=typ)) +
+ 						#geom_text(data=stressArea, aes(x=xmin, y=(ymax-ymax*0.15), label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 						geom_text(data=stressArea, aes(x=xmin, y=ymin, label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 				
+ 			}	
+ 			
+ 			if (length(grep("%/day",overallDesName[[imagesIndex]], ignore.case=TRUE)) > 0 || overallList$isRatio || length(grep("relative",overallDesName[[imagesIndex]], ignore.case=TRUE)) > 0 || length(grep("average",overallDesName[[imagesIndex]], ignore.case=TRUE)) > 0) {
+ 				plot <- plot + geom_smooth(data=overallResult, aes(x=xAxis, y=mean, shape=name, ymin=mean-se, ymax=mean+se, colour=name, fill=name), method="loess", stat="smooth", alpha=0.1)
+ 				#plot <- plot + geom_ribbon(aes(ymin=mean-se, ymax=mean+se, fill=name), alpha=0.1)
+ 			} else {
+ 				plot <- plot + geom_ribbon(data=overallResult, aes(x=xAxis, y=mean, shape=name, ymin=mean-se, ymax=mean+se, fill=name), stat="identity", alpha=0.1) +
+ 						geom_line(data=overallResult, aes(x=xAxis, y=mean, color=name), alpha=0.2)
+ 			}
+ 					
+ 			plot <- plot +	
+ 					geom_point(data=overallResult, aes(x=xAxis, y=mean, color=name), size=3) +
+ #							ownCat("drinne")
+ #							ownCat(overallResult$xAxis)
+ #							ownCat(min(as.numeric(as.character(overallResult$xAxis))))
+ #							ownCat(max(as.numeric(as.character(overallResult$xAxis))))
+ #							plot <-  plot + 
+ 					scale_x_continuous(name=overallList$xAxisName, minor_breaks = min(as.numeric(as.character(overallResult$xAxis))):max(as.numeric(as.character(overallResult$xAxis))))					
+ 					
+ 					if (overallList$appendix) {
+ 						ylabelForAppendix <- renameY(overallDesName[[imagesIndex]])
+ 						plot <- plot + ylab(ylabelForAppendix)
+ 					} else {
+ 						plot <- plot + ylab(overallDesName[[imagesIndex]])
+ 					}
+ 					
+ 								
+ 				plot <- plot +
+ 					scale_fill_manual(values = color, guide="none") +
+ 					scale_colour_manual(values= overallColor[[imagesIndex]]) +
+ 					scale_shape_manual(values = c(1:length(overallColor[[imagesIndex]]))) +
+ 					theme_bw()
+ 					
+ 			if(overallList$secondTreatment == "none") {
+ 				plot <- plot +
+ 						opts(legend.position = "none")
+ 			} else {
+ 				plot <- plot +
+ 						opts(legend.position = "right")
+ 			}	
+ 			plot <- plot +	
+ 					opts(axis.title.x = theme_text(face="bold", size=11), 
+ 							axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 							#panel.grid.major = theme_blank(), # switch off major gridlines
+ 							#panel.grid.minor = theme_blank(), # switch off minor gridlines
+ 							#legend.position = "right", # manually position the legend (numbers being from 0, 0 at bottom left of whole plot to 1, 1 at top right)
+ 							legend.title = theme_blank(), # switch off the legend title						
+ 							legend.key.size = unit(1.5, "lines"), 
+ 							legend.key = theme_blank(), # switch off the rectangle around symbols in the legend
+ 							panel.border = theme_rect(colour="Grey", size=0.1)
+ 					) 
+ 					#+ guides(colour = guide_legend("none"))
+ 			
+ 			if (length(overallColor[[imagesIndex]]) > 18 & length(overallColor[[imagesIndex]]) < 31) {
+ 				plot = plot + opts(legend.text = theme_text(size=6),
+ 								   legend.key.size = unit(0.7, "lines"),
+ 								   strip.text.x = theme_text(size=6)
+ 									)
+ 			} else if (length(overallColor[[imagesIndex]]) >= 31) {
+ 				plot = plot + opts(legend.text = theme_text(size=4),
+ 								   legend.key.size = unit(0.4, "lines"),
+ 								   strip.text.x = theme_text(size=4)
+ 				)
+ 			} else {
+ 				plot = plot + opts(legend.text = theme_text(size=11),
+ 								   strip.text.x = theme_text(size=11))
+ 			}
+ 			
+ 			#Überlegen ob das sinn macht!!
+ 			#if (length(unique(overallResult$name)) > 18) {
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 					plot = plot + facet_wrap(~ primaerTreatment)
+ 				} else {
+ 					plot = plot + facet_wrap(~ name)
+ 				} 
+ 			#}
+ 								
+ 		#	print(plot)
+ 
+ ##!# nicht löschen, ist die interpolation (alles in dieser if Abfrage mit #!# makiert)
+ ##!#				newCoords = seq(min(overallList$filterXaxis, na.rm=TRUE), max(overallList$filterXaxis, na.rm=TRUE), 1)
+ ##!#				newValue = approx(overallList$filterXaxis, overallList$overallResult[y, ], xout=newCoords, method="linear")
+ ##!#				
+ ##!#				naVector = is.na(overallList$overallResult[y, ])
+ ##!#				overallResultWithNaValues = overallList$overallResult[y, ]
+ ##!#				overallList$overallResult[y, naVector] = newValue$y[overallList$filterXaxis[naVector]]
+ #				
+ #				if (firstPlot) {
+ #					firstPlot = FALSE
+ ##!#				plot(overallList$filterXaxis, overallList$overallResult[y, ], main="", type="c", xlab=overallList$xAxisName, col=overallList$color[y], ylab=overallList$yAxisName, pch=y, lty=1, lwd=3, ylim=c(min(overallList$overallResult, na.rm=TRUE), max(overallList$overallResult, na.rm=TRUE)))
+ #					plot(overallList$filterXaxis, overallList$overallResult[y, ], main="", type="b", xlab=overallList$xAxisName, col=overallList$color[y], ylab=overallList$yAxisName, pch=y, lty=1, lwd=3, ylim=c(min(overallList$overallResult, na.rm=TRUE), max(overallList$overallResult, na.rm=TRUE)))
+ #				} else {
+ ##!#				points(overallList$filterXaxis, overallList$overallResult[y, ], type="c", col=overallList$color[y], pch=y, lty=1, lwd=3 )	
+ #					points(overallList$filterXaxis, overallList$overallResult[y, ], type="b", col=overallList$color[y], pch=y, lty=1, lwd=3 )
+ #				}
+ ##!#				points(overallList$filterXaxis, overallResultWithNaValues, type="p", col=overallList$color[y], pch=y, lty=1, lwd=3 )
+ #			} 
+ 
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave, isAppendix=overallList$appendix, subSectionTitel=ylabelForAppendix, subsectionDepth=1)
+ 		} else {
+ 			ownCat("Only one column has values, create barplot!")
+ 	
+ 			day = overallResult$xAxis[!is.na(overallResult$mean)][1]
+ 			tempXaxisName = overallList$xAxisName
+ 			overallList$xAxisName = paste(overallList$xAxisName, day)
+ 			#overallList$overallResult = overallList$overallResult[!is.na(overallList$overallResult$mean), ]
+ 			makeBarDiagram(overallResult, overallDescriptor[imagesIndex], overallColor[imagesIndex], overallDesName[imagesIndex], overallFileName[imagesIndex], overallList, TRUE, diagramTypSave)
+ 			overallList$xAxisName = tempXaxisName
+ 		}
+ 	}
+ }
> 
> getColor <- function(overallColorIndex, overallResult) {
+ 	input = as.vector(unique(overallResult$hist))
+ 	
+ 	color = vector()
+ 	for (n in input) {
+ 		color = c(color, overallColorIndex[[n]])
+ 	}
+ 	return(color)
+ }
> 
> 
> plotStackedImage <- function(overallList, overallResult, title = "", makeOverallImage = FALSE, legende=TRUE, minor_breaks=TRUE, overallColor, overallDesName, imagesIndex, overallFileName) {
+ #####
+ #makeOverallImage <- TRUE
+ #legende <- TRUE
+ #minor_breaks <- FALSE
+ #overallResult <- plotThisValues
+ #positionType <- overallList$stackedBarOptions$typOfGeomBar[2]
+ #title <- ""
+ #####
+ 
+ 
+ #makeStress <- FALSE
+ 
+ 
+ #  c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")	
+ #	overallList$stress.Start <- c(10,20,30,37)
+ #	overallList$stress.End <- c(13, 23, 33, 40)
+ #	overallList$stress.Typ <- c("001","001","004", "003")
+ #	overallList$stress.Label <- c(-1, -1, -1, -1)
+ #	
+ #	overallList$stress.Start <- c(10,20,30)
+ #	overallList$stress.End <- c(13, 23,33)
+ #	overallList$stress.Typ <- c("002","001","002")
+ #	overallList$stress.Label <- c(-1, -1,-1)
+ 
+ 
+ 	overallList$debug %debug% "plotStackedImage()"	
+ 	
+ 	
+ 	
+ 	if (length(overallResult[, 1]) > 0) {
+ 			
+ 		if (length(overallList$stackedBarOptions$typOfGeomBar) == 0) {
+ 			overallList$stackedBarOptions$typOfGeomBar = c("fill")
+ 		}
+ 		
+ 		if ("primaerTreatment" %in% colnames(overallResult)) {
+ 			overallResult$primaerTreatment <-  replaceTreatmentNames(overallList, overallResult$primaerTreatment, TRUE)
+ 		} else {
+ 			overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name, TRUE)
+ 		}
+ 		
+ 		for (positionType in overallList$stackedBarOptions$typOfGeomBar) {			
+ 			makeStress <- TRUE
+ 			stressArea <- data.frame()	
+ 			colorWithoutStress <- getColor(overallColor[[imagesIndex]], overallResult)
+ 			if(positionType == "stack") {
+ 				makeStress <- FALSE
+ 			}
+ 			
+ 			if(overallList$stress.Start != -1 && positionType != "fill" && makeStress) {
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {
+ 					stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$values, "boxplotstacked", positionType, overallResult[, c("xAxis", "primaerTreatment")])
+ 				} else {
+ 					stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$values, "boxplotstacked", positionType, overallResult[, c("xAxis", "name")])
+ 				}
+ 				color <- addColorForStressPhaseAndOther(stressArea, colorWithoutStress, positionType)
+ 			}
+ #			print(stressArea)
+ #			print(overallList$stress.Start)
+ 			plot <- ggplot()
+ 			
+ 			if(length(stressArea) >0) {
+ 				plot <- plot + 
+ 						geom_rect(data=stressArea, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=typ), guides="none") +
+ 						geom_text(data=stressArea, aes(x=xmin, y=(ymax-ymax*0.15), label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 				
+ 			}	
+ 	
+ 				if (positionType == "dodge") {				
+ 					plot <- plot +
+ 							geom_line(data= overallResult, aes(x=xAxis, y=values, colour=hist), position="identity") + 
+ 							#scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 							#scale_colour_manual(values= getColor(overallColor[[imagesIndex]], overallResult))
+ 							scale_colour_manual(values= colorWithoutStress)
+ 					
+ 				} else {
+ 					plot <- plot +
+ 							geom_bar(data = overallResult, aes(x=xAxis, y=values, fill=hist), stat="identity", position = positionType)
+ 							
+ 				}
+ 								
+ 				if (positionType == "dodge" || positionType == "stack") {
+ 					name <- sub("%", "px", overallDesName[[imagesIndex]])
+ 				} else {
+ 					name <- sub("(zoom corrected) ", "", overallDesName[[imagesIndex]])
+ 				}
+ 
+ 					plot <- plot + 
+ 						   ylab(name) 
+ 					#coord_cartesian(ylim=c(0, 1)) +
+ 			
+ 			if (minor_breaks) {
+ 				plot = plot + scale_x_continuous(name=overallList$xAxisName, minor_breaks = min(overallResult$xAxis):max(overallResult$xAxis))
+ 			} else {
+ 				plot <- plot + xlab(overallList$xAxisName)
+ 			}
+ 					
+ 			if(positionType == "dodge" && length(stressArea) >0) {
+ 				plot <- plot +
+ 						scale_fill_manual(values = color[!(color %in% colorWithoutStress)], name="", labels = c(unique(as.character(stressArea$label))), guide="none")
+ 			} else if(positionType == "stack" && length(stressArea) >0) {
+ #				if(length(stressArea) >0) {
+ 					plot <- plot + 
+ 							scale_fill_manual(values = color, name="", labels = c(unique(as.character(stressArea$label)),unique(as.character(overallResult$hist))))
+ #				} else {
+ #					plot <- plot +
+ #						scale_fill_manual(values = colorWithoutStress, name="")
+ #				}
+ 			} else {
+ 				plot <- plot +
+ 					scale_fill_manual(values = colorWithoutStress, name="")
+ 			}
+ 				#	scale_fill_manual(values = color, name="") +
+ 				#	scale_color_manual(value=c("red", "blue")) +
+ 					#scale_fill_manual(values = getColor(overallColor[[imagesIndex]], overallResult), name="") +
+ 			plot <- plot +
+ 					theme_bw() +
+ 					opts(axis.title.x = theme_text(face="bold", size=11), 
+ 							axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 							#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), 
+ 							#panel.background = theme_rect(linetype = "dotted"), 
+ 							panel.border = theme_rect(colour="Grey", size=0.1), 
+ 							strip.background = theme_rect(colour=NA)
+ 	#						plot.title = theme_text(size=10), 
+ 	#						plot.title = theme_rect(colour="Pink", size=0.1), 
+ 					) 
+ 			
+ 			if (!legende) {
+ 				plot = plot + opts(legend.position="none")
+ 			} else {
+ 				plot = plot + opts(legend.position="right", 
+ 									legend.title = theme_blank(), 
+ 									legend.text = theme_text(size=11), 
+ 									legend.key = theme_blank())
+ 			}
+ 			
+ 			if (title != "") {
+ 				plot = plot + opts(title = title)
+ 			}
+ 			
+ 			if (!minor_breaks) {
+ 				plot = plot + opts(panel.grid.minor = theme_blank())
+ 			}
+ 			
+ 			if (positionType == "fill") {
+ 				plot = plot + scale_y_continuous(labels=seq(0, 100, 20), breaks=seq(0, 1, 0.2))
+ 			}
+ 			
+ 			if (makeOverallImage) {
+ 				#plot = plot + facet_wrap(~ name, drop=TRUE)
+ 				#plot = plot + facet_wrap(~ name)
+ 				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 					plot = plot + facet_wrap(~ primaerTreatment)
+ 				} else {
+ 					plot = plot + facet_wrap(~ name)
+ 				}
+ 			}
+ 			
+ 			#print(plot)
+ 			
+ 			subtitle <- ""
+ 			if (positionType == overallList$stackedBarOptions$typOfGeomBar[1] || length(overallList$stackedBarOptions$typOfGeomBar) == 1) {
+ 				subtitle <- title
+ 			}
+ 			
+ 			
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], paste("overall", title, positionType, sep=""), paste(overallFileName[[imagesIndex]], "stackedOverallImage", sep=""), paste(overallFileName[[imagesIndex]], "overall", title, positionType, sep=""), subtitle, makeOverallImage,subsectionDepth=2)
+ 			
+ #			saveImageFile(overallList, plot, overallFileName[[imagesIndex]], paste("overall", title, positionType, sep=""))
+ #			if (makeOverallImage) {
+ #				if (title != "") {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "stackedOverallImage", sep=""), paste(overallFileName[[imagesIndex]], "overall", title, positionType, sep=""), TRUE, title)	
+ #				} else {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "stackedOverallImage", sep=""), paste(overallFileName[[imagesIndex]], "overall", title, positionType, sep=""))
+ #				}
+ #			} else {
+ #				writeLatexFile(overallFileName[[imagesIndex]], paste(overallFileName[[imagesIndex]], "overall", positionType, title, sep="_"))	
+ #			}			
+ 		}
+ 	}
+ }
> 
> 
> 
> 
> PreWorkForMakeBigOverallImage <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, imagesIndex) {
+ #####
+ #value <- overallList$filterSecondTreatment[1]
+ #####	
+ 	overallList$debug %debug% "PreWorkForMakeBigOverallImage()"	
+ 		
+ 	groupBy = groupByFunction(list(overallList$treatment, overallList$secondTreatment))
+ 	if (length(groupBy) == 0 || length(groupBy) == 1) {
+ 		plotStackedImage(overallList = overallList, overallResult = overallResult, makeOverallImage = TRUE, legende=TRUE, minor_breaks=FALSE, overallColor = overallColor, overallDesName = overallDesName, imagesIndex= imagesIndex, overallFileName =overallFileName)
+ 	} else {
+ 		for (value in overallList$filterSecondTreatment) { 
+ 			title = overallList$secondFilterTreatmentRename[[value]]
+ 			#ownCat(title)
+ 			#plottedName = overallList$filterTreatment %contactAllWithAll% value
+ 			#booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = plottedName))
+ 			booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = value))
+ 			plotThisValues = overallResult[booleanVector, ]
+ 			#overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name)
+ 		#	plotThisValues = reNameColumn(plotThisValues, "name", "primaerTreatment")
+ 			plotStackedImage(overallList, plotThisValues, title = title, makeOverallImage = TRUE, legende=TRUE, minor_breaks=FALSE, overallColor = overallColor, overallDesName = overallDesName, imagesIndex=imagesIndex, overallFileName=overallFileName)
+ 		}	 
+ 	}
+ }
> 
> PreWorkForMakeNormalImages <- function(h, overallList) {
+ 	overallList$debug %debug% "PreWorkForMakeNormalImages()"
+ 	stackedImages = unlist(unique(overallList$overallResult["name"]))
+ 	
+ 	for (o in stackedImages) {
+ 		overallList$debug %debug% paste("makeBoxplotStackedDiagram with the descriptor: ", overallList$fileName, o)
+ 		plotThisValues = overallList$overallResult[overallList$overallResult["name"] == o, ]
+ 		plotStackedImage(h, overallList, plotThisValues, o, FALSE, TRUE, TRUE)
+ 	}
+ }
> 
> parMakeBoxplotStackedDiagram <- function(overallResult, overallDescriptor, overallColor, 
+ 		overallDesName, overallFileName, overallList) {
+ 	
+ 	########
+ #overallResult <- overallList$overallResult_boxStackDes
+ #overallDescriptor <- overallList$boxStackDes
+ #overallColor <- overallList$color_boxStack
+ #overallDesName <-overallList$boxStackDesName
+ #overallFileName <- overallList$imageFileNames_StackedPlots
+ #diagramTypSave="boxplotstacked"
+ #imagesIndex <- "1"
+ 	#############	
+ 
+ 	overallList$debug %debug% "makeBoxplotStackedDiagram()"
+ 	#overallResult[is.na(overallResult)] = 0
+ 	tempOverallResult =  na.omit(overallResult)
+ 	#tempOverallResult = overallResult
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		createOuputOverview("stacked barplot", imagesIndex, length(names(overallDescriptor)), overallDesName[[imagesIndex]])
+ 		overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "boxplotstacked")
+ 	
+ 		if (innerThreaded)
+ 			sfClusterCall(makeBoxplotStackedDiagram, 
+ 				overallResult, overallDescriptor, overallColor, 
+ 				overallDesName, overallFileName, overallList, imagesIndex, 
+ 				stopOnError=FALSE)
+ 		else
+ 			makeBoxplotStackedDiagram( 
+ 				overallResult, overallDescriptor, overallColor, 
+ 				overallDesName, overallFileName, overallList, imagesIndex)
+ 		
+ 	}
+ }
> 
> makeBoxplotStackedDiagram <- function(overallResult, overallDescriptor, overallColor, 
+ 		overallDesName, overallFileName, overallList, imagesIndex) {
+ 		
+ 	if (length(overallResult[, 1]) > 0) {
+ 		PreWorkForMakeBigOverallImage(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, imagesIndex)
+ 	}
+ }	
> 
> removeNAsSpider <- function(overallResult, xAxisPosition) {
+ 	overallResultStart <- overallResult[1:xAxisPosition]
+ 	overallResult <- overallResult[(xAxisPosition+1):length(colnames(overallResult))]
+ 	booleanVector <- !apply(overallResult,1,function(x)all(is.na(x)))
+ 	
+ 	return(cbind(overallResultStart[booleanVector,], overallResult[booleanVector,]))
+ }
> 
> 
> openPlotDevice <- function(overallList, fileName, extraString, h) {
+ 	if (h==1) {
+ 		filename = preprocessingOfValues(paste(fileName, extraString, sep=""), FALSE, replaceString = "_")
+ 		Cairo(width=10, height=7, file=paste(filename, overallList$saveFormat, sep="."), type=overallList$saveFormat, bg="transparent", units="in", dpi=as.numeric(overallList$dpi))
+ 	}
+ }
> 
> closePlotDevice <- function(h) {
+ 	if (h==1) {
+ 		dev.off()
+ 	}
+ }
> 
> transferIntoPercentValues <- function(overallResult, xAxisPosition) {
+ 	overallResultCalulate <- overallResult[(xAxisPosition+1):(length(colnames(overallResult))-1)]
+ 	overallResultCalulate <- (overallResultCalulate * 100) / max(overallResultCalulate)
+ 	
+ 	return(data.frame(overallResult[c(1:xAxisPosition)], overallResultCalulate, overallResult[length(colnames(overallResult))]))
+ }
> 
> normalizeEachDescriptor <- function(overallResult) {
+ 
+ 	for(name in unique(overallResult$hist)) {
+ 		overallResult[overallResult$hist == name,]$values <- sapply(overallResult[overallResult$hist == name,]$values,  function(x,y) {(x/y)}, y=max(overallResult[overallResult$hist == name,]$values))
+ 	}
+ 	return(overallResult)
+ }
> 
> parMakeSpiderPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 		overallFileName, options, overallList, diagramTypSave="spiderplot") {
+ 
+ 	################
+ #	overallResult <- overallList$overallResult_boxSpiderDes
+ #	overallDescriptor <- overallList$boxSpiderDes
+ #	overallColor <- overallList$color_spider
+ #	overallDesName <- overallList$boxSpiderDesName
+ #	overallFileName <- overallList$imageFileNames_SpiderPlots
+ #	options <- overallList$spiderOptions
+ #	diagramTypSave <- "spiderplot"
+ #	imagesIndex <- "1"
+ 	####################	
+ 	
+ 	overallList$debug %debug% "makeSpiderPlotDiagram()"
+ 
+ 	tempOverallResult =  na.omit(overallResult)
+ 	
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, diagramTypSave)
+ 		
+ 		if (innerThreaded)
+ 			sfClusterCall(makeSpiderPlotDiagram, 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, 
+ 				overallFileName, options, overallList, diagramTypSave="spiderplot", imagesIndex, 
+ 				stopOnError=FALSE)
+ 		else
+ 			makeSpiderPlotDiagram( 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, 
+ 				overallFileName, options, overallList, diagramTypSave="spiderplot", imagesIndex)
+ 		
+ 	}	
+ }
> 
> makeSpiderPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 		overallFileName, options, overallList, diagramTypSave="spiderplot", imagesIndex) {
+ 		
+ 	createOuputOverview("spider/linerange plot", imagesIndex, length(names(overallDescriptor)), getVector(overallDesName[[imagesIndex]]))
+ 	
+ 	if (length(overallResult[, 1]) > 0) {
+ 		test <- c("side fluo intensity", "side nir intensity", "side visible hue average value", "top visible hue average value")
+ 		if (sum(!getVector(overallDesName[[imagesIndex]]) %in% test) > 1) {
+ 			doSpiderPlot <- TRUE
+ 		} else {
+ 			doSpiderPlot <- FALSE
+ 		}
+ 		PreWorkForMakeBigOverallImageSpin(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 			overallList, imagesIndex, options, diagramTypSave, doSpiderPlot)		
+ 	}
+ }	
> 
> 
> PreWorkForMakeBigOverallImageSpin <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, overallList, imagesIndex, options, diagramTypSave, doSpiderPlot) {
+ #######
+ #value <- overallList$filterSecondTreatment[1]
+ #######
+ 	
+ 	overallList$debug %debug% "PreWorkForMakeBigOverallImageSpin()"	
+ 	
+ 	overallResult$xAxisfactor = setxAxisfactor(overallList$xAxisName, overallResult$xAxis, options)
+ 	overallResult <- na.omit(overallResult)
+ 	overallResult <- normalizeEachDescriptor(overallResult)	
+ 	groupBy = groupByFunction(list(overallList$treatment, overallList$secondTreatment))
+ 	
+ 	if (length(groupBy) == 0 || length(groupBy) == 1) {
+ 		
+ 		if (doSpiderPlot) {
+ 			plotSpiderImage(overallList = overallList, overallResult = overallResult, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex= imagesIndex, overallFileName =overallFileName, diagramTypSave=diagramTypSave)	
+ 		}
+ 		plotLineRangeImage(overallList = overallList, overallResult = overallResult, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex= imagesIndex, overallFileName =overallFileName, diagramTypSave="lineRangePlot")	
+ 	} else {
+ 		for (value in overallList$filterSecondTreatment) {			
+ 			title = overallList$secondFilterTreatmentRename[[value]]
+ 			#plottedName = overallList$filterTreatment %contactAllWithAll% value
+ 			#booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = plottedName))
+ 			booleanVector = getBooleanVectorForFilterValues(overallResult, list(name = value))
+ 			plotThisValues = overallResult[booleanVector, ]
+ #			usedOverallColor <- overallColor[[imagesIndex]][1:length(unique(plotThisValues["primaerTreatment"])[,1])]
+ #			overallColor[[imagesIndex]] <- overallColor[[imagesIndex]][(length(unique(plotThisValues["primaerTreatment"])[,1])+1):length(overallColor[[imagesIndex]])]
+ 			
+ 			if (doSpiderPlot) {
+ 				plotSpiderImage(overallList, plotThisValues, title = title, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex=imagesIndex, overallFileName=overallFileName, diagramTypSave=diagramTypSave)
+ 			}
+ 			plotLineRangeImage(overallList, plotThisValues, title = title, makeOverallImage = TRUE, legende=TRUE, usedoverallColor = overallColor[[imagesIndex]], overallDesName = overallDesName, imagesIndex=imagesIndex, overallFileName=overallFileName, diagramTypSave="lineRangePlot")
+ 		}	 
+ 	}
+ }
> 
> 
> 
> 
> plotSpiderImage <- function(overallList, overallResult, title = "", makeOverallImage = FALSE, legende=TRUE, usedoverallColor, overallDesName, imagesIndex, overallFileName, diagramTypSave) {
+ ################
+ ##overallColor <- usedOverallColor 
+ #
+ #	makeOverallImage = TRUE
+ #	legende=TRUE
+ #	usedoverallColor = overallColor[[imagesIndex]]
+ #	overallResult <- plotThisValues
+ #	positionType <- overallList$spiderOptions$typOfGeomBar[1]
+ #################
+ 
+ #tempoverallResult <- overallResult
+ #overallResult <- tempoverallResult
+ 	overallList$debug %debug% "plotSpiderImage()"	
+ 	if (length(overallResult[, 1]) > 0) {		
+ 		for (positionType in overallList$spiderOptions$typOfGeomBar) {			
+  
+ 			if ("primaerTreatment" %in% colnames(overallResult)) {
+ 				overallResult$primaerTreatment <-  replaceTreatmentNames(overallList, overallResult$primaerTreatment, TRUE)
+ 				
+ 				plot = ggplot(data=overallResult, aes(x=hist, y=values, group=primaerTreatment)) +
+ 						geom_point(aes(color=as.character(primaerTreatment), shape=hist), size=3) +
+ 						geom_line(aes(colour=as.character(primaerTreatment))) 
+ 				
+ 			} else {
+ 				overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name, TRUE)
+ 				
+ 				plot = ggplot(data=overallResult, aes(x=hist, y=values, group=name)) +
+ 						geom_point(aes(color=as.character(name), shape=hist), size=3) +
+ 						geom_line(aes(colour=as.character(name))) 
+ 			}
+ 			plot <- plot +
+ 					#geom_point(aes(color=as.character(name), shape=hist), size=3) +
+ 					scale_shape_manual(values = c(1:length(unique(overallResult$hist))), name="Property") +
+ 					#geom_line(aes(colour=as.character(name))) +
+ 					scale_colour_manual(name="Condition", values=usedoverallColor)
+ 
+ 			if (positionType == "x") {			
+ 				#plot <- plot + coord_polar(theta="x", expand=TRUE)
+ 				plot <- plot + coord_polar(theta="x")
+ 			} else {
+ 				#plot <- plot + coord_polar(theta="y", expand=TRUE)
+ 				plot <- plot + coord_polar(theta="y")
+ 			}
+ 				
+ 				plot <- plot + 
+ 						scale_y_continuous() +
+ 						theme_bw() +
+ 						opts(#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), # Rand geht nicht in ggplot 0.9
+ 								axis.title.x = theme_blank(), 
+ 								axis.title.y = theme_blank(),
+ #								axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 								panel.grid.minor = theme_blank(), 
+ 								panel.border = theme_rect(colour="Grey", size=0.1),
+ 								axis.text.x = theme_blank()
+ 								#axis.text.y = theme_blank()
+ 						) 
+ 			if (positionType == "y") {
+ 				plot <- plot + 
+ 						opts(axis.text.y = theme_blank(),
+ 								axis.ticks	= theme_blank()	
+ 						)
+ 			}	
+ 				
+ 			if (!legende) {
+ 				plot = plot + opts(legend.position="none")
+ 			} else {
+ 				plot = plot + 
+ 					   opts(#legend.justifiownCation = 'bottom', 
+ 							   legend.direction="horizontal",
+ 							   legend.position="bottom",
+ 							   legend.box = "vertical",
+ 							   #legend.position=c(0.5,0),
+ 							  # legend.title = theme_blank(),
+ 							   legend.key = theme_blank()
+ 			   			)
+ 				#if (as.numeric(sessionInfo()[1]$R.version$minor) > 13 & as.numeric(sessionInfo()[1]$R.version$major) > 1) {
+ 				if (sessionInfo()$otherPkgs$ggplot2$Version != "0.8.9") {
+ 						
+ 					plot <-  plot + guides(colour=guide_legend(title.position= "top", 
+ 															ncol=calculateLegendRowAndColNumber(unique(overallResult$name)),
+ 															byrow=T),
+ 									 	   shape=guide_legend(title.position= "top", 
+ 															ncol=calculateLegendRowAndColNumber(unique(overallResult$hist)), 
+ 															byrow=T)
+ 										  ) 
+ 				
+ #				if (numberOfHist > 3 & numberOfHist < 10) {
+ #					plot = plot + opts(legend.text = theme_text(size=6), 
+ #							legend.key.size = unit(0.7, "lines")
+ #					)
+ #				} else if (numberOfHist >= 10) {
+ #					plot = plot + opts(legend.text = theme_text(size=5), 
+ #							legend.key.size = unit(0.3, "lines")
+ #					)
+ #				} else {
+ #					plot = plot + opts(legend.text = theme_text(size=11))
+ #				}
+ 				}
+ 			}		
+ 			
+ #			if (title != "") {
+ #				plot = plot + opts(title = title)
+ #			}
+ 			
+ 			if (makeOverallImage) {
+ 				plot = plot + facet_grid(~ xAxisfactor)
+ #				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ #					plot = plot + facet_grid(primaerTreatment ~ xAxisfactor)
+ #					
+ #				} else {
+ #					plot = plot + facet_grid(name ~ xAxisfactor)
+ #				}
+ 			}
+ 			print(plot)
+ 			
+ 			subtitle <- ""
+ 			if (positionType == overallList$spiderOptions$typOfGeomBar[1] || length(overallList$spiderOptions$typOfGeomBar) == 1) {
+ 				subtitle <- title
+ 			}
+ 
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, positionType, sep=""), paste(overallFileName[[imagesIndex]], "spiderOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, positionType, sep=""), subtitle, makeOverallImage, subsectionDepth=2)
+ 																													
+ #			saveImageFile(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, positionType, sep=""))
+ #			if (makeOverallImage) {
+ #				if (title != "") {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "spiderOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, positionType, sep=""), TRUE, title)	
+ #				} else {
+ #					writeLatexFile(paste(overallFileName[[imagesIndex]], "spiderOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, positionType, sep=""))
+ #				}
+ #			} else {
+ #				writeLatexFile(overallFileName[[imagesIndex]], paste(overallFileName[[imagesIndex]], diagramTypSave, positionType, title, sep=""))	
+ #			}
+ 
+ 		}
+ 	}				
+ }
> 
> calculateLegendRowAndColNumber <- function(legendText) {
+ ########	
+ #legendText <- unique(overallResult$name)
+ #legendText <- unique(overallResult$hist)	
+ #######	
+ 	lengthOfOneRow <- 90
+ 	legendText <- as.character(legendText)
+ 	
+ 	averageLengthOfSet <- round(sum(nchar(legendText),na.rm=TRUE) / length(legendText))
+ 
+ 	ncol <- floor(lengthOfOneRow / averageLengthOfSet) -1
+ 	if (ncol == 0) {
+ 		ncol <- 1
+ 	}
+ 	return(ncol)
+ } 
> 
> plotLineRangeImage <- function(overallList, overallResult, title = "", makeOverallImage = FALSE, legende=TRUE, usedoverallColor, overallDesName, imagesIndex, overallFileName, diagramTypSave) {
+ 	################
+ #	makeOverallImage = TRUE
+ #	legende=TRUE
+ #	usedoverallColor <- overallColor[[imagesIndex]]
+ #	overallResult <- plotThisValues
+ #	positionType <- overallList$spiderOptions$typOfGeomBar[1]
+ #	diagramTypSave <- "lineRangePlot"
+ 	#################
+ 	
+ 	#ownCat(overallResult[1,])
+ #tempoverallResult <- overallResult
+ #overallResult <- tempoverallResult
+ 	overallList$debug %debug% "plotLineRangeImage()"	
+ 	if (length(overallResult[, 1]) > 0) {		
+ 		if ("primaerTreatment" %in% colnames(overallResult)) {
+ 			overallResult$primaerTreatment <-  replaceTreatmentNames(overallList, overallResult$primaerTreatment, TRUE)
+ 		} else {
+ 			overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name, TRUE)
+ 		}
+ 		
+ 		
+ 		plot <- ggplot(data=overallResult, aes(x=hist, y=values)) +
+ 				geom_line()
+ 		
+ 		if ("primaerTreatment" %in% colnames(overallResult)) {				
+ 			plot <- plot + geom_point(aes(color=as.character(primaerTreatment)), size=3)
+ 			
+ 		} else {
+ 			plot <- plot + geom_point(aes(color=as.character(name)), size=3)
+ 		}
+ 		
+ 		plot <- plot +
+ 				scale_colour_manual(values=usedoverallColor) +
+ 				scale_y_continuous() +
+ 				theme_bw() +
+ 				opts(#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), # Rand geht nicht in ggplot 0.9
+ 						axis.title.x = theme_blank(), 
+ 						axis.title.y = theme_blank(),
+ 						axis.text.x = theme_text(angle=90),
+ 						panel.grid.minor = theme_blank(), 
+ 						panel.border = theme_rect(colour="Grey", size=0.1)
+ 						#axis.text.x = theme_blank()
+ 				#axis.text.y = theme_blank()
+ 				) 
+ 		
+ 		if (!legende) {
+ 			plot = plot + opts(legend.position="none")
+ 		} else {
+ 			plot = plot + 
+ 					opts(#legend.justifiownCation = 'bottom', 
+ 							#legend.direction="horizontal",
+ 							legend.position="bottom",
+ 							#legend.position=c(0.5,0),
+ 							legend.title = theme_blank(),
+ 							legend.key = theme_blank()
+ 					)
+ 			
+ 			if (sessionInfo()$otherPkgs$ggplot2$Version != "0.8.9") {
+ 				plot <-  plot + guides(colour=guide_legend(title.position= "top", 
+ 										ncol=calculateLegendRowAndColNumber(unique(overallResult$hist)),
+ 										byrow=T)			
+ 								) 
+ 			}
+ 				
+ 			
+ #			if (length(overallColor[[imagesIndex]]) > 3 & length(overallColor[[imagesIndex]]) < 6) {
+ #				size <- 6
+ #				unit <- 0.7
+ #			} else if (length(overallColor[[imagesIndex]]) >= 6) {
+ #				size <- 5
+ #				unit <- 0.4
+ #			} else {
+ #				size <- 11
+ #				unit <- 1.0
+ #			}
+ #			
+ #			plot = plot + opts(legend.text = theme_text(size=size), 
+ #					legend.key.size = unit(unit, "lines"),
+ #					axis.text.x = theme_text(face="bold", size=size, angle=90)
+ #			)
+ 		}		
+ 		
+ 		if (title != "") {
+ 			plot = plot + opts(title = title)
+ 		}
+ 		
+ 		if (makeOverallImage) {
+ 			plot = plot + facet_grid(~ xAxisfactor)
+ #				if ("primaerTreatment" %in% colnames(overallResult)) {				
+ #					plot = plot + facet_grid(primaerTreatment ~ xAxisfactor)
+ #					
+ #				} else {
+ #					plot = plot + facet_grid(name ~ xAxisfactor)
+ #				}
+ 		}
+ 				
+ 		writeTheData(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, sep=""), paste(overallFileName[[imagesIndex]], "lineRangeOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, sep=""), title, makeOverallImage, subsectionDepth=2)
+ 
+ #		saveImageFile(overallList, plot, overallFileName[[imagesIndex]], paste(diagramTypSave, title, sep=""))
+ #		if (makeOverallImage) {
+ #			writeLatexFile(paste(overallFileName[[imagesIndex]], "lineRangeOverallImage", sep=""), paste(overallFileName[[imagesIndex]], diagramTypSave, title, sep=""))	
+ #		} else {
+ #			writeLatexFile(overallFileName[[imagesIndex]], paste(overallFileName[[imagesIndex]], diagramTypSave, title, sep="_"))	
+ #		}			
+ 		
+ 	}		
+ }
> 
> parMakeBarDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName,
+ 		 overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot") {
+ 	########
+ #overallResult <- overallList$overallResult_nBoxDes
+ #overallDescriptor <- overallList$nBoxDes
+ #overallColor <- overallList$color_nBox
+ #overallDesName <-overallList$nBoxDesName
+ #overallFileName <- overallList$imageFileNames_nBoxplots
+ #diagramTypSave="nboxplot"
+ #imagesIndex <- "1"
+ #isOnlyOneValue <- FALSE
+ 	#############	
+ 	
+ 	
+ 	overallList$debug %debug% "makeBarDiagram()"
+ 
+ 	tempOverallResult =  overallResult
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		if (!is.na(overallDescriptor[[imagesIndex]])) {	
+ 			overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "barplot")
+ 			overallResult = overallResult[!is.na(overallResult$mean), ]	#first all values where "mean" != NA are taken
+ 			overallResult[is.na(overallResult)] = 0 #second if there are values where the se are NA (because only one Value are there) -> the se are set to 0
+ 			overallResult$name <-  replaceTreatmentNames(overallList, overallResult$name)
+ 	
+ 			if (innerThreaded)
+ 				sfClusterCall(makeBarDiagram, 
+ 					overallResult, overallDescriptor, overallColor, overallDesName,
+ 					overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot",
+ 					imagesIndex,
+ 					stopOnError=FALSE)
+ 			else
+ 				makeBarDiagram( 
+ 					overallResult, overallDescriptor, overallColor, overallDesName,
+ 					overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot",
+ 					imagesIndex)
+ 		}
+ 	}		 
+ }
> 
> makeBarDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName,
+ 		 overallFileName, overallList, isOnlyOneValue = FALSE, diagramTypSave="barplot", imagesIndex) {
+ 		 
+ 	if (length(overallResult[, 1]) > 0) {
+ 		if (isOnlyOneValue) {
+ 			plot = ggplot(data=overallResult, aes(x=name, y=mean))
+ 		} else {
+ 			plot = ggplot(data=overallResult, aes(x=xAxis, y=mean))
+ 		}
+ 		
+ 		maxMean <- max(overallResult$mean)
+ 		maxSe <- max(overallResult$se)
+ 		
+ 		plot = plot + 						
+ 				geom_bar(stat="identity", aes(fill=name), colour="Grey", size=0.1) +
+ 				geom_errorbar(aes(ymax=mean+se, ymin=mean-se), width=0.2, colour="black")+
+ 				#geom_errorbar(aes(ymax=mean+se, ymin=mean-se), width=0.5, colour="Pink")+
+ 				ylab(overallDesName[[imagesIndex]]) +
+ 				coord_cartesian(ylim=c(0, maxMean + maxSe + (110*maxMean)/100)) +
+ 				xlab(overallList$xAxisName) +
+ 				scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 				theme_bw() +
+ 				opts(legend.position="none", 
+ 						#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), 
+ 						axis.title.x = theme_text(face="bold", size=11), 
+ 						axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 						axis.text.x = theme_text(angle=90),
+ 						panel.grid.minor = theme_blank(), 
+ 						panel.border = theme_rect(colour="Grey", size=0.1)
+ 				)
+ 		
+ 		writeTheData(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave, title, makeOverallImage, isAppendix=overallList$appendix)										
+ 	}
+ }
> 
> 
> reownCategorized <- function(overallResult) {
+ 	
+ #	column <- "name"
+ #	
+ #	if ("primaerTreatment" %in% colnames(overallResult)) {	
+ #		column <- "primaerTreatment"
+ #		ownList <- list(primaerTreatment = character())
+ #	} else {
+ #		ownList <- list(name = character())
+ #	}
+ 	
+ 	overallResult <- cbind(overallResult, group=rbind(-1))
+ 	overallResultTemp <- overallResult
+ 	
+ 	for(n in as.character(unique(unlist(overallResultTemp$name)))) {
+ 		
+ 	#	ownList[1] <- n
+ 		booleanVector = getBooleanVectorForFilterValues(overallResultTemp, list(name=n))
+ 		overallResult <- overallResultTemp[booleanVector,]
+ 		
+ 		lin_interp = function(x, y, length.out=length(overallResult$xAxis)) {
+ 			approx(x, y, xout=seq(min(x), max(x), length.out=length.out))$y
+ 		}
+ 		
+ 		overallResult$xAxis <- lin_interp(overallResult$xAxis, overallResult$xAxis)
+ 		overallResult$mean <- lin_interp(overallResult$xAxis, overallResult$mean)
+ 		
+ 		ownCatRle = rle(overallResult$mean < 0)
+ 		overallResult$group = rep.int(1:length(ownCatRle$lengths), times=ownCatRle$lengths)
+ 		overallResultTemp[booleanVector, ] <- overallResult
+ 	}
+ 	
+ 	overallResultTemp$group <- as.factor(overallResultTemp$group)
+ 	return(overallResultTemp)
+ 	#return(overallResult)
+ }
> 
> 
> setColorDependentOfGroup <- function(overallResult) {
+ 	
+ #	lastColorPositiv <- ifelse(overallResult$mean[1] < 0, TRUE, FALSE)
+ #	color <- vector()
+ #	for(n in 1:length(unique(overallResult$group))) {
+ #		if (lastColorPositiv) {
+ #			color <- c(color, "light gray")
+ #			lastColorPositiv <- FALSE
+ #		} else {
+ #			color <- c(color, "green")
+ #			lastColorPositiv <- TRUE
+ #		}
+ #	}
+ 	lastColorPositiv <- ifelse(overallResult$mean[1] < 0, TRUE, FALSE)
+ 	color <- vector()
+ 	if (lastColorPositiv) {
+ 		color <- c(color, "light grey")
+ 	} else {
+ 		color <- c(color, "palegreen2")
+ 	}
+ 
+ 	if(length(as.character(unique(overallResult$group))) > 1) {
+ 		if (lastColorPositiv) {
+ 			color <- c(color, "palegreen2")
+ 		} else {
+ 			color <- c(color, "light grey")
+ 		}
+ 	}
+ 
+ 	return(color)
+ }
> 
> parMakeViolinPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 		overallFileName, overallList, diagramTypSave="violinplot") {
+ 	########
+ #overallResult <- overallList$overallResult_violinBoxDes
+ #overallDescriptor <- overallList$violinBoxDes
+ #overallColor <- overallList$color_violin
+ #overallDesName <-overallList$violinBoxDesName
+ #overallFileName <- overallList$imageFileNames_violinPlots
+ #diagramTypSave="violinplot"
+ #imagesIndex <- "1"
+ #isOnlyOneValue <- FALSE
+ #stress.Start <- overallList$stress.Start
+ #stress.End <- overallList$stress.End
+ 	#############	
+ 	
+ 	overallList$debug %debug% "makeViolinPlotDiagram()"	
+ 	
+ 	if ("primaerTreatment" %in% colnames(overallResult)) {
+ 		overallResult[,4:length(colnames(overallResult))] <- 1-overallResult[,4:length(colnames(overallResult))]
+ 	} else {
+ 		overallResult[,3:length(colnames(overallResult))] <- 1-overallResult[,3:length(colnames(overallResult))]
+ 	}
+ 	
+ 	tempOverallResult =  overallResult
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		if (!is.na(overallDescriptor[[imagesIndex]])) {
+ 			createOuputOverview("violin plot", imagesIndex, length(names(overallDescriptor)),  overallDesName[[imagesIndex]])
+ 			overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, diagramTypSave)
+ 			overallResult = overallResult[!is.na(overallResult$mean), ]	#first all values where "mean" != NA are taken
+ 			
+ 			if (innerThreaded)
+ 				sfClusterCall(makeViolinPlotDiagram, 
+ 					overallResult, overallDescriptor, overallColor, overallDesName, 
+ 					overallFileName, overallList, diagramTypSave="violinplot", imagesIndex,
+ 					stopOnError=FALSE)
+ 			else
+ 				makeViolinPlotDiagram( 
+ 					overallResult, overallDescriptor, overallColor, overallDesName, 
+ 					overallFileName, overallList, diagramTypSave="violinplot", imagesIndex)
+ 		}
+ 	}		
+ }
> 
> makeViolinPlotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, 
+ 	overallFileName, overallList, diagramTypSave="violinplot", imagesIndex) {
+ 	
+ 	if ("primaerTreatment" %in% colnames(overallResult)) {
+ 		for (value in unique(as.character(overallResult$primaerTreatment))) { 
+ 			title = overallList$filterTreatmentRename[[value]]			
+ 			booleanVector = getBooleanVectorForFilterValues(overallResult, list(primaerTreatment = value))
+ 			plotThisValues = overallResult[booleanVector, ]
+ 			#plotThisValues$name <- factor(substr(plotThisValues$name,nchar(value)+2, nchar(as.character(plotThisValues$name))))
+ 			plotViolinPlotDiagram(plotThisValues, overallDesName, overallFileName, overallList, imagesIndex, title)
+ 		}	 
+ 	} else {
+ 		plotViolinPlotDiagram(overallResult, overallDesName, overallFileName, overallList, imagesIndex)
+ 	}
+ 	
+ }
> 
> reorderThePlotOrder <- function(overallResult) {
+ 	groupedOverallResult <- data.table(overallResult)
+ 	sumVector <- as.data.frame(groupedOverallResult[, lapply(list(mean), mean, na.rm=TRUE), by=c(name)])
+ 	sumVector$c <- levels(overallResult$name)
+ 	
+ 	for(n in levels(overallResult$name)) {
+ 		overallResult$name <- replace(as.character(overallResult$name), overallResult$name==n, paste(sumVector[sumVector$c==n,]$c, " (", round(sumVector[sumVector$c==n,]$V1, digits=1), ")", sep=""))
+ 		sumVector[sumVector$c==n,]$c <- paste(sumVector[sumVector$c==n,]$c, " (", round(sumVector[sumVector$c==n,]$V1, digits=1), ")", sep="")
+ 	}
+ 	
+ 	return(factor(overallResult$name, levels = sumVector[order(sumVector$V1),]$c))
+ }
> 
> buildStressArea <- function(stress.Start, stress.End, stress.Typ, stress.Label, yValues, diagramTypSave, additionalValues = "none", additionalDataFrameValues = "none") {
+ #############
+ #stress.Start <- overallList$stress.Start
+ #stress.End <- overallList$stress.End
+ #yValues <- overallResult$mean
+ #diagramTypSave <- diagramTypSave
+ #############
+ #yValues <- overallResult$values
+ #additionalValues <-  "stack"
+ #additionalDataFrameValues <- overallResult[, c("xAxis", "plot")]
+ #additionalDataFrameValues <- overallResult[, c("xAxis", "primaerTreatment")]
+ ############
+ 
+ 
+ 	stress.Area <- data.frame()
+ 	#possible.Stress.Values <- c("0", "1", "2", "3", "4") # c("n", "d", "w", "c", "s")
+ 	standard.Stress.Labels <- list("000" = "normal", "001" = "drought stress", "002" = "moisture stress", "003" = "chemical stress", "004" = "salt stress")
+ 	
+ 	ymin <- min(yValues,na.rm = TRUE)
+ 	ymax <- max(yValues, na.rm = TRUE)
+ 	
+ 	if (diagramTypSave == "violinplot")  {
+ 		if (abs(ymin) >= abs(ymax)) {
+ 			ymax <- abs(ymin)
+ 		} else {
+ 			ymin <- (-1*ymax)
+ 		}
+ 	} else if (diagramTypSave == "boxplotstacked") {
+ 		if (additionalValues != "none") {
+ 			if (additionalValues == "fill") {
+ 				ymin <- 0
+ 				ymax <- 1.00
+ 			} else if (additionalValues == "stack") {
+ 				if(additionalDataFrameValues != "none") {
+ 					newDataFrame <- data.table(yValues, additionalDataFrameValues)
+ 					newDataFrame <- as.data.frame(newDataFrame[, lapply(.SD, sum, na.rm=TRUE), by=colnames(additionalDataFrameValues)])
+ 					ymin <- 0
+ 					ymax <- max(newDataFrame$yValues, na.rm = TRUE)
+ 				}
+ 			} 			
+ 		}
+ 	} else if (diagramTypSave == "nboxplot") {
+ 		if (additionalValues != "none") {
+ 			
+ 			ymin <- ymin - max(additionalValues,na.rm = TRUE)
+ 			ymax <- ymax + max(additionalValues, na.rm = TRUE)	
+ 		}
+ 	}
+ 
+ #	ymin <- (ymin - ymin * 0.01)
+ #	ymax <- (ymax + ymax * 0.01)
+ #	print(stress.Start)
+ #	print(stress.End)
+ #	print(stress.Typ)
+ #	print(stress.Label)
+ 	
+ 	for (kk in seq(along=stress.Start)) {
+ 		if (stress.Start[kk] != -1 && stress.End[kk] != -1) {
+ 			stress.Start <- as.numeric(stress.Start)
+ 			stress.End <- as.numeric(stress.End)
+ 			if (stress.Start[kk] >= stress.End[kk]) {
+ 				xmin <- stress.End[kk]
+ 				xmax <- stress.Start[kk]
+ 			} else {
+ 				xmin <- stress.Start[kk]
+ 				xmax <- stress.End[kk]
+ 			}
+ 			
+ 			if(!(stress.Typ[kk] %in% names(standard.Stress.Labels))) {
+ 				ownCat("... unknown stresstyp, change to \"normal\" -> (0)")
+ 				stress.Typ[kk] <- names(standard.Stress.Labels)[1]
+ 			}
+ 			
+ 			if(stress.Label[kk] == -1) {
+ 				ownCat("... no stresslabel are set, change to standard label for the stresstyp")
+ 				stress.Label[kk] <- standard.Stress.Labels[[stress.Typ[kk]]]
+ 			}
+ 			
+ 			stress.Area <- rbind(stress.Area, data.frame(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, typ=stress.Typ[kk], label=stress.Label[kk]))
+ 		}
+ 	}
+ 	#dCNV_Biom[order(attr(dCNV_Bio, "Labels")),order(attr(dCNV_Bio, "Labels"))]
+ #	stress.Area <- sort(stress.Area)
+ 	#print(stress.Area)
+ 	return(stress.Area)
+ }
> 
> addColorForStressPhaseAndOther <- function(stressArea, color, diagramTypSave = "none") {
+ 	# c("000", "001", "002", "003", "004") entspricht c("n", "d", "w", "c", "s")
+ 	
+ 	if(diagramTypSave == "nboxplot" || diagramTypSave == "dodge") { # || diagramTypSave == "stack") {
+ 		stressAreaTyp <- rev(sort(as.character(unique(stressArea$typ))))
+ 	} else {
+ 		stressAreaTyp <- sort(as.character(unique(stressArea$typ)))
+ 	}
+ 	
+ 	for (kk in stressAreaTyp) {
+ 		if (kk == "000")
+ 			color <- c("darkolivegreen1", color)
+ 		else if (kk == "001")
+ 			color <- c("cornsilk1", color)
+ 		else if (kk == "002")
+ 			color <- c("lightskyblue1", color)
+ 		else if (kk == "003")
+ 			color <- c("papayawhip", color)
+ 		else if (kk == "004")
+ 			color <- c("seashell1", color)
+ 	}	
+ 	return(color)
+ }
> 
> plotViolinPlotDiagram <- function(overallResult, overallDesName, overallFileName, overallList, imagesIndex, title="") {
+ ########
+ #overallResult <- plotThisValues
+ #title <- ""
+ ########
+ 	diagramTypSave<-"violinplot"
+ 
+ 	overallResult <- reownCategorized(overallResult)
+ 	color <- setColorDependentOfGroup(overallResult)
+ 	overallResult$name <- replaceTreatmentNames(overallList, overallResult$name, onlySecondTreatment = TRUE)
+ 	overallResult$name <- reorderThePlotOrder(overallResult)
+ 	stressArea <- data.frame()
+ 
+ #  c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")	
+ #	overallList$stress.Start <- c(10,20,30,37)
+ #	overallList$stress.End <- c(13, 23, 33, 40)
+ #	overallList$stress.Typ <- c("d","d","s", "c")
+ #	overallList$stress.Label <- c(-1, -1, -1, -1)
+ #	
+ #	overallList$stress.Start <- c(10,20,30)
+ #	overallList$stress.End <- c(13, 23,33)
+ #	overallList$stress.Typ <- c("2","1","2")
+ #	overallList$stress.Label <- c(-1, -1,-1)
+ 	
+ 	if(overallList$stress.Start[1] != -1) {
+ 		stressArea <- buildStressArea(overallList$stress.Start, overallList$stress.End, overallList$stress.Typ, overallList$stress.Label, overallResult$mean, diagramTypSave)
+ 		color <- addColorForStressPhaseAndOther(stressArea, color)
+ 	}
+ 	
+ #	print(color)
+ #	print(stressArea)
+ 	if (length(overallResult[, 1]) > 0) {
+ 						
+ 		plot <-	ggplot()				
+ 				
+ 		if(length(stressArea) >0) {
+ 			plot <- plot + 
+ 				geom_rect(data=stressArea, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=typ)) +
+ 				geom_text(data=stressArea, aes(x=xmin, y=ymin, label=label), size=2, hjust=0, vjust=1, angle = 90, colour="grey")
+ 			
+ 		}	
+ 			plot <- plot +
+ 				geom_ribbon(data=overallResult, aes(x=xAxis, fill=mean>=0, group=group, ymin=-mean, ymax=mean)) +						
+ 				scale_fill_manual(values = color) +
+ 				scale_x_continuous(name=overallList$xAxisName, minor_breaks = min(as.numeric(as.character(overallResult$xAxis))):max(as.numeric(as.character(overallResult$xAxis)))) + 
+ 				scale_y_continuous(name=overallDesName[[imagesIndex]],  minor_breaks = min(as.numeric(as.character(overallResult$mean))):max(as.numeric(as.character(overallResult$mean)))) +
+ 				#ylab(overallDesName[[imagesIndex]]) +
+ 				#label=c("0.4", "0.2", "0.0", "0.2", "0.4")
+ 				#scale_y_discrete(aes(factor(c(0.4, 0.2, 0.0, 0.2, 0.4))), name=overallDesName[[imagesIndex]],limits=c(-10,1)) +
+ 				#scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 				#scale_colour_manual(values= overallColor[[imagesIndex]]) +
+ 				coord_flip()+
+ 				theme_bw() +
+ 				opts(axis.title.x = theme_text(face="bold", size=11), 
+ 						axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 						#panel.grid.major = theme_blank(), # switch off major gridlines
+ 						#panel.grid.minor = theme_blank(), # switch off minor gridlines
+ 						legend.position = "none", # manually position the legend (numbers being from 0, 0 at bottom left of whole plot to 1, 1 at top right)
+ 						#legend.title = theme_blank(), # switch off the legend title						
+ 						#legend.key.size = unit(1.5, "lines"), 
+ 						#legend. key = theme_blank(), # switch off the rectangle around symbols in the legend
+ 						panel.border = theme_rect(colour="Grey", size=0.1)
+ 				)
+ 		if (title != "") {
+ 			plot <- plot + opts(title = title)
+ 		}
+ 		
+ 		if (length(unique(overallResult$name)) > 4) {
+ 			plot = plot + opts(
+ 					axis.text.x = theme_text(size = 8),
+ 					strip.text.x = theme_text(size = 7)
+ 			)
+ 		} else {
+ 			plot = plot + opts(
+ 					axis.text.x = theme_text(size = 9),
+ 					strip.text.x = theme_text(size = 10)
+ 			)
+ 		}
+ 		
+ 		plot <- plot + facet_wrap(~ name, ncol=5) 
+ 	
+ 		#print(plot)
+ 		
+ 		writeTheData(overallList, plot, overallFileName[imagesIndex], diagramTypSave, writeLatexFileFirstValue= paste(overallFileName[imagesIndex], "violinOverallImage", sep=""), writeLatexFileSecondValue= paste(overallFileName[imagesIndex],diagramTypSave,sep=""), makeOverallImage=TRUE, subSectionTitel = overallDesName[[imagesIndex]], subsectionDepth=2)
+ 	}
+ }
> 
> parMakeBoxplotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 	options, overallList, diagramTypSave="boxplot") {
+ ################
+ #	overallResult <- overallList$overallResult_boxDes
+ #	overallDescriptor <- overallList$boxDes
+ #	overallColor <- overallList$color_box
+ #	overallDesName <- overallList$boxDesName
+ #	overallFileName <- overallList$imageFileNames_Boxplots
+ #	options <- overallList$boxOptions
+ #	diagramTypSave <- "boxplot"
+ #	imagesIndex <- "1"
+ ####################
+ 
+ 
+ 	overallList$debug %debug% "parMakeBoxplotDiagram()"
+ 	tempOverallResult <-  na.omit(overallResult)
+ 	
+ 	for (imagesIndex in names(overallDescriptor)) {
+ 		
+ 		if (innerThreaded)
+ 			sfClusterCall(makeBoxplotDiagram, 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 				options, overallList, diagramTypSave, imagesIndex, tempOverallResult,
+ 				stopOnError=FALSE)
+ 		else
+ 			makeBoxplotDiagram( 
+ 				overallResult, overallDescriptor, overallColor, overallDesName, overallFileName, 
+ 				options, overallList, diagramTypSave, imagesIndex, tempOverallResult)
+ 	}
+ }
> 
> makeBoxplotDiagram <- function(overallResult, overallDescriptor, overallColor, overallDesName, overallFileName,
+ 	 options, overallList, diagramTypSave="boxplot", imagesIndex, tempOverallResult) {
+ 	overallList$debug %debug% "makeBoxplotDiagram()"
+  
+ 	if (!is.na(overallDescriptor[[imagesIndex]])) {
+ 		#ownCat(paste("Process ", overallDesName[[imagesIndex]]))
+ 		createOuputOverview("boxplot", imagesIndex, length(names(overallDescriptor)), overallDesName[[imagesIndex]])
+ 		
+ 		overallResult = reduceWholeOverallResultToOneValue(tempOverallResult, imagesIndex, overallList$debug, "boxplot")
+ 		if (length(overallResult[, 1]) > 0) {
+ 			overallResult$xAxisfactor <- setxAxisfactor(overallList$xAxisName, overallResult$xAxis, options)	
+ 			overallResult$name <- replaceTreatmentNames(overallList, overallResult$name)
+ 			overallResult <- na.omit(overallResult)
+ 			#myPlot = ggplot(overallList$overallResult, aes(factor(name), value, fill=name, colour=name)) + 
+ 			#myPlot = ggplot(overallResult, aes(factor(name), value, fill=name)) +
+ 		
+ 			plot = ggplot(overallResult, aes(factor(name), value, fill=name)) +
+ 					geom_boxplot() +
+ 					ylab(overallDesName[[imagesIndex]]) +
+ 					#coord_cartesian(ylim=c(0, max(overallList$overallResult$mean + overallList$overallResult$se + 10, na.rm=TRUE))) +
+ 					#xlab(paste(min(overallResult$xAxis), overallList$xAxisName, "..", max(overallResult$xAxis), overallList$xAxisName)) +
+ 					scale_fill_manual(values = overallColor[[imagesIndex]]) +
+ 					#stat_summary(fun.data = f, geom = "crossbar", height = 0.1, 	colour = NA, fill = "skyblue", width = 0.8, alpha = 0.5) +
+ 					theme_bw() +
+ 					opts(legend.position="none", 
+ 							#plot.margin = unit(c(0.1, 0.1, 0, 0), "cm"), 
+ 							axis.title.x = theme_blank(), 
+ 							axis.title.y = theme_text(face="bold", size=11, angle=90), 
+ 							panel.grid.minor = theme_blank(), 
+ 							panel.border = theme_rect(colour="Grey", size=0.1)
+ 							
+ 					) +
+ 					opts(axis.text.x = theme_text(size=6, angle=90)) +
+ 					facet_wrap(~ xAxisfactor, drop=FALSE)
+ 					
+ 			#print(plot)
+ 			
+ 			writeTheData(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave, isAppendix=overallList$appendix)
+ 				
+ #				saveImageFile(overallList, plot, overallFileName[[imagesIndex]], diagramTypSave)
+ #
+ #				if (overallList$appendix) {
+ #					writeLatexFile("appendixImage", overallFileName[[imagesIndex]], diagramTypSave)
+ #				}	
+ 		}
+ 	}
+ }
> 
> makeDiagrams <- function(overallList) {
+ 	overallList$debug %debug% "makeDiagrams()"
+ 	if (threaded)
+ 		sfExport("overallList")
+ 	if (!calculateNothing) {			
+ if(!calculateOnlyViolin) {		
+ if(!calculateOnlyStacked) {
+ 		if (sum(!is.na(overallList$nBoxDes)) > 0) {
+ 			if (overallList$debug) {ownCat("nBoxplot...")}
+ 				sfClusterEval(
+ 					parMakeLinearDiagram(overallList$overallResult_nBoxDes, overallList$nBoxDes, 
+ 						overallList$color_nBox, overallDesName=overallList$nBoxDesName, overallList$imageFileNames_nBoxplots , overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for nBoxplot are 'NA'")
+ 		}
+ 		
+ 		if (sum(!is.na(overallList$boxDes)) > 0) {
+ 			if (overallList$debug) {ownCat("Boxplot...")}
+ 				sfClusterEval(
+ 					parMakeBoxplotDiagram(overallList$overallResult_boxDes, overallList$boxDes, overallList$color_box, overallDesName=overallList$boxDesName, overallList$imageFileNames_Boxplots, overallList$boxOptions, overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for Boxplot are 'NA'...")
+ 		}
+ }
+ 		if (sum(!is.na(overallList$boxStackDes)) > 0) {
+ 			if (overallList$debug) {ownCat("Stacked Boxplot...")}
+ 				sfClusterEval(
+ 					parMakeBoxplotStackedDiagram(overallList$overallResult_boxStackDes, overallList$boxStackDes, overallList$color_boxStack, overallDesName=overallList$boxStackDesName, overallList$imageFileNames_StackedPlots, overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for stacked Boxplot are 'NA'...")
+ 			}
+ if(!calculateOnlyStacked) {
+ 		if (sum(!is.na(overallList$boxSpiderDes)) > 0) {
+ 			if (overallList$debug) {ownCat("Spider plot...")}
+ 				sfClusterEval(
+ 					parMakeSpiderPlotDiagram(overallList$overallResult_boxSpiderDes, overallList$boxSpiderDes, overallList$color_spider, overallDesName=overallList$boxSpiderDesName, overallList$imageFileNames_SpiderPlots, overallList$spiderOptions, overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for stacked Boxplot are 'NA'...")
+ 		}
+ }
+ }
+ if(!calculateOnlyStacked) {
+ 		if (sum(!is.na(overallList$violinBoxDes)) > 0 & overallList$isRatio) {
+ 			if (overallList$debug) {ownCat("Violin plot...")}
+ 				sfClusterEval(
+ 					parMakeViolinPlotDiagram(overallList$overallResult_violinBoxDes, overallList$violinBoxDes, overallList$color_violin, overallDesName=overallList$violinBoxDesName, overallList$imageFileNames_violinPlots , overallList)
+ 				, stopOnError=FALSE)
+ 		} else {
+ 			ownCat("All values for violin Boxplot are 'NA'...")
+ 		}
+ }
+ 		if (FALSE) {	# falls auch mal barplots erstellt werden sollen (ausser wenn nur ein Tag vorhanden ist!)
+ 			if (overallList$debug) {ownCat("Barplot...")}
+ 				sfClusterEval(
+ 					parMakeBarDiagram(overallList$overallResult_nBoxDes, overallList$nBoxDes, overallList$color_nBox, overallDesName=overallList$nBoxDesName, overallList$imageFileNames_nBoxplots, overallList)
+ 				, stopOnError=FALSE)
+ 		}
+ 	}
+ }
> 
> addDesSet <- function(descriptorSet_boxplotStacked, descriptorSetName_boxplotStacked, workingDataSet) {
+ 	addDescSet = character()
+ 	addDescSetNames = character()
+ 	i = 0
+ 	for (ds in descriptorSet_boxplotStacked) {
+ 		addCol = ""
+ 		#addColDesc = ""
+ 		for (col in colnames(workingDataSet)) {	
+ 			if (nchar(ds)>5) {
+ 				last4chars = substr(col, nchar(ds)-4, nchar(ds))
+ 				if (last4chars == ".bin.") {
+ 					col_substring = substr(col, 1, nchar(ds))
+ 					if (col_substring == ds) {
+ 						if (nchar(addCol)>0) {
+ 							addCol = paste(addCol, "$", sep="")
+ 						}
+ 						addCol= paste(addCol, col, sep="")
+ 					} 
+ 				}
+ 			}
+ 		}
+ 		i=i+1
+ 		addColDesc = descriptorSetName_boxplotStacked[i]
+ 		if (nchar(addCol)>0) {
+ 			#ownCat(paste("Adding ", addCol, "with description", addColDesc))
+ 			addDescSet = c(addDescSet, addCol)
+ 			addDescSetNames = c(addDescSetNames, addColDesc)
+ 		}
+ 	}
+ 	
+ 	if (length(addDescSet) > 0) {
+ 		return(list(desSet=addDescSet, desName = addDescSetNames))
+ 	} else {
+ 		return(list(desSet=descriptorSet_boxplotStacked, desName = descriptorSetName_boxplotStacked))
+ 	}
+ 	#descriptorSet_boxplotStacked = c(descriptorSet_boxplotStacked, addDescSetNames) 	
+ 	#return(descriptorSet_boxplotStacked)
+ }
> 
> changeXAxisName <- function(overallList) {
+ 	if (length(overallList$iniDataSet$Day..Int.) > 1 ){
+ 		day_int <- as.character(overallList$iniDataSet$Day..Int.[1])
+ 		day <- as.character(overallList$iniDataSet$Day[1])
+ 		overallList$xAxisName <- substr(day, 1, nchar(day)-(nchar(day_int)+1))
+ 	}
+ 	return(overallList)
+ }
> 
> 
> checkIfAllNecessaryFilesAreThere <- function() {
+ 		ownCat("Check if the noValues-Image is there")
+ 		file = "noValues.pdf"
+ 		if (!file.exists(file)) {
+ 			library("Cairo")
+ 			ownCat(paste("Create defaultImage '", file, "'", sep=""))
+ 			Cairo(width=900, height=70, file=file, type="pdf", bg="transparent", units="px", dpi=90)
+ 			par(mar = c(0, 0, 0, 0))
+ 			plot.new()
+ 			legend("left", "no values", col= c("black"), pch=1, bty="n")
+ 			dev.off()
+ 		}	
+ }
> 
> buildBlacklist <- function(workingDataSet, descriptorSet) {
+ 	
+ 	searchString = ".histogram."
+ #	searchString = paste(searchString, "mark", sep = "|")	
+ 	additionalDescriptors = c(descriptorSet, "Day (Int)", "Day", "Time", "Plant ID", "vis.side", "fluo.side", "nir.side", "vis.top", "fluo.top", "nir.top")
+ 	
+ 	return(c(colnames(workingDataSet)[grep(searchString, colnames(workingDataSet), ignore.case = TRUE)], preprocessingOfValues(additionalDescriptors, TRUE)))
+ }
> 
> 
> loadStressPeriod <- function(stress.Value, arg) {
+ 	stress.Value <- stress.Value %exists% arg
+ 	stress.Value <- unlist(preprocessingOfValues(stress.Value, isColName = TRUE))
+ 
+ 	return(stress.Value)
+ }
> 
> checkStressTypValues <- function(stress.Typ) {
+ 	
+ 	new.Values <- list("n" = "000", "d" = "001", "w" = "002", "c" = "003", "s" = "004",
+ 					   "0" = "000", "1" = "001", "2" = "002", "3" = "003", "4" = "004")
+ 	
+ 	for (kk in seq(along=stress.Typ)) {
+ 		if (stress.Typ[kk] %in% names(new.Values)) {
+ 			stress.Typ[kk] <- new.Values[[stress.Typ[kk]]]
+ 			ownCat("... change old stresstyp value to new!")
+ 		}
+ 	}
+ 	return(stress.Typ)
+ }
> 
> initRfunction <- function(DEBUG = FALSE) {
+ 	#"LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"
+ 	#Sys.setlocale(locale="de_DE.ISO8859-15")
+ 	#Sys.setlocale("LC_ALL", "en_US.UTF-8")
+ 	
+ 	if (DEBUG) {
+ 		options(error = quote({
+ 			#sink(file="error.txt", split = TRUE);
+ 			dump.frames();
+ 			ownCat(attr(last.dump, "error.message"));
+ 			#x = attr(last.dump, "error.message")
+ 			traceback();
+ 			#sink(file=NULL);		
+ 			#q()
+ 		}))
+ 		options(show.error.messages = TRUE)
+ 		#options(showWarnCalls = TRUE)
+ 		#options(showErrorCalls = TRUE)
+ 		options(warn = 0)
+ 		#options(warn = 2)
+ 	} else {	
+ 		options(error = NULL)
+ 		#options(showWarnCalls = FALSE)
+ 		#options(showErrorCalls = FALSE)
+ 		options(warn = -1)
+ 		options(show.error.messages = FALSE)
+ 	}
+ 	if (memory.limit() < 3500) {
+ 		memory.limit(size=10000)
+ 	}
+ 	
+ 	while(!is.null(dev.list())) {
+ 		dev.off()
+ 	}
+ 	
+ 	loadLibs(debug)
+ }
> 
> typOfStartOptions = "test"
> 	typOfStartOptions = tolower(typOfStartOptions)
> 		
> 	args = commandArgs(TRUE)
> #	for(nn in seq(along=args)) {
> #		ownCat(paste(nn, ".: ", args[nn], sep=""))
> #	}
> 	
> 	saveFormat = "pdf"
> 	dpi = "90" ##90 ## CK: seems to change nothing for ggplot2 instead the output size should be modified, if needed // 17.2.2012	
> 	
> 	isGray = FALSE
> 	#showResultInR = FALSE
> 	
> 	# c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")
> 	stress.Start <- -1 #"10" # -1
> 	stress.End <- -1 #"15" # -1
> 	stress.Typ <- -1 #"1" # -1 ## 1 -> dry; 2 -> wet; 0 -> normal; 4 -> salt; 3 -> chemical
> 	stress.Label <- -1 #"drought stress" # -1
> 	
> 	treatment = "Treatment"
> 	filterTreatment = "none"
> 	
> 	secondTreatment = "none"
> 	filterSecondTreatment = "none"
> 	
> 	xAxis = "Day (Int)" 
> 	xAxisName = "DAS"
> 	filterXaxis = "none"
> 	
> 	should.Clustered <- FALSE
> 	bootstrap.N <- -1
> 	
> #	diagramTypVector = vector()
> 	descriptorSet = vector()
> 	descriptorSetName = vector()
> 	
> 	fileName = "error"
> 
> 	appendix = FALSE
> 	#appendix = TRUE
> 	
> 	separation = ";"
> 
> 	if (typOfStartOptions == "all" | typOfStartOptions == "report" | typOfStartOptions == "allmanual") {
+ 		fileName <- fileName %exists% args[1]
+ 		
+ 		should.Clustered <- should.Clustered %exists% args[7]
+ 		bootstrap.N <- bootstrap.N %exists% args[8] 
+ 		stress.Start <- loadStressPeriod(stress.Start, args[9])
+ 		stress.End <- loadStressPeriod(stress.End, args[10])
+ 		stress.Typ <- loadStressPeriod(stress.Typ, args[11])
+ 		stress.Typ <- checkStressTypValues(stress.Typ)
+ 		
+ 		stress.Label <- loadStressPeriod(stress.Label, args[12])
+ 		
+ 		if (fileName != "error") {
+ 			workingDataSet <- separation %readInputDataFile% fileName
+ 			descriptorSet_nBoxplot <- vector()
+ 			descriptorSet_boxplot <- vector()
+ 			descriptorSet_boxplotStacked <- vector()
+ 			
+ 			if (length(workingDataSet[,1]) > 0) {
+ 				#nboxplot
+ 
+ 				if (typOfStartOptions == "all") {
+ 					descriptorSet_nBoxplot = colnames(workingDataSet)
+ 					descriptorSetName_nBoxplot = descriptorSet
+ 					
+ 				} else { #Report	
+ 					descriptorSet_nBoxplot = c(#"volume.my", "volume.fluo.plant_weight.iap"
+ 							 					"Weight A (g)", 
+ 												"Weight B (g)", 
+ 												"Water (weight-diff)", 
+ 												"side.height.norm (mm)", 
+ 												"side.width.norm (mm)", 
+ 												"side.area.norm (mm^2)", 
+ 												"top.area.norm (mm^2)", 											
+ 												"side.fluo.intensity.chlorophyl.average (relative)", 
+ 												"side.fluo.intensity.phenol.average (relative)", 
+ 												"side.nir.intensity.average (relative)",
+ 												"top.nir.intensity.average (relative / pix)",
+ 												
+ 												"side.leaf.count.median (leafs)", 
+ 												"side.bloom.count (tassel)", 
+ 												"side.leaf.length.sum.norm.max (mm)", 
+ 												"volume.iap (px^3)", 
+ 												"volume.lt (px^3)", 
+ 												"volume.iap.wue", 
+ 												"side.nir.wetness.plant_weight_drought_loss", 
+ 												"top.nir.wetness.plant_weight_drought_loss", 
+ 												"side.nir.wetness.average (percent)", 
+ 												"top.nir.wetness.average (percent)", 
+ 												"side.area.relative", 
+ 												"side.height.norm.relative", 
+ 												"side.width.norm.relative", 
+ 												"top.area.relative", 
+ 												"side.area.relative", 
+ 												"volume.iap.relative", 
+ 												"side.height (px)", 
+ 												"side.width (px)", 
+ 												"side.area (px)", 
+ 												"top.area (px)",
+ 												############ new #######
+ 												"side.hull.area (px)",
+ 												"side.hull.area.norm (mm^2)",
+ 												"side.hull.pc1 (px)",
+ 												"side.hull.pc1.norm",
+ 												"side.hull.pc2",
+ 												"side.hull.pc2.norm",
+ 												"side.hull.fillgrade (percent)",		
+ 												"top.hull.area (px)",
+ 												"top.hull.area.norm (mm^2)",
+ 												"top.hull.pc1",
+ 												"top.hull.pc1.norm",
+ 												"top.hull.pc2",
+ 												"top.hull.pc2.norm",
+ 												"top.hull.fillgrade (percent)",
+ 												"side.vis.hue.average",
+ 												"top.vis.hue.average",
+ 												"mark1.y (percent)",
+ 												"mark2.y (percent)",
+ 												"mark3.y (percent)",
+ 												"top.ir.intensity.average",
+ 												"side.ir.intensity.average"
+ 												)
+ 				
+ 					descriptorSetName_nBoxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)", "yellow spectra normed to the realtionship between dry and normal"
+ 													"weight before watering (g)", 
+ 													"weight after watering (g)", 
+ 													"water weight (g)", 
+ 													"height (zoom corrected) (mm)", 
+ 													"width (zoom corrected) (mm)", 
+ 													"side area (zoom corrected) (mm^2)", 
+ 													"top area (zoom corrected) (mm^2)", 
+ 													"chlorophyll intensity (relative intensity/pixel)", 
+ 													"fluorescence intensity (relative intensity/pixel)", 
+ 													"side nir intensity (relative intensity/pixel)",
+ 													"top nir intensity (relative intensity/pixel)",
+ 													"number of leafs", 
+ 													"number of tassel florets", 
+ 													"length of leafs plus stem (mm)", 			 
+ 													"digital biomass (visible light images, IAP formula) (px^3)", 
+ 													"digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 													"volume based water use efficiency", 
+ 													"weighted loss through drought stress (side)", 
+ 													"weighted loss through drought stress (top)", 
+ 													"Average wetness of side image", 
+ 													"Average wetness of top image", 
+ 													"growth in %/day", 
+ 													"plant height growth rate (%/day)", 
+ 													"plant width growth rate (%/day)", 
+ 													"top area growth rate (%/day)", 
+ 													"side area growth rate (%/day)", 
+ 													"volume growth (visible light images, IAP based formula) (%/day)", 
+ 													"height (px)", 
+ 													"width (px)", 
+ 													"side area (px)", 
+ 													"top area (px)",
+ 													####### new #######
+ 													"side area of convex hull (px)",
+ 													"side area of convex hull (zoom corrected) (mm^2)",
+ 													"side maximum extension (px)",
+ 													"side maximum extension (zoom corrected) (mm)",
+ 													"opposite direction of the side maximum extension (px)",
+ 													"opposite direction of the side maximum extension (zoom corrected) (mm)",
+ 													"fillgrade of side convex hull (%)",
+ 													"top area of convex hull (px)",
+ 													"top area of convex hull (zoom corrected) (mm^2)",
+ 													"top maximum extension (px)",
+ 													"top maximum extension (zoom corrected) (mm)",
+ 													"opposite direction of the top maximum extension (px)",
+ 													"opposite direction of the top maximum extension (zoom corrected) (mm)",
+ 													"fillgrade of top convex hull (%)",
+ 													"side visible hue average value",
+ 													"top visible hue average value",
+ 													"blue marker position from top (%)",
+ 													"blue marker position from middle (%)",
+ 													"blue marker position from bottom  (%)",
+ 													"top ir intensity",
+ 													"side ir intensity"
+ 													)		
+ 				}
+ 	
+ 				nBoxOptions= NULL
+ 				#diagramTypVector = rep.int("nboxplot", times=length(descriptorSetName))
+ 		
+ 				#boxplot
+ 				descriptorSet_boxplot = c(#"volume.my"
+ 										   "side.height.norm (mm)", 
+ 										   "side.width.norm (mm)", 
+ 										   "side.area.norm (mm^2)", 
+ 										   "top.area.norm (mm^2)", 
+ 										   "volume.fluo.iap", 
+ 										   "volume.iap (px^3)", 
+ 										   "volume.lt (px^3)", 
+ 										   "side.height (px)", 
+ 										   "side.width (px)", 
+ 										   "side.area (px)", 
+ 										   "top.area (px)"
+ 											)
+ 				
+ 				descriptorSetName_boxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 											   "height (zoom corrected) (mm)", 
+ 										  	   "width (zoom corrected) (mm)", 
+ 											   "side area (zoom corrected) (mm^2)", 
+ 											   "top area (zoom corrected) (mm^2)", 
+ 											   "digital biomass (fluorescence images, IAP formula) (px^3)", 
+ 											   "digital biomass (visible light images, IAP formula) (px^3)", 
+ 											   "digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 											   "height (px)", 
+ 											   "width (px)", 
+ 											   "side area (px)", 
+ 											   "top area (px)"
+ 												)	
+ 				#boxOptions= list(daysOfBoxplotNeeds=c("phase4"))
+ 				boxOptions= NULL
+ 				
+ 				#spiderplot
+ 				descriptorSet_spiderplot = c(#"volume.my"
+ 						"side.height.norm (mm)$side.width.norm (mm)$side.area.norm (mm^2)$top.area.norm (mm^2)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average",
+ 						"side.height (px)$side.width (px)$side.area (px)$top.area (px)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average"
+ 
+ 				)
+ 				
+ 				descriptorSetName_spiderplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 						"height (zoom corrected) (mm)$width (zoom corrected) (mm)$side area (zoom corrected) (mm^2)$top area (zoom corrected) (mm^2)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value",
+ 						"height (px)$width (px)$side area (px)$top area (px)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value"
+ #						"Zoom corrected Spiderchart", 
+ #						"Spiderchart"
+ 				)	
+ 
+ 				#spiderOptions= list(typOfGeomBar=c("x", "y"))
+ 				spiderOptions= list(typOfGeomBar=c("x"))
+ 				
+ 				
+ 				descriptorSet_violinBox = c(
+ 						"side.height.norm (mm)",
+ 						"side.width.norm (mm)",
+ 						"side.area.norm (mm^2)",
+ 						"top.area.norm (mm^2)",
+ 						"side.fluo.intensity.average (relative)",
+ 						"side.nir.intensity.average (relative)",
+ 						"side.vis.hue.average",
+ 						"top.vis.hue.average",
+ 						"top.ir.intensity.average",
+ 						"side.ir.intensity.average"
+ 				)	
+ 				
+ 				descriptorSetName_violinBox = c(
+ 						"height (zoom corrected) (mm)",
+ 						"width (zoom corrected) (mm)",
+ 						"side area (zoom corrected) (mm^2)",
+ 						"top area (zoom corrected) (mm^2)",
+ 						"side fluo intensity",
+ 						"side nir intensity",
+ 						"side visible hue average value",
+ 						"top visible hue average value",
+ 						"top ir intensity",
+ 						"side ir intensity"
+ 				)	
+ 				
+ 				violinOptions= NULL
+ 				
+ 				
+ 				#boxplotStacked
+ 				descriptorSet_boxplotStacked = c("side.nir.normalized.histogram.bin.", 
+ 								   				  "side.fluo.histogram.bin.", 
+ 										  		  "top.nir.histogram.bin.", 
+ 												  "side.fluo.histogram.ratio.bin.", 
+ 												  "side.nir.normalized.histogram.bin.", 
+ 												  "side.fluo.normalized.histogram.bin.", 
+ 												  "side.fluo.normalized.histogram.ratio.bin.", 
+ 												  "side.vis.hue.histogram.ratio.bin.", 
+ 												  "side.vis.normalized.histogram.ratio.bin.", 
+ 												  "top.fluo.histogram.bin.", 
+ 												  "top.fluo.histogram.ratio.bin.", 
+ 												  "top.nir.histogram.bin.", 
+ 												  "top.vis.hue.histogram.ratio.bin.",
+ 												  "top.ir.histogram.bin.",
+ 												  "side.ir.histogram.bin."
+ 												)
+ 												  
+ 										  
+ 				descriptorSetName_boxplotStacked = c("side near-infrared intensities (zoom corrected) (%)", 
+ 													  "side fluorescence colour spectra (%)", 
+ 													  "top near-infrared intensities (%)", 
+ 													  "side fluorescence ratio histogram (%)", 
+ 													  "side near-infrared (zoom corrected) (%)", 
+ 													  "side fluorescence colour spectra (zoom corrected) (%)", 
+ 													  "side fluorescence  colour spectra (%)", 
+ 													  "side visible light colour histogram (%)", 
+ 													  "side visible light ratio histogram (zoom corrected) (%)", 
+ 													  "top fluorescence colour spectra (%)", 
+ 													  "top fluo ratio histogram (%)", 
+ 													  "NIR top histogram (%)", 
+ 													  "top visible light color histogram (%)",
+ 													  "top infrared light heat histogram (%)",
+ 													  "side infrared light heat histogram (%)"
+ 														)
+ 				
+ 				descriptorList <- addDesSet(descriptorSet_boxplotStacked, descriptorSetName_boxplotStacked, workingDataSet)
+ 				descriptorSet_boxplotStacked <- descriptorList$desSet
+ 				descriptorSetName_boxplotStacked <- descriptorList$desName
+ 				
+ 				stackedBarOptions = list(typOfGeomBar=c("fill", "stack", "dodge"))
+ 				#diagramTypVector = c(diagramTypVector, "boxplotStacked", "boxplotStacked")
+ 				
+ 				appendix = as.logical(appendix %exists% args[5])
+ 			
+ 				if (appendix) {
+ 					blacklist = buildBlacklist(workingDataSet, descriptorSet_nBoxplot)
+ 					descriptorSetAppendix = colnames(workingDataSet[!as.data.frame(sapply(colnames(workingDataSet), '%in%', blacklist))[, 1]])
+ 					descriptorSetNameAppendix = descriptorSetAppendix
+ 					#diagramTypVectorAppendix = rep.int("nboxplot", times=length(descriptorSetNameAppendix))
+ 				}
+ 			
+ 				saveFormat = saveFormat %exists% args[2]
+ 			
+ 				listOfTreatAndFilterTreat = checkOfTreatments(args, treatment, filterTreatment, secondTreatment, filterSecondTreatment, workingDataSet, debug)
+ 				treatment = listOfTreatAndFilterTreat[[1]][[1]]
+ 				secondTreatment = listOfTreatAndFilterTreat[[1]][[2]]
+ 				filterTreatment = listOfTreatAndFilterTreat[[2]][[1]]
+ 				filterSecondTreatment = listOfTreatAndFilterTreat[[2]][[2]]
+ 
+ 				if (treatment == "noneTreatment") {
+ 					workingDataSet <- cbind(workingDataSet, noneTreatment=rep.int("average", times = length(workingDataSet[,1])))	
+ 				}
+ 
+ 				isRatio	= as.logical(isRatio %exists% args[6])
+ 			} else {
+ 				fileName = "error"
+ 			}
+ 		}
+ 		
+ 	}  else if (typOfStartOptions == "test"){
+ 		
+ 		library("snowfall")
+ 		debug <- TRUE
+ 		initRfunction(debug)
+ 		sfStop()
+ 		
+ 		treatment <- "Treatment"
+ 		#filterTreatment <- "dry / normal"
+ 		filterTreatment <- "dry$normal"
+ 		#filterTreatment <- "Trockentress$normal bewaessert"
+ 
+ 		#secondTreatment <- "none"
+ 		#filterSecondTreatment  <- "none"
+ 		
+ 		secondTreatment <- "Species"
+ 		filterSecondTreatment  <- "Athletico$Fernandez$Weisse Zarin"
+ 		
+ 		#filterSecondTreatment <- "Athletico$Weisse Zarin"
+ 		#filterSecondTreatment <- "BCC_1367_Apex$BCC_1391_Isaria$BCC_1403_Perun$BCC_1433_HeilsFranken$BCC_1441_PflugsIntensiv$Wiebke$BCC_1413_Sissy$BCC_1417_Trumpf"
+ 		filterXaxis <- "none"
+ 
+ 		bgColor <- "transparent"
+ 		isGray="FALSE"
+ 		#showResultInR <- FALSE
+ 		
+ 		fileName <- "report.csv"
+ 		separation <- ";"
+ 		workingDataSet <- separation %readInputDataFile% fileName
+ 		
+ 		saveName <- "test2"
+ 		yAxisName <- "test2"
+ 		
+ 		# c("0", "1", "2", "3", "4") entspricht c("n", "d", "w", "c", "s")
+ 		stress.Start <- 27
+ 		stress.End <- 44
+ 		stress.Typ <- "001"
+ 		stress.Label <- "-1"
+ 		
+ 		isRatio <- TRUE
+ 		calculateNothing <- FALSE
+ 		stoppTheCalculation <- FALSE
+ 		iniDataSet = workingDataSet
+ 		
+ 		
+ 		descriptorSet_nBoxplot = c(#"volume.my", "volume.fluo.plant_weight.iap"
+ 				"Weight A (g)", 
+ 				"Weight B (g)", 
+ 				"Water (weight-diff)", 
+ 				"side.height.norm (mm)", 
+ 				"side.width.norm (mm)", 
+ 				"side.area.norm (mm^2)", 
+ 				"top.area.norm (mm^2)", 											
+ 				"side.fluo.intensity.chlorophyl.average (relative)", 
+ 				"side.fluo.intensity.phenol.average (relative)", 
+ 				"side.nir.intensity.average (relative)",
+ 				"top.nir.intensity.average (relative / pix)",
+ 				
+ 				"side.leaf.count.median (leafs)", 
+ 				"side.bloom.count (tassel)", 
+ 				"side.leaf.length.sum.norm.max (mm)", 
+ 				"volume.iap (px^3)", 
+ 				"volume.lt (px^3)", 
+ 				"volume.iap.wue", 
+ 				"side.nir.wetness.plant_weight_drought_loss", 
+ 				"top.nir.wetness.plant_weight_drought_loss", 
+ 				"side.nir.wetness.average (percent)", 
+ 				"top.nir.wetness.average (percent)", 
+ 				"side.area.relative", 
+ 				"side.height.norm.relative", 
+ 				"side.width.norm.relative", 
+ 				"top.area.relative", 
+ 				"side.area.relative", 
+ 				"volume.iap.relative", 
+ 				"side.height (px)", 
+ 				"side.width (px)", 
+ 				"side.area (px)", 
+ 				"top.area (px)",
+ 				############ new #######
+ 				"side.hull.area (px)",
+ 				"side.hull.area.norm (mm^2)",
+ 				"side.hull.pc1 (px)",
+ 				"side.hull.pc1.norm",
+ 				"side.hull.pc2",
+ 				"side.hull.pc2.norm",
+ 				"side.hull.fillgrade (percent)",		
+ 				"top.hull.area (px)",
+ 				"top.hull.area.norm (mm^2)",
+ 				"top.hull.pc1",
+ 				"top.hull.pc1.norm",
+ 				"top.hull.pc2",
+ 				"top.hull.pc2.norm",
+ 				"top.hull.fillgrade (percent)",
+ 				"side.vis.hue.average",
+ 				"top.vis.hue.average",
+ 				"mark1.y (percent)",
+ 				"mark2.y (percent)",
+ 				"mark3.y (percent)",
+ 				"top.ir.intensity.average",
+ 				"side.ir.intensity.average"
+ 		)
+ 		
+ 		descriptorSetName_nBoxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)", "yellow spectra normed to the realtionship between dry and normal"
+ 				"weight before watering (g)", 
+ 				"weight after watering (g)", 
+ 				"water weight (g)", 
+ 				"height (zoom corrected) (mm)", 
+ 				"width (zoom corrected) (mm)", 
+ 				"side area (zoom corrected) (mm^2)", 
+ 				"top area (zoom corrected) (mm^2)", 
+ 				"chlorophyll intensity (relative intensity/pixel)", 
+ 				"fluorescence intensity (relative intensity/pixel)", 
+ 				"side nir intensity (relative intensity/pixel)",
+ 				"top nir intensity (relative intensity/pixel)",
+ 				"number of leafs", 
+ 				"number of tassel florets", 
+ 				"length of leafs plus stem (mm)", 			 
+ 				"digital biomass (visible light images, IAP formula) (px^3)", 
+ 				"digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 				"volume based water use efficiency", 
+ 				"weighted loss through drought stress (side)", 
+ 				"weighted loss through drought stress (top)", 
+ 				"Average wetness of side image", 
+ 				"Average wetness of top image", 
+ 				"growth in %/day", 
+ 				"plant height growth rate (%/day)", 
+ 				"plant width growth rate (%/day)", 
+ 				"top area growth rate (%/day)", 
+ 				"side area growth rate (%/day)", 
+ 				"volume growth (visible light images, IAP based formula) (%/day)", 
+ 				"height (px)", 
+ 				"width (px)", 
+ 				"side area (px)", 
+ 				"top area (px)",
+ 				####### new #######
+ 				"side area of convex hull (px)",
+ 				"side area of convex hull (zoom corrected) (mm^2)",
+ 				"side maximum extension (px)",
+ 				"side maximum extension (zoom corrected) (mm)",
+ 				"opposite direction of the side maximum extension (px)",
+ 				"opposite direction of the side maximum extension (zoom corrected) (mm)",
+ 				"fillgrade of side convex hull (%)",
+ 				"top area of convex hull (px)",
+ 				"top area of convex hull (zoom corrected) (mm^2)",
+ 				"top maximum extension (px)",
+ 				"top maximum extension (zoom corrected) (mm)",
+ 				"opposite direction of the top maximum extension (px)",
+ 				"opposite direction of the top maximum extension (zoom corrected) (mm)",
+ 				"fillgrade of top convex hull (%)",
+ 				"side visible hue average value",
+ 				"top visible hue average value",
+ 				"blue marker position from top (%)",
+ 				"blue marker position from middle (%)",
+ 				"blue marker position from bottom  (%)",
+ 				"top ir intensity",
+ 				"side ir intensity"
+ 		)		
+ 	
+ 	nBoxOptions= NULL
+ 	
+ 	#boxplot
+ 	descriptorSet_boxplot = c(#"volume.my"
+ 			"side.height.norm (mm)", 
+ 			"side.width.norm (mm)", 
+ 			"side.area.norm (mm^2)", 
+ 			"top.area.norm (mm^2)", 
+ 			"volume.fluo.iap", 
+ 			"volume.iap (px^3)", 
+ 			"volume.lt (px^3)", 
+ 			"side.height (px)", 
+ 			"side.width (px)", 
+ 			"side.area (px)", 
+ 			"top.area (px)"
+ 	)
+ 	
+ 	descriptorSetName_boxplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 			"height (zoom corrected) (mm)", 
+ 			"width (zoom corrected) (mm)", 
+ 			"side area (zoom corrected) (mm^2)", 
+ 			"top area (zoom corrected) (mm^2)", 
+ 			"digital biomass (flurescence images, IAP formula) (px^3)", 
+ 			"digital biomass (visible light images, IAP formula) (px^3)", 
+ 			"digital biomass (visible light, LemnaTec 0,90 formula) (px^3)", 
+ 			"height (px)", 
+ 			"width (px)", 
+ 			"side area (px)", 
+ 			"top area (px)"
+ 	)	
+ 	
+ 	#boxOptions= list(daysOfBoxplotNeeds=c("phase4"))
+ 	boxOptions= NULL
+ 	
+ 	#violinplot
+ 	descriptorSet_violinBox = c(
+ 			"side.height.norm (mm)",
+ 			"side.width.norm (mm)",
+ 			"side.area.norm (mm^2)",
+ 			"top.area.norm (mm^2)",
+ 			"side.fluo.intensity.average (relative)",
+ 			"side.nir.intensity.average (relative)",
+ 			"side.vis.hue.average",
+ 			"top.vis.hue.average",
+ 			"top.ir.intensity.average",
+ 			"side.ir.intensity.average"
+ 	)	
+ 	
+ 	descriptorSetName_violinBox = c(
+ 			"height (zoom corrected) (mm)",
+ 			"width (zoom corrected) (mm)",
+ 			"side area (zoom corrected) (mm^2)",
+ 			"top area (zoom corrected) (mm^2)",
+ 			"side fluo intensity",
+ 			"side nir intensity",
+ 			"side visible hue average value",
+ 			"top visible hue average value",
+ 			"top ir intensity",
+ 			"side ir intensity"
+ 	)	
+ 	
+ 	violinOptions= NULL
+ 	
+ 	
+ 	#boxplotStacked
+ 	descriptorSet_boxplotStacked = c("side.nir.normalized.histogram.bin.", 
+ 			"side.fluo.histogram.bin.", 
+ 			"top.nir.histogram.bin.", 
+ 			"side.fluo.histogram.ratio.bin.", 
+ 			"side.nir.normalized.histogram.bin.", 
+ 			"side.fluo.normalized.histogram.bin.", 
+ 			"side.fluo.normalized.histogram.ratio.bin.", 
+ 			"side.vis.hue.histogram.ratio.bin.", 
+ 			"side.vis.normalized.histogram.ratio.bin.", 
+ 			"top.fluo.histogram.bin.", 
+ 			"top.fluo.histogram.ratio.bin.", 
+ 			"top.nir.histogram.bin.", 
+ 			"top.vis.hue.histogram.ratio.bin.",
+ 			"top.ir.histogram.bin.",
+ 			"side.ir.histogram.bin."
+ 	)
+ 	
+ 	
+ 	descriptorSetName_boxplotStacked = c("side near-infrared intensities (zoom corrected) (%)", 
+ 			"side fluorescence colour spectra (%)", 
+ 			"top near-infrared intensities (%)", 
+ 			"side fluorescence ratio histogram (%)", 
+ 			"side near-infrared (zoom corrected) (%)", 
+ 			"side fluorescence colour spectra (zoom corrected) (%)", 
+ 			"side fluorescence  colour spectra (%)", 
+ 			"side visible light colour histogram (%)", 
+ 			"side visible light ratio histogram (zoom corrected) (%)", 
+ 			"top fluorescence colour spectra (%)", 
+ 			"top fluo ratio histogram (%)", 
+ 			"NIR top histogram (%)", 
+ 			"top visible light color histogram (%)",
+ 			"top infrared light heat histogram (%)",
+ 			"side infrared light heat histogram (%)"
+ 	)
+ 	
+ 	#spiderplot
+ 	descriptorSet_spiderplot = c(#"volume.my"
+ 			"side.height.norm (mm)$side.width.norm (mm)$side.area.norm (mm^2)$top.area.norm (mm^2)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average",
+ 			"side.height (px)$side.width (px)$side.area (px)$top.area (px)$side.fluo.intensity.average (relative)$side.nir.intensity.average (relative)$side.vis.hue.average$top.vis.hue.average"
+ 	
+ 	)
+ 	
+ 	descriptorSetName_spiderplot = c(#"digital biomass (visible light images, IAP formula) (px^3)"
+ 			"height (zc) (mm)$width (zc) (mm)$side area (zc) (mm^2)$top area (zc) (mm^2)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value",
+ 			"height (px)$width (px)$side area (px)$top area (px)$side fluo intensity$side nir intensity$side visible hue average value$top visible hue average value"
+ #						"Zoom corrected Spiderchart", 
+ #						"Spiderchart"
+ 	)	
+ 	
+ 	#spiderOptions= list(typOfGeomBar=c("x", "y"))
+ 	spiderOptions= list(typOfGeomBar=c("x"))
+ 	
+ 	descriptorList <- addDesSet(descriptorSet_boxplotStacked, descriptorSetName_boxplotStacked, workingDataSet)
+ 	descriptorSet_boxplotStacked <- descriptorList$desSet
+ 	descriptorSetName_boxplotStacked <- descriptorList$desName
+ 	
+ 	stackedBarOptions = list(typOfGeomBar=c("fill", "stack", "dodge"))
+ 		
+ 		
+ 		boxDes = descriptorSet_boxplot
+ 		boxStackDes = descriptorSet_boxplotStacked 
+ 		boxDesName = descriptorSetName_boxplot
+ 		boxStackDesName = descriptorSetName_boxplotStacked 
+ 		nBoxOptions= nBoxOptions
+ 		boxOptions= boxOptions
+ 		stackedBarOptions = stackedBarOptions
+ 		nBoxDes <- descriptorSet_nBoxplot
+ 		nBoxDesName <- descriptorSetName_nBoxplot
+ 		boxSpiderDes <- descriptorSet_spiderplot
+ 		boxSpiderDesName <- descriptorSetName_spiderplot
+ 		violinBoxDes <- descriptorSet_violinBox
+ 		violinBoxDesName <- descriptorSetName_violinBox
+ 		
+ 		appendix <- FALSE
+ 		if (appendix) {
+ 			blacklist = buildBlacklist(workingDataSet, descriptorSet_nBoxplot)
+ 			descriptorSetAppendix = colnames(workingDataSet[!as.data.frame(sapply(colnames(workingDataSet), '%in%', blacklist))[, 1]])
+ 			descriptorSetNameAppendix = descriptorSetAppendix
+ 			#diagramTypVectorAppendix = rep.int("nboxplot", times=length(descriptorSetNameAppendix))		
+ 			descriptorSet_nBoxplot = descriptorSetAppendix
+ 			descriptorSetName_nBoxplot = descriptorSetNameAppendix
+ 			#diagramTypVector = diagramTypVectorAppendix
+ 			descriptorSet_boxplot = NULL
+ 			descriptorSetName_boxplot = NULL
+ 			descriptorSet_boxplotStacked = NULL
+ 			descriptorSetName_boxplotStacked = NULL
+ 			descriptorSet_spiderplot = NULL
+ 			descriptorSetName_spiderplot = NULL
+ 			descriptorSet_violinBox = NULL
+ 		}
+ 		
+ 		listOfTreatAndFilterTreat = checkOfTreatments(args, treatment, filterTreatment, secondTreatment, filterSecondTreatment, workingDataSet, debug)
+ 		treatment = listOfTreatAndFilterTreat[[1]][[1]]
+ 		secondTreatment = listOfTreatAndFilterTreat[[1]][[2]]
+ 		filterTreatment = listOfTreatAndFilterTreat[[2]][[1]]
+ 		filterSecondTreatment = listOfTreatAndFilterTreat[[2]][[2]]
+ 		
+ 		if (treatment == "noneTreatment") {
+ 			workingDataSet <- cbind(workingDataSet, noneTreatment=rep.int("average", times = length(workingDataSet[,1])))	
+ 		}
+ 		
+ 	}
Check for new packages...
Check for package updates...
Load libraries:
Cairo
RColorBrewer
data.table
ggplot2
fmsb
methods
grid
snow
snowfall
Calling a snowfall function without calling 'sfInit' first or after sfStop().
'sfInit()' is called now.
snowfall 1.84 initialized: sequential execution, one CPU.

Read input file report.csv
DebugBreakPoint:  Start of checkOfTreatments()
Descriptor 'Treatment' is missing!
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions
Zusätzlich: Warnmeldung:
In is.na(iniDataSet[descriptorVector]) :
  is.na() auf nicht-(Liste oder Vektor) des Typs 'NULL' angewendet
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions

3: stop("'x' must be an array of at least two dimensions") at #10
2: colSums(!is.na(iniDataSet[descriptorVector])) at #10
1: checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, 
       FALSE)
> 	
> 	if (typOfStartOptions != "test"){
+ 		secondRun = appendix
+ 		appendix =  FALSE
+ 		
+ 		if (fileName != "error" & (length(descriptorSet_nBoxplot) > 0 || length(descriptorSet_boxplot) > 0 || length(descriptorSet_boxplotStacked) > 0)) {
+ 			time = system.time({
+ 				repeat {					
+ 					if (appendix) 
+ 						ownCat("Generate diagrams for annotation descriptors...")
+ 					else
+ 						ownCat("Generate diagrams for main descriptors...")
+ 					createDiagrams(iniDataSet = workingDataSet, saveFormat = saveFormat, dpi = dpi, isGray = isGray,
+ 										nBoxDes = descriptorSet_nBoxplot, boxDes = descriptorSet_boxplot, boxStackDes = descriptorSet_boxplotStacked, boxSpiderDes = descriptorSet_spiderplot, violinBoxDes = descriptorSet_violinBox,
+ 										nBoxDesName = descriptorSetName_nBoxplot, boxDesName = descriptorSetName_boxplot, boxStackDesName = descriptorSetName_boxplotStacked, boxSpiderDesName = descriptorSetName_spiderplot, violinBoxDesName = descriptorSetName_violinBox,
+ 										nBoxOptions= nBoxOptions, boxOptions= boxOptions, stackedBarOptions = stackedBarOptions, spiderOptions = spiderOptions, violinOptions = violinOptions,
+ 										treatment = treatment, filterTreatment = filterTreatment, 
+ 										secondTreatment = secondTreatment, filterSecondTreatment = filterSecondTreatment, filterXaxis = filterXaxis, xAxis = xAxis, 
+ 										xAxisName = xAxisName, debug = debug, appendix=appendix, isRatio=isRatio,
+ 										stress.Start=stress.Start, stress.End = stress.End, stress.Typ = stress.Typ, stress.Label = stress.Label)
+ 					if (secondRun) {
+ 						appendix = TRUE
+ 						secondRun = FALSE
+ 						descriptorSet_nBoxplot = descriptorSetAppendix
+ 						descriptorSetName_nBoxplot = descriptorSetNameAppendix
+ 						#diagramTypVector = diagramTypVectorAppendix
+ 						descriptorSet_boxplot = NULL
+ 						descriptorSetName_boxplot = NULL
+ 						descriptorSet_boxplotStacked = NULL
+ 						descriptorSetName_boxplotStacked = NULL
+ 						descriptorSet_spiderplot = NULL
+ 						descriptorSetName_spiderplot = NULL
+ 						descriptorSet_violinBox = NULL
+ 						descriptorSetName_violinBox = NULL
+ 						
+ 					} else {
+ 						break
+ 					}
+ 				}
+ 				checkIfAllNecessaryFilesAreThere()
+ 			}, TRUE)
+ 			
+ 			ownCat("Processing finished")		
+ 			ownCat(time)
+ 			
+ 		} else {
+ 			ownCat("No filename or no descriptor!")
+ 			checkIfAllNecessaryFilesAreThere()
+ 		}
+ 		
+ 		if (debug) {
+ 			ownCat(warnings())
+ 			
+ 		}
+ 	} 
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions
Zusätzlich: Warnmeldungen:
1: Neustart einer unterbrochenen promise evaluation 
2: In is.na(iniDataSet[descriptorVector]) :
  is.na() auf nicht-(Liste oder Vektor) des Typs 'NULL' angewendet
Fehler in colSums(!is.na(iniDataSet[descriptorVector])) : 
  'x' must be an array of at least two dimensions

5: stop("'x' must be an array of at least two dimensions") at #10
4: colSums(!is.na(iniDataSet[descriptorVector])) at #10
3: checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, 
       FALSE) at #2
2: getVector(checkIfDescriptorIsNaOrAllZero(descriptorVector, workingDataSet, 
       FALSE)) at #24
1: checkOfTreatments(args, treatment, filterTreatment, secondTreatment, 
       filterSecondTreatment, workingDataSet, debug) at #606
> 		workingDataSet <- separation %readInputDataFile% fileName
Read input file report.csv
Warnmeldung:
In deparse(., width.cutoff = max(20, width - 10)) :
  ungültiger 'cutoff' in deparse, nutze Standard
> file.exists(fileName)
[1] FALSE
> q()
Save workspace image? [y/n/c]: y

[INFO] 04.06.2012 07:17:54 - R stopped.
