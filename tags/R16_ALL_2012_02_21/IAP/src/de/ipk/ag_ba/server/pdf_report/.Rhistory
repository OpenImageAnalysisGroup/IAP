##------ 17.11.2011 06:59:44 ------##
getwd()
##------ 17.11.2011 07:00:05 ------##
A
workingMatrix
workingMatrix[A]
mapply(mean, A, workingMatrix)
apply(A,2, mean, workingMatrix)
apply(A,1, mean, workingMatrix)
apply(A[,],1, mean, workingMatrix)
apply(A,1, *, workingMatrix)
apply(A,1, "*", workingMatrix)
mapply(mean,apply(A,1, "*", workingMatrix),length(workingMatrix[,1]))
mapply(mean,apply(A,1, "*", workingMatrix),length(workingMatrix[1,]))
length(workingMatrix[1,]
)
length(workingMatrix[,1])
length(colnames(workingMatrix[,1])
)
length(colnames(workingMatrix))
length(colnames(workingMatrix[1,]))
workingMatrix
A
length(A)
length(A[1,])
length(A[,1])
mapply(mean,apply(A,1, "*", workingMatrix),length(A[,1]))
mapply(mean,t(apply(A,1, "*", workingMatrix)),length(A[,1]))
mapply(mean,apply(A,1, "*", workingMatrix),length(A[,1]))
apply(A,1, "*", workingMatrix)
mean(apply(A,1, "*", workingMatrix)[,1])
?mapply
mapply(mean,apply(A,1, "*", workingMatrix),c(1,2))
mapply(mean,apply(A,1, "*", workingMatrix),c(1,2,3))
mapply(mean,apply(A,1, "*", workingMatrix),c("1","2","3"))
mapply(mean,apply(A,1, "*", workingMatrix))
mapply(mean,t(apply(A,1, "*", workingMatrix)))
t(apply(A,1, "*", workingMatrix))
mapply(mean,apply(A,1, "*", workingMatrix)[1,],c("1","2","3"))
mapply(mean,apply(A,1, "*", workingMatrix)[1,])
mapply(mean,apply(A,1, "*", workingMatrix)[,1])
mapply(mean,apply(A,2, "*", workingMatrix)[,1])
apply(A,2, "*", workingMatrix)
apply(A,1, "*", workingMatrix)
mapply(mean,apply(A,1, "*", workingMatrix)!= 0)
mapply("%in%", overallList$iniDataSet[column[column!="none"]], filterTyp[filterTyp!="none"])
overallList$iniDataSet[column[column!="none"]]
filterTyp[filterTyp!="none"]
mapply("%in%", overallList$iniDataSet[column[column!="none"]], filterTyp[filterTyp!="none"])
mapply(mean,t(apply(A,1, "*", workingMatrix)), c(1,2,3))
mapply(mean,t(apply(A,1, "*", workingMatrix)), c(1))
t(apply(A,1, "*", workingMatrix))
apply(mean,t(apply(A,1, "*", workingMatrix)), c(1))
apply(apply(A,1, "*", workingMatrix),2, mean)
colMeans(apply(A,1, "*", workingMatrix))
B <- apply(A,1, "*", workingMatrix)
B[B==0]
B[B==0] <- NA
b
GB
B
colMeans(apply(A,1, "*", workingMatrix),na.rm=TRUE)
colMeans(apply(A,1, "*", workingMatrix),na.rm=FALSE)
B <- apply(A,1, "*", workingMatrix)
B
B[B==0] <- NA
B
B[4,1]
mean(B[4,1])
mean(B[4:6,1])
mean(B[4:6,1],na.rm=T)
mean(B[1:6,1],na.rm=T)
colMeans(B, na.rm=T)
colMeans(workingMatrix,na.rm = T)
W <- workingMatrix
cbind(W,W)
colnames(W) <- c("Test", "Hallo")
W
W <- cbind(W,W)
colnames(W) <- c("Test", "Hallo")
W
tempW <- workingMatrix
workingMatrix <- W
workingMatrix
workingMatrix <- W
apply(t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),1,"*",workingMatrix)
apply(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis),1,"*",workingMatrix)
A
t(A)
t(A) %*% workingMatrix 
workingMatrix %*% t(A) 
class(workingMatrix)
class(t(A))
x <- a:4
x <- 1:4
x %*% x
workingMatrix %*% A 
A
A <- t(A)
A
workingMatrix
n <- length(A[,1])
n
S <- (t(A) %*% A)/(n-1)
S
A
A
workingMatrix
A %*% workingMatrix
apply(t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),2,"%*%",workingMatrix)
mapply("%*%",t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),workingMatrix)
A <- as.matrix(apply(t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),2,"%*%",workingMatrix))
A <- (apply(t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),2,"%*%",workingMatrix))
as.matrix(apply(t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),2,"%*%",workingMatrix))
colMeans(as.matrix(apply(t(apply(as.matrix(rownames(workingMatrix)),1,"==", overallList$filterXaxis)),2,"%*%",workingMatrix)))
workingMatrix
bx(workingMatrix, rownames(workingMatrix), mean)
bx(workingMatrix, workingMatrix[,overallList$xAxis], mean)
bx(workingMatrix, overallList$xAxis, mean)
by(workingMatrix[,1], overallList$xAxis, mean)
by(workingMatrix, overallList$xAxis, mean)
?by
nrow(workingMatrix)
by(workingMatrix, workingMatrix[overallList$xAxis], mean)
length(workingMatrix[overallList$xAxis])
length(workingMatrix[,overallList$xAxis])
by(workingMatrix, workingMatrix[,overallList$xAxis], mean)
workingMatrix[-1]
workingMatrix[,-1]
workingMatrix
temp <- by(workingMatrix, workingMatrix[,overallList$xAxis], mean)
temp
class(temp)
temp[,1]
temp[1]
temp$`6`
temp$overallList$filterXaxis
overallList$filterXaxis
temp[overallList$filterXaxis]
temp
temp[1]
temp
temp["INDICES"]
temp <- by(workingMatrix, workingMatrix[,overallList$xAxis], mean, simplify = TRUE)
temp
temp <- by(workingMatrix, workingMatrix[,overallList$xAxis], mean, simplify = FALSE)
temp
temp["10"]
temp[10]
temp[as.character(overallList$filterXaxis)]
temp2
temp2$`10`["Plant.ID"]
(temp2[as.character(overallList$filterXaxis)])["Plant.ID"]
(temp2[as.character(overallList$filterXaxis)])
(temp2[as.character(overallList$filterXaxis)])["Plant.ID"]
(temp2[as.character(overallList$filterXaxis)])$"Plant.ID"
temp2[as.character(overallList$filterXaxis)]["Plant.ID"]
temp2[as.character(overallList$filterXaxis)][["Plant.ID"]]
temp2[as.character(overallList$filterXaxis)][[1]]
temp2[as.character(overallList$filterXaxis)][1]
temp2[as.character(overallList$filterXaxis)][,1]
temp2[as.character(overallList$filterXaxis)][c(1,2,3)]
temp2[as.character(overallList$filterXaxis)]
temp2[as.character(overallList$filterXaxis)]$"6"
temp2[as.character(overallList$filterXaxis)]["6"]
temp2[as.character(overallList$filterXaxis)]["6"]["Plant.ID"]
temp2[as.character(overallList$filterXaxis)][["6"]]["Plant.ID"]
temp2[as.character(overallList$filterXaxis)][[as.character(overallList$filterXaxis]]["Plant.ID"]
temp2[[as.character(overallList$filterXaxis]]["Plant.ID"]
temp2[as.character(overallList$filterXaxis]["Plant.ID"]
temp2[as.character(overallList$filterXaxis)][[as.character(overallList$filterXaxis)]]["Plant.ID"]
temp2[[as.character(overallList$filterXaxis)]]["Plant.ID"]
temp2[as.character(overallList$filterXaxis)]["Plant.ID"]
temp2
temp2[[]]["Plant.ID"]
temp2[]["Plant.ID"]
temp2[1]["Plant.ID"]
temp2[1]
class(temp2[1])
as.vector(temp2)
as.vector(temp2)["6"]
as.vector(temp2)["6"]["Plant.ID"]
temp2["6"]["Plant.ID"]
temp2[["6"]]["Plant.ID"]
temp2[[as.character(overallList$filterXaxis)]]["Plant.ID"]
as.vector(temp2[[as.character(overallList$filterXaxis)]]["Plant.ID"])
as.matrix(temp2)
as.matrix(temp2[[]])
as.matrix(temp2[])
as.matrix(temp2[,])
as.matrix(temp2[[,]])
as.matrix(temp2[[1]])
as.matrix(temp2[[length(overallList$filterXaxis)]])
as.matrix(temp2[[c("6","8")]])
as.matrix(temp2[c("6","8")])
as.vector(temp2[c("6","8")])
temp2[c("6","8")]
temp2[c("6","8")][]
temp2[c("6","8")][1]
temp2[1]
temp2[[1]]
temp2[[c(1,2,3)]]
temp2[["1"]]
temp2[["Plant.ID"]]
names(temp2)[1]
temp2
temp[as.character(overallList$filterXaxis)]
temp[as.character(overallList$filterXaxis)][]
temp[as.character(overallList$filterXaxis)][[1]]
temp[as.character(overallList$filterXaxis)][[1]][Plant.ID]
temp[as.character(overallList$filterXaxis)][[1]]["Plant.ID"]
temp[as.character(overallList$filterXaxis)][[1,2]]["Plant.ID"]
temp[as.character(overallList$filterXaxis)][[c("1","2")]]["Plant.ID"]
temp[as.character(overallList$filterXaxis)][c("1","2")]["Plant.ID"]
temp[as.character(overallList$filterXaxis)][]["Plant.ID"]
temp[as.character(overallList$filterXaxis)][[]]["Plant.ID"]
tapply(workingMatrix[,1], workingMatrix[,overallList$xAxis], mean)
tapply(workingMatrix[,1], c("6","8"), mean)
tapply(workingMatrix[,1], workingMatrix[,overallList$xAxis], mean)
temp3 <- tapply(workingMatrix[,1], workingMatrix[,overallList$xAxis], mean)
class(tzemp3)
class(temp3)
temp3[6]
temp3["6"]
temp3[as.charcater(overallList$filterXaxis)]
temp3[as.character(overallList$filterXaxis)]
tapply(workingMatrix[,1], overallList$xAxis, mean)
tapply(workingMatrix[,1], overallList$iniDataSet[overallList$xAxis][,1], mean)
workingMatrix <- cbind(workingMatrix,workingMatrix)
colnames(workingMatrix) <- c("test1", "hallo")
workingMatrix
tapply(workingMatrix[,1], overallList$iniDataSet[overallList$xAxis][,1], mean)
tapply(workingMatrix, c(overallList$iniDataSet[overallList$xAxis][,1],overallList$iniDataSet[overallList$xAxis][,1]), mean)
sapply(workingMatrix, mean)
sapply(workingMatrix[,1], mean)
tapply(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean)
?tapply(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean)
tapply(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean, simplify = FALSE)
tapply(workingMatrix[,1], overallList$iniDataSet[overallList$xAxis][,1], mean, simplify = FALSE)
tapply(workingMatrix[,1], overallList$iniDataSet[overallList$xAxis][,1], mean, simplify = TRUE)
by(workingMatrix, workingMatrix[,overallList$xAxis], mean)
by(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean)
by(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean, simplify = TRUE)
by(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean, simplify = FALSE)
?by(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean, simplify = FALSE)
##------ 18.11.2011 06:53:03 ------##
temp[1]
temp["1"]
x <- matrix(runif(100), ncol=5)
x
x <- matrix(runif(100), ncol=2)
x
x <- matrix(runif(20), ncol=2)
x
x)
apply(as.matrix(rownames(exampleMatrix)),1,"==", workWithDays)
A
D
?count
?match
match(workWithDays, rownames(exampleMatrix), nomatch = FALSE)
match(rownames(exampleMatrix), workWithDays, nomatch = FALSE)
match(rownames(exampleMatrix), workWithDays)
sum(rownames(exampleMatrix) == workWithDays)
sum(workWithDays == rownames(exampleMatrix))
table(rownames(exampleMatrix))
table(rownames(exampleMatrix))[workWithDays]
table(rownames(exampleMatrix))[as.character(workWithDays)]
as.vector(table(rownames(exampleMatrix))[as.character(workWithDays)])
table(rownames(exampleMatrix))[as.character(workWithDays)]
table(rownames(exampleMatrix))[as.character(workWithDays)][,1]
table(rownames(exampleMatrix))[as.character(workWithDays)][1]
t(table(rownames(exampleMatrix))[as.character(workWithDays)])[1]
t(table(rownames(exampleMatrix))[as.character(workWithDays)])[,1]
t(table(rownames(exampleMatrix))[as.character(workWithDays)])[1,]
table(rownames(exampleMatrix))[as.character(workWithDays)][1,]
table(rownames(exampleMatrix))[as.character(workWithDays)][1]
table(rownames(exampleMatrix))[as.character(workWithDays)][[1]]
table(rownames(exampleMatrix))[as.character(workWithDays)]
as.vector(table(rownames(exampleMatrix))[as.character(workWithDays)])
t(as.vector(table(rownames(exampleMatrix))[as.character(workWithDays)]))
temp10 <- cbind(workingMatrix, workingMatrix)
temp10
tapply(temp10, overallList$iniDataSet[overallList$xAxis][,1], mean)
temp3 <- tapply(temp10, overallList$iniDataSet[overallList$xAxis][,1], mean)
temp3 <- tapply(workingMatrix, overallList$iniDataSet[overallList$xAxis][,1], mean)
temp3[as.character(overallList$filterXaxis)]
I
I$`1`[c("Deskriptor1","Deskriptor2")]
I
I[c("Deskriptor1","Deskriptor2")]
H[as.character(workWithDays)]
H[as.character(workWithDays)]["Deskriptor1"]
H[as.character(workWithDays)][["Deskriptor1"]]
H[[as.character(workWithDays)]]["Deskriptor1"]
exampleMatrix2 <- matrix(c(1:1000,5:1004), ncol=2)
exampleMatrix2 <- matrix(c(1:1000,5:1004), ncol=4)
exampleMatrix2
exampleMatrix2 <- matrix(c(1:10000,5:10004), ncol=4)
exampleMatrix2
exampleMatrix2 <- matrix(c(1:100000,5:100004), ncol=4)
exampleMatrix2
length(exampleMatrix2[,1])
sample(1:10,5,replace=T)
timeTest("test")
timeTest("test")
timeTest("test")
timeTest("einfach")
timeTest("einfach")
?system.time
timeTest("h")
timeTest("h")
timeTest("h")
timeTest("h")
install.packages(c("rbenchmark"), repos="http://cran.r-project.org", dependencies = TRUE)
?rbenchmark
??rbenchmark
?aggregate
?data.frame
test <- data.frame(workingDataSet)
test
class(test)
class(workingDataSet)
class(overallList$iniDataSet)
)
class(tempWorkingDatasetSum)
class(tempWorkingDatasetSum)
?aggregate
tempWorkingDatasetSum
apply(t(tempWorkingDatasetSum),2)
apply(t(tempWorkingDatasetSum),2,"%&%")
t(tempWorkingDatasetSum)
apply(tempWorkingDatasetSum,1,"%&%")
apply(tempWorkingDatasetSum,2,"%&%")
apply(tempWorkingDatasetSum,1,"%&%",tempWorkingDatasetSum)
apply(tempWorkingDatasetSum,2,"%&%",tempWorkingDatasetSum)
class(apply(tempWorkingDatasetSum,2,"%&%",tempWorkingDatasetSum)[,1])
class(overallList$overallResult)
class(overallList$overallResult)
class(overallList$overallResult)
exampleDataFrame
?data.frame
?aggregate
##------ 18.11.2011 12:41:43 ------##
class(rowNames)
J
J[1]
J[,]
J[1,]
class(J)
J[J(workWithDays)]
J[J[workWithDays]]
J[J[as.character(workWithDays)]]
J[as.character(workWithDays)]]
J[as.character(workWithDays)]
J[as.character(workWithDays),]
J[Group.1==workWithDays,]
J[Group.1==workWithDays]
J[,Group.1==workWithDays]
J[,"Group.1"==workWithDays]
J["Group.1"==workWithDays,]
aggregate(exampleDataFrame[,-1], exampleDataFrame[1], mean, simplify=FALSE)
J[,Days==1]
J[,"Days"==1]
J[J["Days"==1]]
J[J["Days"]==1]]
J["Days"]==1]
J["Days"]==1
J[J["Days"]==1]
J[J["Days"]==workWithDays]
J
J[,J["Days"]==workWithDays]
as.matrix(J[J["Days"]==workWithDays])
J["Days"]==workWithDays
J["Days"]==workWithDays
workWithDays
J[as.character(workWithDays)]
E
I
J
J[,J["Days"]==workWithDays]
J[J["Days"]==workWithDays]
J[J["Days"]]
J[J["Days"]]
J["Days"]
J["Days"]==1
J["Days"]==8
J[J["Days"]==8]
J[J["Days"]==c(1,8)]
J
J[J["Days"]==c(1,8,10)]
)
as.matrix(I)
I
?tapply
)
?tapply
tapply(tempWorkingDatasetSum,length(tempWorkingDatasetSum),"%&%",tempWorkingDatasetSum)
length(tempWorkingDatasetSum)
tapply(tempWorkingDatasetSum,length(tempWorkingDatasetSum[,1]),"%&%",tempWorkingDatasetSum)
length(tempWorkingDatasetSum[,1])
tapply(tempWorkingDatasetSum,length(1:tempWorkingDatasetSum[,1]),"%&%",tempWorkingDatasetSum)
F
G
I
##------ 21.11.2011 06:42:09 ------##
)))
)
sum(workingDataSet[rowWhichPlotInOneDiagram,1],na.rm=TRUE)
k  <- 3
length(CalculateMeanWorkingDataSet[treatmentName]==treatment[y])
length(CalculateMeanWorkingDataSet[treatmentName]==treatment[y])==TRUE
length(CalculateMeanWorkingDataSet[treatmentName]==treatment[y])=TRUE
length(CalculateMeanWorkingDataSet[treatmentName]==treatment[y])=TRUE
sum(CalculateMeanWorkingDataSet[treatmentName]==treatment[y])
sum(tempWorkingDatasetSum)
sum(tempWorkingDatasetDesc)
sum(as.numeric(CalculateMeanWorkingDataSet[(CalculateMeanWorkingDataSet[treatmentName]==treatment[y] & CalculateMeanWorkingDataSet[xAxis]==days[i] & tempWorkingDatasetDesc[,multiDescriptor[d]]),descriptorName[d]]),na.rm=TRUE)
CalculateMeanWorkingDataSet[2367,1]
CalculateMeanWorkingDataSet[2367,2]
CalculateMeanWorkingDataSet[2367,3]
CalculateMeanWorkingDataSet[,descriptorName[d]]
CalculateMeanWorkingDataSet[2299,descriptorName[d]]
sum(CalculateMeanWorkingDataSet[zwischenErgebnis,descriptorName[d]])
class(CalculateMeanWorkingDataSet[zwischenErgebnis,descriptorName[d]])
class(factorTemp)
as.character(factorTemp)
as.numeric(as.character(factorTemp))
?read.csv
class(factorTemp)
?data.table
dt[1,1]
dt[1,2]
dt[1,3]
dt[2,3]
dt[2,]
dt[1,]
n<-100000
DT
dt
tables()
ans1<-DT[,list(mean(x),mean(y)),by=list(grp1,grp2)]
M
N
L
class(L)
class(L[1,])
L[1,]
L[1,2]
DT
DT[1,]
DT[1,1]
DT[1,2]
setkey(DT,x)
setkey(DT,grp1)
DT
DT[1,1]
DT[1,2]
DT[1,3]
DT["1"]
L
class(rowNames)
DT
DT
L
L
M
M[list(workWithDays),]
M[,rowNames]
M
.SD
L[,.SD]
M
N[workWithDays,N[-1]]
N[workWithDays,colnames(N[-1])]
N[N["Days"]==workWithDays,colnames(N[-1])]
L
N
L[["Days"]]
L[list(x="Days")]
L[list(x="Days"),]
L[Days]
class(L[Days])
class(L)
M[,.SD,by=list(workWithDays&Days)]
M[,.SD,by=list((workWithDays&Days))]
workWithDays&L[Days]
workWithDays&L["Days"]
workWithDays&L[,"Days"]
workWithDays&L[,"Days",with=FALSE]
L
M
workWithDays&M[,"Days",with=FALSE]
match(workWithDays&M[,"Days",with=FALSE])
match(workWithDays,M[,"Days",with=FALSE])
M[,"Days",with=FALSE]
M[,Days]
M[,list(Days)]
match(workWithDays, M[,list(Days)])
workWithDays
list(workWithDays)
match(workWithDays, M[,Days])
M
setkey(M,Days)
M[J(workWithDays)]
L[J(workWithDays),lapply(.SD, mean), by=list(Days)]
setkey(M,Days)
M[J(workWithDays)]
M[J(workWithDays)][1]
M[J(workWithDays)][list(Deskriptor1)]
M[J(workWithDays)][list("Deskriptor1")]
M[J(workWithDays)][["Deskriptor1"]]
L[,list(.Internal(mean(.SD))), by=list(Days)]
L[,list(.Internal(mean(colnames(L)))), by=list(Days)]
colnames(L)
colnames(L[-1])
colnames(L)
L[,list(.Internal(mean(Deskriptor1))), by=list(Days)]
M[J(workWithDays)][c("Deskriptor1","Deskriptor2")]
M[J(workWithDays)][list("Deskriptor1","Deskriptor2")]
M[J(workWithDays)][list(Deskriptor1,Deskriptor2)]
M[J(workWithDays)][list(Deskriptor1,Deskriptor2)]
M[J(workWithDays)][[list(Deskriptor1,Deskriptor2)]]
M[J(workWithDays)][[c("Deskriptor1","Deskriptor2")]]
M[J(workWithDays)][c("Deskriptor1","Deskriptor2")]
)
colnames(exampleDataFrame)
colnames(exampleDataFrame)[-1]
P
K
?resharp
?reshape
##------ 23.11.2011 07:05:44 ------##
N
M[workWithDays,colnames(exampleDataFrame)[-1]]
M[workWithDays,colnames(exampleDataFrame)[-1],with=FALSE]
M[workWithDays,colnames(exampleDataFrame)[-1],with=TRUE]
M[workWithDays,colnames(exampleDataFrame)[-1],with=FALSE]
M[,colnames(exampleDataFrame)[-1],with=FALSE]
M
M[,colnames(exampleDataFrame)[-1],with=FALSE,by=list(workWithDays)]
M[workWithDays,colnames(exampleDataFrame)[-1],with=FALSE]
M[list(workWithDays),colnames(exampleDataFrame)[-1],with=FALSE]
M[J(workWithDays),colnames(exampleDataFrame)[-1],with=FALSE]
O
O[as.character(workWithDays)]
O[as.character(workWithDays),]
O[as.character(workWithDays),colnames(exampleDataFrame)[-1]]
O[workWithDays==O[[Days]],colnames(exampleDataFrame)[-1]]
O[workWithDays==O[["Days"]],colnames(exampleDataFrame)[-1]]
O[O[["Days"]]==workWithDays,colnames(exampleDataFrame)[-1]]
O[O["Days"]==workWithDays,colnames(exampleDataFrame)[-1]]
O["Days"]==workWithDays
O["Days"]==workWithDays
workWithDays
O["Days"]
workWithDays2 <- c(O["Days"])
workWithDays2
O["Days"]==workWithDays2
workWithDays2 <- c(1,3,2)
O["Days"]==workWithDays2
workWithDays2 <- c(1,3,2,9)
O["Days"]==workWithDays2
workWithDays2 <- c(1,3,8,9)
O["Days"]
O["Days"] == vektor1
O["Days"] == (vektor1<-c(1,2,3))
vektor1
O["Days"] == vektor1
O
tempVector["Days"] == vektor1
tempVector
tempVector["Days"] == vektor1
vektor1
tempVector["Days"] == (vektor1 <- c(1,5,10,3)
)
tempVector["Days"] == (vektor1 <- c(1,5,3,10))
O
workWithDays
match(workWithDays, O["Days"])
match(workWithDays, as.vector(O["Days"]))
match(O["Days"],workWithDays)
O["Days"]
O[["Days"]]
match(workWithDays, O[["Days"]])
G
R[workWithDays]
R[match(workWithDays, R[["Days"]]),colnames(exampleDataFrame)[-1]]
exampleDataFrame
exampleDataFrame["Days"]==1
exampleDataFrame["Days"]==8
i=1
U
U
U
i
?data.frame
T
T
##------ 23.11.2011 08:26:55 ------##
##------ 23.11.2011 08:54:12 ------##
##------ 23.11.2011 09:00:13 ------##
j
class(j)
##------ 23.11.2011 09:06:25 ------##
T
N
##------ 24.11.2011 09:24:04 ------##
df
df
aggregate(df$wert,list(df$Gruppe.1,df$Gruppe.2),FUN=sum)
data.table(df[,sum(wert),by="Gruppe.1,Gruppe.2"])
data.table(df[,sum(wert),by="Gruppe.1,Gruppe.2"])
dt <- data.table(df)
dt[,sum(wert),by="Gruppe.1,Gruppe.2"]
kindOfTest <- "dataTableTest"
kindOfTest= "timeTest", typ = "vector"
kindOfTest= "timeTest"
typ = "vector"
kindOfTest= "dataTableTest"
##------ 24.11.2011 15:58:07 ------##
##------ 24.11.2011 16:35:09 ------##
help(memory.size)
memory.size
memory.size()
memory.size(TRUE)
memory.limit()
memory.limit()
memory.limit(size=3000)
summary(fit)
memory.limit(size=2500)
memory.limit()
memory.limit(size=10000)
##------ 24.11.2011 16:54:09 ------##
A
A$
User
A[1]
A[3]
A
?system.time
A[1]
A[1:length(A)]
A[elapsed]
A["elapsed"]
timeVector
mem.limits()
##------ 28.11.2011 07:04:25 ------##
memory.size()
memory.limit(size=10000)
}
class(overallList$rowName)
as.list(overallList$rowName)
warnings()
overallList$rowName
iniDataSetAsDataTable[,lapply(list(Plant.ID Treatment,Repl.ID Treatment), mean), by=overallList$xAxis]
iniDataSetAsDataTable[,lapply(list("Plant.ID Treatment","Repl.ID Treatment"), mean), by=overallList$xAxis]
hallo = 2
ls(all=TRUE)[!match(typOfStartOptions,DEBUG)]
ls(all=TRUE)[!match(c(typOfStartOptions,DEBUG),ls(all=TRUE))]
match(c(typOfStartOptions,DEBUG),ls(all=TRUE))
match(c("typOfStartOptions","DEBUG"),ls(all=TRUE))
ls(all=TRUE)[!match(c("typOfStartOptions","DEBUG"),ls(all=TRUE))]
ls(all=TRUE)[match(c("typOfStartOptions","DEBUG"),ls(all=TRUE))]
ls(all=TRUE)[-match(c("typOfStartOptions","DEBUG"),ls(all=TRUE))]
DEBUG = TRUE
overallList$debug
debug = TRUE
)
##------ 28.11.2011 11:03:21 ------##
)
##------ 28.11.2011 11:16:13 ------##
rm(all)
##------ 28.11.2011 11:18:07 ------##
##------ 28.11.2011 11:21:05 ------##
##------ 28.11.2011 11:23:19 ------##
value <- overallList$descriptor
isColValue <- TRUE
?strsplit
unlist(strsplit("a.b.c", ".", fixed = TRUE))
strsplit("a.b.c", ".", fixed = TRUE)
?unlist
testData <- data.table(overallList$iniDataSet)
testData <- data.table(tempWorkingDatasetSum)
testData
testData[,lapply(.SD, '%&%')]
testData[,lapply(.SD, '&')]
testData[,lapply(.SD, mean)]
testData
testData[,lapply(.SD, sum)]
testData[,lapply(.SD, sum), by=list(Treatment)]
?lapply
lapply(tempWorkingDatasetSum, &)
lapply(tempWorkingDatasetSum, '&')
tapply(tempWorkingDatasetSum, '&')
lapply(tempWorkingDatasetSum, '%&%')
lapply(tempWorkingDatasetSum, sum)
tapply(tempWorkingDatasetSum, sum)
testData[,lapply(as.list(rownames(overallList$testData)),sum)]
testData[,lapply(rownames(overallList$testData),sum)]
testData
class(tempWorkingDatasetSum)
?%&%
?&
?"%&%"
??"%&%"
?mvbutils::mvbutils.operators
"a" %&% "b"
library(mvbutils)
"a" %&% "b"
tempWorkingDatasetSum[,1]
tempWorkingDatasetSum[,1] %&% tempWorkingDatasetSum[,2]
tempWorkingDatasetSum[,1] & tempWorkingDatasetSum[,2]
iniDataSetAsDataTable[,lapply(list(Plant.ID,Repl.ID), mean), by=overallList$xAxis]
iniDataSetAsDataTable[,lapply(list(Plant.ID,Repl.ID), mean), by=list(overallList$xAxis,overallList$treatment)]
overallList$xAxis
overallList$treatment
list(overallList$xAxis,overallList$treatment)
overallList$xAxis + overallList$treatment
c(overallList$xAxis, overallList$treatment)
iniDataSetAsDataTable[,lapply(list(Plant.ID,Repl.ID), mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(list(Plant.ID,Repl.ID), mean), by=c(overallList$xAxis,overallList$treatment)]
##------ 28.11.2011 15:00:16 ------##
##------ 28.11.2011 15:01:39 ------##
warnings()
warnings(+)
warnings()
iniDataSetAsDataTable[,lapply(c(overallList$descriptor), mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(overallList$descriptor, mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(as.vector(overallList$descriptor), mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(as.list(overallList$descriptor), mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(as.factor(overallList$descriptor), mean), by=c(overallList$xAxis,overallList$treatment)]
tables()
overallList$descriptor
c(overallList$xAxis,overallList$treatment)
class(c(overallList$xAxis,overallList$treatment))
class(overallList$descriptor)
unlist(overallList$descriptor)
iniDataSetAsDataTable[,lapply(unlist(overallList$descriptor), mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(.SD, mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(.SD, mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(.SD, mean), by=c(overallList$xAxis,overallList$treatment)]
iniDataSetAsDataTable[,lapply(.SD, mean), by=c(overallList$xAxis,overallList$treatment,charcater(0))]
test
groupByList <- list(overallList$treatmentName, overallList$secondTreatment, overallList$xAxis)
groupByList
as.vector(groupByList)
unlist(groupByList)
setkey(iniDataSetAsDataTable,as.charcater(overallList$xAxis))
setkey(iniDataSetAsDataTable,as.list(overallList$xAxis))
setkey(iniDataSetAsDataTable,Day..Int.)
setkey(iniDataSetAsDataTable,Treatment)
setkey(iniDataSetAsDataTable,"Treatment")
setkey(iniDataSetAsDataTable,c("Treatment"))
setkey(iniDataSetAsDataTable,list("Treatment"))
setkey(iniDataSetAsDataTable,"Treatment")
setkey(iniDataSetAsDataTable,"Treatment","Day..Int.")
setkey(iniDataSetAsDataTable,c("Treatment","Day..Int."))
setkey(iniDataSetAsDataTable,list("Treatment","Day..Int."))
setkey(iniDataSetAsDataTable,list(x="Treatment",y="Day..Int."))
key(iniDataSetAsDataTable)
key(iniDataSetAsDataTable) = c("Treatment", "Day..Int.")
key(iniDataSetAsDataTable) = groupBy
tables()
key(iniDataSetAsDataTable) = groupBy
tables()
tables()
?data.table
##------ 29.11.2011 06:45:57 ------##
?data.table
?data.table
maintainer("data.table")
iniDataSetAsDataTable["dry"]
iniDataSetAsDataTable["6"]
iniDataSetAsDataTable[c("dry")]
iniDataSetAsDataTable[c("dry","normal")]
DT = data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
setkey(DT,x,y)
DT["a"]
DT
DT[J("a",3)]
DT[J("a",,1)]
DT[J(c("a","b"))]
DT[J(c("a","b"),1)]
DT[J(c("a","b"),c(1,3))]
DT[J(c("a","b"),c(1,3)),roll=TRUE]
DT[J(c("a","b"),1:3),roll=TRUE]
DT[J("a",1:3),roll=TRUE]
N
t(N)
t(as.data.frame(N))
as.data.frame(N)
t(N[Day..Int.])
t(N["Day..Int."])
tables()
N[-1]
as.data.frame(N[-1])
as.data.frame(N[,-1])
as.data.frame(N[-1,])
as.data.frame(N[,1])
T <- as.data.frame(N)
T
T[,1]
T[-1]
t(T[-1])
t(T[-1:2])
t(T[-1:-2])
?rep.int
rep(1:4, 2)
paste(overallList$descriptor,rep.int(overallList$filterTreatment, times=ifelse(length(overallList$descriptor)>length(overallList$filterTreatment),length(overallList$descriptor),length(overallList$filterTreatment))))
ifelse(length(overallList$descriptor)>length(overallList$filterTreatment),length(overallList$descriptor),length(overallList$filterTreatment))
paste(overallList$descriptor,rep.int(overallList$filterTreatment, 2))
paste(overallList$descriptor,rep.int(overallList$filterTreatment, 2),rep.int(overallList$filterSecondTreatment,2))
paste(overallList$descriptor,rep.int(overallList$filterTreatment, 2),rep.int(overallList$filterSecondTreatment,4))
paste(overallList$descriptor,rep.int(overallList$filterTreatment, 4),rep.int(overallList$filterSecondTreatment,4))
paste(paste(overallList$descriptor,rep.int(overallList$filterTreatment, 2)),rep.int(overallList$filterSecondTreatment,4))
paste(overallList$descriptor,rep.int(overallList$filterTreatment, 2))
paste(overallList$descriptor,rep.int(overallList$filterTreatment, times=2))
rep.int(overallList$filterTreatment, times=2)
rep.int(overallList$filterTreatment)
paste(c("a","b"),c(1,2))
paste(c("a","b"),rep.int(c(1,2),2))
?mvbutils
?&
?%&%
??%&%
??&
??mvbutils
?mvbutils::mvbutils.operators
a%&%b
"a"%&%"b"
c("a","b") %&% rep.int(c(1,2),2)
c("a","b") %*% c(1,2)
c("a","b") %&% c(1,2)
)
do.call("paste",c("a","b"))
do.call("paste",liste(x=c("a","b"),y=c(1,2))
)
do.call("paste",liste(x=c("a","b"),y=c(1,2)))
do.call("paste",list(x=c("a","b"),y=c(1,2)))
A <- c("a","b")
B <- c(1,2)
C <- c("h","l")
?tapply()
B <- c(1,2,3)
tapply(A,B,paste)
paste(A,"1")
tapply(A,"1", paste)
tapply(A,A, paste)
tapply(A,C, paste)
?apply(A,, paste)
apply(as.dataframe(A,B),2, paste)
apply(as.data.frame(A,B),2, paste)
as.data.frame(A,B)
?data.frame()
data.frame(cbind(x=1,y=1:10))
data.frame(cbind(x=A))
data.frame(cbind(x=A,y=B))
A <- data.frame(0)
A <- c("a","b")
D <- data.frame(0)
rownames(D) <- A
paste(A,"1")
B
paste(A,"2")
paste(A,c("1","2"))
paste(A,list(x="1",y="2"))
paste(A,list(x=c("1","2"),y="3"))
tapply(A,1,paste)
tapply(A,B,paste)
mapply((A*B),2,paste)
mapply((A&B),2,paste)
mapply((A+B),2,paste)
vector1 <- A
vector2 <- B
tables()
iniDataSetAsDataTable[J("dry", 1),roll=TRUE]
iniDataSetAsDataTable[J("dry", "a"),roll=TRUE]
iniDataSetAsDataTable[J("dry")]
iniDataSetAsDataTable[J("dry","a")]
iniDataSetAsDataTable[J("dry", "a"),roll=TRUE]
iniDataSetAsDataTable[J("dry","a")]
iniDataSetAsDataTable[J("dry","a"),roll=TRUE]
iniDataSetAsDataTable[J("dry","a")]
iniDataSetAsDataTable[J("dry", overallList$filterSecondTreatment)]
iniDataSetAsDataTable[J("dry", overallList$filterSecondTreatment,overallList$filterTreatment)]
iniDataSetAsDataTable[J("dry", overallList$filterSecondTreatment,overallList$filterXaxis)]
iniDataSetAsDataTable[J("dry", overallList$filterSecondTreatment,1)]
class(overallList$filterSecondTreatment)
class(overallList$filterTreatment)
class(overallList$filterXaxis)
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,1)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,c(6,10))]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,overallList$filterXaxis)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,c(6,8,13))]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,c(6,8))]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,8)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment, overallList$filterXaxis)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment, as.character(overallList$filterXaxis))]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment, 13)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment, 8)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment, c(8,13))]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment, c(8,13))]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,8)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,8)]
iniDataSetAsDataTable[J(overallList$filterTreatment, overallList$filterSecondTreatment,13)]
iniDataSetAsDataTable[match(overallList$filterTreatment,iniDataSetAsDataTable[overallList$treatment])]
iniDataSetAsDataTable[match(overallList$filterTreatment,iniDataSetAsDataTable[[overallList$treatment]]),]
iniDataSetAsDataTable
iniDataSetAsDataTable[match(iniDataSetAsDataTable[[overallList$treatment]],overallList$filterTreatment),]
match(iniDataSetAsDataTable[[overallList$treatment]],overallList$filterTreatment)
match(overallList$filterTreatment,iniDataSetAsDataTable[[overallList$treatment]])
iniDataSetAsDataTable[[overallList$treatment]]
overallList$filterTreatment
iniDataSetAsDataTable[[overallList$treatment]]
match(overallList$filterTreatment,iniDataSetAsDataTable[[overallList$treatment]])
match(overallList$filterTreatment,iniDataSetAsDataTable[[overallList$treatment]])
iniDataSetAsDataTable[[overallList$treatment]]==overallList$filterTreatment
overallList$filterTreatment %in% iniDataSetAsDataTable[[overallList$treatment]]
iniDataSetAsDataTable[[overallList$treatment]] %in% overallList$filterTreatment 
iniDataSetAsDataTable[[overallList$secondTreatment]] %in% overallList$secondFilterTreatment 
iniDataSetAsDataTable[[overallList$secondTreatment]] %in% overallList$filterSecondTreatment 
iniDataSetAsDataTable[[overallList$secondTreatment]]
TRUE & FALSE
t(groupedDataFrame)
t(groupedDataFrame[-1])
t(groupedDataFrame[-1:-2])
t(groupedDataFrame[-1:-3])
(groupedDataFrame)
?data.frame
groupedDataFrame[1:2,]
groupedDataFrame[,1:2]
paste(groupedDataFrame[,1:2])
paste(groupedDataFrame[,1], groupedDataFrame[,2])
A <- paste(groupedDataFrame[,1], groupedDataFrame[,2])
A[1]
paste("Plant.ID",A[1])
overallList$overallResult[paste("Plant.ID",A[1]),]
groupedDataFrame[,overallList$secondTreatment]
)
)
overallList$overallResult
?substr
gsub("[[[:space:]]]",".",t)
?strapply
regexpr(" ",str)
regexpr(" ",str)[1]
t <- overallList$rowName[1]
t
split(t)
split(t,x)
split(t,"dry")
split(t,"dry","a")
?split(t,"dry","a")
t
split(t,"")
?sub
substr("gg",regexpr(" ","gg")[1]+1,nchar("gg")
)
)
listOfValues <- list(x="Treatment", y="secondTreatment", z="Day..Int.")
b <- list(Treatment="bla", Day..Int.=c(1,8,13))
b
b[h]
names(listOfValues)
listOfValues <- list(Treatment=c("dry","normal"))
names(list("dry")) <- "x"
list()[[overallList$Treatment]] <- overallList$filterTreatment)
T <- list()
T[[overallList$Treatment]] <- overallList$filterTreatment
overallList$Treatment
overallList$treatment
T[[overallList$treatment]] <- overallList$filterTreatment
T
)
)
listOfValues <- buildList(overallList)
listOfValues
)
groupedDataFrame[TRUE]
groupedDataFrame[c(TRUE,FALSE,TRUE)]
overallList[["isGray"]] <- FALSE
overallList[["symbolParameter"]] <- 15
overallList <- backupOverallList2
t(overallList$iniDataSet)
t(groupedDataFrame)
t(overallList$iniDataSet)
t(overallList$iniDataSet)["Treatment"]
t(overallList$iniDataSet)[["Treatment"]]
t(overallList$iniDataSet)[,1]
overallList$iniDataSet
length(overallList$iniDataSet)
length(overallList$iniDataSet[,1])
overallList$iniDataSet["Treatment"]
overallList$iniDataSet["Treatment"]==dry
overallList$iniDataSet["Treatment"]=="dry"
i <- 1
des <- overallList$descriptor[1]
des
overallList$overallResult[row,]
overallList$overallResult[row,6]
overallList$overallResult[row,"6"]
h=2
?boxplot
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
barplot(overallList$overallResult)
boxplot(count ~ spray, data = InsectSprays, notch = TRUE, add = TRUE, col = "blue")
decrease ~ treatment
OrchardSprays
barplot(overallList$descriptor, data=overallList$overallResult)
class(overallList$overallResult)
class(overallList$overallResult[1])
class(overallList$overallResult[2])
overallList$overallResult[2]
overallList$overallResult[1,2]
class(overallList$overallResult[1,2])
class(overallList$overallResult[3,2])
t(overallList$overallResult)
barplot(t(overallList$overallResult))
test <- overallList$overallResult
test2 <- test[1:3,]
test2
barplot(test2)
test2[3,1] <- 30.0
test2[2,1] <- 30.0
test2[2,2] <- 30.0
test2[3,3] <- 30.0
test2
test2[2,1] <- 30.0
test2
test2[2,1]
test2[1,2]
test2[1,2] <- 50
barplot(test2)
rownames(test2)
rownames(test2) <- c(1,2,3)
test2
barplot(test2)
t(test2)
barplot(t(test2))
class(test2)
class(t(test2))
barplot(as.matrix(test2))
overallList
rownames(overallList$overallResult)
h <- 2
overallList$overallResult
overallList$overallResult[o]
o <- overallList$rowName[1]
overallList$overallResult[o,]
?rowsum
)
)
o
overallList$rowName
o <- overallList$rowName[1]
##------ 30.11.2011 07:00:08 ------##
h <- 2
h <- 2
unstack(overallList$iniDataSet)
barplot()
barplot(1:1)
barplot(0:0)
barplot(1:1)
barplot(1:2)
barplot(2:2)
standardPar$mar
barplot(VADeaths)
##------ 30.11.2011 08:02:15 ------##
h <- 2
?par
?barplot
?Cairo
?plot.new
?plot.new
?before.plot.new
h <- 1
overallList$overallResult
length(overallList$overallResult[,1])
sum(match(is.nan(overallList$overallResult[y,]),FALSE),na.rm=TRUE)
sum(match(is.nan(overallList$overallResult[overallList$rowName[1],]),FALSE),na.rm=TRUE)
?ifelse
?row
?rowcode
?ifelse
ifelse(overallList$showResultInR, 2)
ifelse(TRUE, 2)
ifelse(FALSE, 2)
ifelse(FALSE, 2,)
ifelse(TRUE, "legendeBoxStacked", "legende")
?rm
?legend
##------ 30.11.2011 11:36:44 ------##
rm(ls())
rm(list=ls())
?png
?rm
dev.list()
dev.list()
dev.off()
dev.off()
dev.off()
h=2
y = 2
y
y <- 3
y <- 4
?is.nan
##------ 01.12.2011 07:00:57 ------##
##------ 01.12.2011 07:26:28 ------##
iniDataSet <- read.csv2(fileName, header=TRUE, sep=";", fileEncoding="ISO-8859-1", encoding="UTF-8")
iniDataSet <- read.csv(fileName, header=TRUE, sep=";", fileEncoding="ISO-8859-1", encoding="UTF-8")
iniDataSet <- read.csv(fileName, header=TRUE, sep=";", fileEncoding="ISO-8859-1", encoding="UTF-8")
##------ 01.12.2011 07:34:34 ------##
##------ 02.12.2011 06:39:54 ------##
dev.off()
dev.off()
length(overallList$iniDataSet)
overallList$errorDescriptor
overallList$errorDescriptor
overallList$errorDescriptor
overallList$errorDescriptor
}
FALSE & TRUE
y <- 1
)
dev.list()

y <- 1
length(overallList$overallResult[2,]) - sum(match(is.na(overallList$overallResult[2,]),FALSE),na.rm=TRUE)
length(overallList$overallResult[3,]) - sum(match(is.na(overallList$overallResult[3,]),FALSE),na.rm=TRUE)
length(overallList$overallResult[4,]) - sum(match(is.na(overallList$overallResult[4,]),FALSE),na.rm=TRUE)
y <- 3
o <- dry
o <- "dry"
overallList$overallResult[match(o,rownames(overallList$overallResult)]
match(o,rownames(overallList$overallResult)
)
match(o,rownames(overallList$overallResult))
rownames(overallList$overallResult)
o
whichRowsShouldBePlotted
match(whichRowsShouldBePlotted,rownames(overallList$overallResult))
h <- 2
overallResult <- overallList$overallResult
t(overallList$overallResult)
whichRows <- whichRowsShouldBePlotted
?apply
test <- cbind(x1 = 3, x2 = c(4:1, 2:5))
test
test <- cbind(x1 = c(1:3), x2 = c(4:1, 2:5))
test <- cbind(x1 = 1:3, x2 = c(4:1, 2:5))
test <- cbind(x1 = 1:3, x2 = 2:5))
test <- cbind(x1 = 1:3, x2 = 2:5)
test <- cbind(x1 = 1:3, x2 = 2:5)
test <- cbind(x1 = c(1:3), x2 = c(2:4))
test
apply(test, 2, function(x,y){(100*x)/y}, y=colSums(test))
apply(test, 2, function(x,y){(100*x)/y}, y=rowSums(test))
apply(test, 2, function(x,y){(100*x)/y}, y=colSums(test))
apply(test, 1, function(x,y){(100*x)/y}, y=colSums(test))
t(apply(test, 1, function(x,y){(100*x)/y}, y=colSums(test)))
test
plotThisValues <- t(apply(overallResult[whichRows,], 1, function(x,y){(100*x)/y}, y=colSums(overallResult[whichRows,])))
overallList
overallList
test <-  c("a","b","a")
test== "a"
test[test == "a"]
length(test[test == "a"])
test <- c(test, "c", "d", "a", "c")
length(test[test == "a"])
length(test[test == "a" | test == "c"])
length(test[test == c("a","c")])


?file
file.exists("initLinux")
file.exists("initLinux.r")
file.exists("initLinux*")
file.exists("initLinux","*")
file.exists("initLinux.r")
file.exists("initlinux.r")


)
)
listOfValues <- buildList(overallList)
listOfValues
groupedDataFrame
h <- "Treatment"
dev.off()
overallList$iniDataSet[i,]
overallList$iniDataSet[1,]
k <- 1
i
overallList$iniDataSet[1,]
length(overallList$iniDataSet[1,])
overallList$iniDataSet[,1]
overallList$iniDataSet[,2]
length(overallList$iniDataSet)
length(overallList$iniDataSet[,1])
length(rownames(overallList$iniDataSet))

##------ 03.12.2011 09:00:36 ------##
)
##------ 03.12.2011 21:26:44 ------##
des <- overallList$descriptor
i <- 1
##------ 03.12.2011 21:37:22 ------##
i <- 1
des <- overallList$descriptor
i
listOfValues <- c(overallList$treatment, overallList$secondTreatment)
dataSet <- overallList$iniDataSet
k <- 1
k <- listOfValues[1]
k
day <- overallList$xAxisName
day
day <- overallList$xAxis
day
plot(overallList$overallResult)
h <- 2
y <- 1
y <- 2
length(overallList$overallResult[y,]) - sum(match(is.na(overallList$overallResult[y,]),FALSE),na.rm=TRUE)
y <- 3
length(overallList$overallResult[y,]) - sum(match(is.na(overallList$overallResult[y,]),FALSE),na.rm=TRUE)
overallList$overallResult[y,"41"]
newValue$y[!is.na(match(newCoords, overallList$filterXaxis))][41]
y <- 1
y <- 2
y <- 3
y <- 1
}
y <- 2
y <- 3
length(newValue$y)
overallList$overallResult
length(overallList$overallResult)
?seq
overallList$filterXaxis
overallList$filterXaxis[naVector]
as.character(overallList$filterXaxis[naVector])
newValue$y(as.character(overallList$filterXaxis[naVector]))
newValue$y[as.character(overallList$filterXaxis[naVector])]
overallList$iniDataSet[13074,]
overallList$iniDataSet[13059,]
overallList$iniDataSet[13058,]
overallList$iniDataSet[13058,]
overallList$iniDataSet[13058,]
groupedDataFrame[13058,]
data.frame(rbind(1:5),rbind(2:6))
data.frame(cbind(1:5),cbind(2:6))
test <- data.frame(cbind(1:5),cbind(2:6))
test2 <- data.table(test)
test2
test[1,2]
test[1,2] <- NA
test[1,3] <- NA
test[1,5] <- NA
test
test[2,2] <- NA
test[3,2] <- NA
test[5,2] <- NA
test
test[,lapply(.SD, mean)]
test2 <- data.table(test)
test2[,lapply(.SD, mean)]
test
test[,3] <- c(1:2)
test[,3] <- c(1:2,1:2,1)
test
test2 <- data.table(test)
test2[,lapply(.SD, mean), by=test[3]]
test2[,lapply(.SD, mean), by=test["V3"]]
test["V3"]
test["V3"]
test2[,lapply(.SD, mean), by=V3]
test
?mean
test2[,lapply(.SD, mean, na.rm=TRUE), by=V3]
y <- 1
##------ 06.12.2011 10:55:43 ------##
##------ 06.12.2011 11:08:25 ------##
testmatrix <- read.csv2("testDatenset3.csv", header=TRUE, sep=";", fileEncoding="ISO-8859-1", encoding="UTF-8")
##------ 06.12.2011 14:04:48 ------##
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup=FALSE)
pmatch(c(".histogram."), colnames(workingDataSet), dup=FALSE)
pmatch(colnames(workingDataSet), c(".histogram."), dup=FALSE)
colnames(workingDataSet)
pmatch(colnames(workingDataSet), c("ay"), dup=FALSE)
match(colnames(workingDataSet), c("ay"), dup=FALSE)
charmatch(colnames(workingDataSet), c("ay"), dup=FALSE)
charmatch(colnames(workingDataSet), c("ay"))
pmatch(colnames(workingDataSet), c("ay"), dup=TRUE)
pmatch(colnames(workingDataSet), c("ay"), dup=FALSE)
pmatch("ay", colnames(workingDataSet), dup=FALSE)
pmatch("ay", colnames(workingDataSet), dup=TRUE)
pmatch("Day", colnames(workingDataSet), dup=TRUE)
colnames(workingDataSet)
charmatch("Day", colnames(workingDataSet))
charmatch("ay", colnames(workingDataSet))
?match
?grep
grep("ay",colnames(workingDataSet))
grep("Day",colnames(workingDataSet))
colnames(workingDataSet)
colnames(grep("ay",colnames(workingDataSet)))
colnames()[grep("ay",colnames(workingDataSet))]
colnames(workingDataSet)[grep("ay",colnames(workingDataSet))]
blacklist <- colnames(workingDataSet)[grep("ay",colnames(workingDataSet))]
class(overallList$overallResul)
colSums(overallList$overallResul,na.rm=FALSE)
test <- colSums(overallList$overallResul,na.rm=FALSE)
is.na(test)
sum(is.na(test))
sum(test)
sum(test,na.rm=TRUE)
sum(is.na(test))
sum(is.na(test))
overallResult <- overallList$overallResult
y <- 1
t(overallList$overallResult)


##------ 06.12.2011 15:10:49 ------##
?barplot
?barplot
?plot.depth
??plot.depth
test


install.packages(c("plot.depth"), repos="http://cran.r-project.org", dependencies = TRUE)
?barplot
##------ 06.12.2011 16:19:24 ------##
test <- c(1:10)
test
?barplot
##------ 07.12.2011 06:40:37 ------##
1:0
1:1
?loop
?for
()
?for
(,,)
??for
match(blacklist, colnames(workingDataSet))
workingDataSet(match(blacklist, colnames(workingDataSet)))
workingDataSet[match(blacklist, colnames(workingDataSet))]
colnames(workingDataSet[match(blacklist, colnames(workingDataSet))])
getBooleanVectorForFilterValues(colnames(workingDataSet),as.list(blacklist)]
getBooleanVectorForFilterValues(colnames(workingDataSet),as.list(blacklist))
getBooleanVectorForFilterValues(workingDataSet,as.list(blacklist))
workingDataSet[,1]
colnames(workingDataSet)[,1]
colnames(workingDataSet)[1]
colnames(workingDataSet)
colnames(workingDataSet)[,1]
colnames(workingDataSet) != blacklist
colnames(workingDataSet)
blacklist
colnames(workingDataSet) != blacklist
colnames(workingDataSet) != blacklist[1]
descriptor
descriptor %in% blacklist
"top.fluo.normalized.histogram.bin.8.178_204" %in% blacklist
?tapply()
tapply(colnames(blacklist),blacklist, %in%)
tapply(colnames(blacklist),blacklist, '%in%')
lapply(colnames(blacklist),'%in%', blacklist)
lapply(colnames(blacklist),%in%, blacklist)
lapply(colnames(blacklist),'%in%', blacklist)
lapply(colnames(workingDataSet),'%in%', blacklist)
sapply(colnames(workingDataSet),'%in%', blacklist)
as.data.frame(sapply(colnames(workingDataSet),'%in%', blacklist))
test <- as.data.frame(sapply(colnames(workingDataSet),'%in%', blacklist))
colnames(workingDataSet[test])
colnames(workingDataSet[test[1]])
test
test[1]
test[,1]
colnames(workingDataSet[test[,1]])
colnames(workingDataSet[!test[,1]])
overallList
)
overallResult <- overallList$overallResult
colSums(overallResult,na.rm=TRUE)
colSums(overallResult[4,],na.rm=TRUE)
is.na(colSums(overallResult[4,],na.rm=TRUE))
is.null(colSums(overallResult[4,],na.rm=TRUE))
overallResult[4,](colSums(overallResult[4,],na.rm=TRUE))
test  <- overallResult
test[4,(colSums(test[4,],na.rm=TRUE)) == 0] 
test[4,(colSums(test[4,],na.rm=TRUE)) == 0] <- NA
test
overallResult
test[4,(colSums(test[4,],na.rm=TRUE)) == 0]
test[(colSums(test[4,],na.rm=TRUE)) == 0]
test[4,(colSums(test[4,],na.rm=TRUE))]
(colSums(test[4,],na.rm=TRUE))
(colSums(test[4,],na.rm=TRUE))== 0
sum((colSums(test[4,],na.rm=TRUE)) == 0)
sum((colSums(test[4,],na.rm=TRUE)) == 0) - length(test[4,])
sum((colSums(test[3,],na.rm=TRUE)) == 0) - length(test[3,])
sum((colSums(test,na.rm=TRUE)) == 0) - length(test)
)
colnames(workingDataSet)
colnames(workingDataSet)[grep(".histogram.",colnames(workingDataSet))]
colnames(workingDataSet)[grep(".histogram."|"mark",colnames(workingDataSet))]
?grep
colnames(workingDataSet)[grep(".histogram.|mark",colnames(workingDataSet))]
colnames(workingDataSet)[grep(".histogram.|mark-i",colnames(workingDataSet))]
colnames(workingDataSet)[grep("-i.histogram.|mark",colnames(workingDataSet))]
?grep
colnames(workingDataSet)[grep(".histogram.|mark",colnames(workingDataSet),ignore.case = TRUE)]
test <- c("Hallo Du", "Wie geht es")
preprocessingOfValues(test, FALSE, TRUE)
h <- 1
o <- stackedImages[1]
o
dev.off()
dev.off()
extraString <- o
extraString
plot(1:1)
dev.off()
extraString <- "test"
filename
plot(1:1)
dev.off()
extraString <- "hallo du"
plot(1:1)
dev.off(#)
dev.off()
)
dev.off()
o <- stackedImages
extraString <- o
extraString
extraString <- stackedImages[1]
extraString
preprocessingOfValues(extraString,FALSE, FALSE)
o <- stackedImages[1]
o
h <- 1
plot(1:1)
dev.off()
dev.off()
plot(1:1)
dev.off()
plot(1:1)
dev.off()

##------ 03.01.2012 16:09:50 ------##
DEBUG=TRUE


)
overallList$diagramTyp <- "!boxplot"
print(overallList$descriptor)
print(overallList$iniDataSet[overallList$descriptor])
print(overallList$iniDataSet[overallList$descriptor])[1:10]
print(overallList$iniDataSet[overallList$descriptor])[1:10,]
print(colnames(overallList$iniDataSet))
colnames(overallList$iniDataSet)
length(colnames(overallList$iniDataSet))
##------ 04.01.2012 11:31:08 ------##
##------ 05.01.2012 06:56:00 ------##
 test <- c("Hallo", "Test")
 test <- c("Hal lo", "Te st")
value <- test
quit = TRUE
isColValue=TRUE
value
grep("$", test)
test
 test <- c("Hal lo$du da", "Te st")
grep("$", test)
value <- test
value
nchar(test)
nchar(test, "$")
nchar(test, "char")
nchar(test, "chars")
nzchar(test)
match(test)
match(test, "$")
strsplit(test, "$", fixed=TRUE)
length(strsplit(test, "$", fixed=TRUE))
length(strsplit(test, "$", fixed=TRUE)[1])
length(strsplit(test, "$", fixed=TRUE)[[1]])
length(strsplit(test, "$", fixed=TRUE)[1,])
length(strsplit(test, "$", fixed=TRUE)[,1])
strsplit(test, "$", fixed=TRUE)[1]
length(strsplit(test, "$", fixed=TRUE)[1])
strsplit(test, "$", fixed=TRUE)[[1]]
unlist(strsplit(value, "$", fixed=TRUE))
list("test", "hallo")
listofTreat["treat"] <- "none"
testList <- list("hallo", "Test")
testList
k in testList
for(k in testList) {print(k)}
for(k in names(testList)) {print(k)}
testList
testList <- list(x="hallo", y="Test")
for(k in names(testList)) {print(k)}
testList["x"]
for(k in names(testList)) {print(testList[k])}
for(k in names(testList)) {print(testList[[k]])}
testList <- list(x="hallo", y="Test")
testList[x]
testList["x"]
du <- testList["x"]
du
du <- testList[["x"]]
du
du <- testList[[1]]
du
args[4] <- "Treatment"
##------ 04.01.2012 09:17:57 ------##
?Cairo
??Cairo
?Cairo::Cairo
?read
??read
?read.xls
??read.xls
?gdata::read.xls
??read.xlsx
c
listOfTreat <- list(treatment="Test1", secondTreatment="test2")
listOfFilterTreat <- list(filterTreatment="filterTest1", filterSecondTreatment="filterTest2")
listSum <- list(listOfTreat,listOfFilterTreat)
listSum
listSum[1]
listSum[[1]]
listSum[[1]][[1]]
listSum[[1]][[2]]
listSum[[2]][[1]]
?barplot
DEBUG = TRUE
h
h=2
barplot(overallList$overallResult)
barplot(as.matrix(overallList$overallResult))
barplot(as.matrix(t(overallList$overallResult)))
barplot(t(as.matrix(overallList$overallResult)))
barplot(as.matrix(overallList$overallResult), beside=TRUE)
barplot(as.matrix(overallList$overallResult), beside=TRUE)
barplot(t(as.matrix(overallList$overallResult)), beside=TRUE)
barplot(as.matrix(t(overallList$overallResult)), beside=TRUE)
overallList$overallResult
as.matrix(overallList$overallResult, na.rm=TRUE)
overallList$overallResult[1]
overallList$overallResult[1,]
##------ 05.01.2012 14:38:28 ------##
?plot
plot(1:20)
plot(1:20)
error.bars()
library(psych)
install.packages(c("psych"), repos="http://cran.r-project.org", dependencies = TRUE)
describe(attitude)
attitude
temp <- describe(attitude)
error.bars(stats=temp, xaxt="n")
axis(3)
axis(3)
error.bars(stats=temp, xaxt="n")
plot(temp)
dev.off()
plot(temp)
barplot(temp)
temp
class(temp)
plot(1:10,xaxt="n",type="n")
?plot
plot(sin, -pi, 2*pi)
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
error.bars(rnorm(47))
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
error.bars(rnorm(47),add=T)
?error.bars()
exampleMatrix <- matrix(c(1:10,5:14), ncol=2)
exampleMatrix
error.bars(exampleMatrix)
exampleMatrix <- matrix(c(1:10,c(1,1,1,12,5,3,6,8,9,1)), ncol=2)
error.bars(exampleMatrix)
##------ 09.01.2012 06:44:09 ------##
h <- 2
dev.off()
dev.off()
dev.off()
dev.off()
overallList$overallResult
test <- overallList$overallResult
dev.off()
print(test)
plot(test)
xtest <- overallList$filterXaxis
dev.off()
h <- 2
t)
test <- overallList$overallResult
plot(test)
overallList
test <- overallList$iniDataSet
test
plot(test)
error.bars(test)
t(test)
error.bars(t(test))
exampleMatrix <- matrix(c(1:10,c(1,1,1,12,5,3,6,8,9,1)), ncol=2)
exampleMatrix
error.bars(t(test[1,]))
t(test[1,])
t(test[1,])
t(test[,1])
error.bars(t(test[,1]))
describe(t(test[,1]))
?error.bars
dev.off()
value1 <- as.list(overallList$rowName)
value2 <- as.list(overallList$filterXaxis)
?max
as.data.frame(groupedDataFrame[,lapply(.SD, min, na.rm=TRUE), by=groupBy])
as.data.frame(groupedDataFrame[,, by=groupBy])
as.data.frame(groupedDataFrame[,.SD, by=groupBy])
groupedDataFrame[,.SD, by=groupBy]
describe(groupedDataFrame[,.SD, by=groupBy])
groupedDataFrame[,lapply(.SD, describe, na.rm=TRUE), by=groupBy]
groupedDataFrame[,lapply(.SD, describe), by=groupBy]
groupedDataFrame[,describe), by=groupBy]
groupedDataFrame[,describe, by=groupBy]
?error.bars()
as.data.frame(groupedDataFrame[,lapply(.SD, sd, na.rm=TRUE), by=groupBy])
overallList
}
h <- 2
dev.off()
se <- overallList$errorBars
error.bars(stats=se, add=TRUE)
my.stats <- data.frame(means=overallList$overallResult, se=overallList$errorBars)
error.bars(stats=my.stats, type="b")
my.stats2 <- data.frame(means=overallList$overallResult, se=overallList$errorBars)
my.stats
my.stats2
overallList$overallResult
my.stats3 <- data.frame(means=t(overallList$overallResult), se=t(overallList$errorBars))
my.stats3
error.bars(stats=my.stats3, type="b")
my.stats
my.stats3 <- data.frame(value=t(overallList$filterXaxis),means=t(overallList$overallResult), se=t(overallList$errorBars))
my.stats3
my.stats3 <- data.frame(value=overallList$filterXaxis,means=t(overallList$overallResult), se=t(overallList$errorBars))
my.stats3
error.bars(stats=my.stats3, type="b")
my.stats3
my.stats2
my.stats3
my.stats
my.stats3 <- data.frame(value=overallList$filterXaxis,means=t(overallList$overallResult), se=t(overallList$errorBars))
my.stats3
t(overallList$overallResult)
test2 <- t(overallList$overallResult)
test2 <- as.vector(t(overallList$overallResult))
test2
test2 <- as.vector((overallList$overallResult))
test2
test2 <- as.data.frame(t(overallList$overallResult))
test2
colnames(test2) <- "mean"
test2
colnames(test2) <- "means"
test3 <- as.data.frame(t(overallList$errorBars))
colnames(test3) <- "se"
my.stats4 <- data.frame(value=overallList$filterXaxis,means=test2, se=test3)
my.stats4
error.bars(stats=my.stats4, type="b")
t(overallList$errorBars)
dev.off()
y
means <- t(overallList$overallResult[y,])
class(t(overallList$overallResult[y,]))
overallList$overallResult + overallList$errorBars
y <- 1
?ggplot2
??ggplot2
?ggplot2::ggplot
?error.bars()
colSums(overallResult,na.rm=TRUE)
colSums(overallList$overallResult,na.rm=TRUE)
is.na(overallList$overallResult)
overallList$overallResult[is.na(overallList$overallResult)]
overallList$overallResult[,is.na(overallList$overallResult)]
overallList$overallResult[,!is.na(overallList$overallResult)]
overallList$overallResult[!is.na(overallList$overallResult)]
as.matrix(overallList$overallResult[!is.na(overallList$overallResult)])
as.data.frame(overallList$overallResult[!is.na(overallList$overallResult)])
class(overallList$overallResult)
overallList$colName
overallList$colName[!is.na(overallList$overallResult)]
h <- 2
h <- 2
values <- overallList$filterXaxis
means <- t(overallList$overallResult)
se <-  t(overallList$errorBars)
colnames(t(overallList$overallResult))
as.vector(means)
as.data.frame(means)
##------ 11.01.2012 06:45:45 ------##
?barplot
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), pch=overallList$symbolParameter)
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), pch=overallList$symbolParameter)
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), names.arg=overallList$symbolParameter)
overallList$symbolParameter
test <- 100:136
test
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), names.arg=test)
length(test)
test <- 100:135
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), names.arg=test)
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), names.arg=test)
?par
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxs="i")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxs="r")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxs="i")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxs="r")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxt="n")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxt="l")
rror.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxt="n")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxt="l")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), xaxt="n")
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), ann=FALSE)
error.bars(bars=TRUE, stats=myStats, main = "", xlab = overallList$xAxisName, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), axes=FALSE)
error.bars(bars=TRUE, stats=myStats, main = "", col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), axes=FALSE)
error.bars(bars=TRUE, stats=myStats, main = "", col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), axes=FALSE, ann=FALSE)
error.bars(bars=TRUE, stats=myStats, main = FALSE, col=overallList$color, ylab=overallList$yAxisName, ylim=c(0,max(overallList$overallResult + overallList$errorBars + 10,na.rm=TRUE)), axes=FALSE, ann=FALSE)
error.bars(bars=TRUE, stats=myStats, col=overallList$color, ylab=overallList$yAxisName, axes=FALSE, ann=FALSE)
error.bars(bars=TRUE, stats=myStats, col=overallList$color, ylab=overallList$yAxisName, axes=FALSE, ann=FALSE)
axis(1, at=1:36, lab(100:135))
titel(xlab="Hallo")
title(xlab="Hallo")
error.bars(bars=TRUE, xlab="", stats=myStats, col=overallList$color, ylab=overallList$yAxisName, axes=FALSE, ann=FALSE)
title(xlab="Hallo")
error.bars(bars=TRUE, xlab="", stats=myStats, col=overallList$color, ylab=overallList$yAxisName)
error.bars(bars=TRUE, stats=myStats, col=overallList$color, ylab=overallList$yAxisName)
error.bars(bars=TRUE, xlab="", stats=myStats, col=overallList$color, ylab=overallList$yAxisName)
error.bars(names.arg=c(100:135), bars=TRUE, xlab="", stats=myStats, col=overallList$color, ylab=overallList$yAxisName)
points(1:36, rep(5,5), cex=1:5, col=1:5, pch=0:4)
points(1:36, cex=1:5, col=1:5, pch=0:4)
ggplot
?ggplot
?ggplot2
??ggplot2
?ggplot2::ggplot 
install.packages("ggplot2")
install.packages(c(ggplot2), repos="http://cran.r-project.org", dependencies = TRUE)
install.packages(c("ggplot2"), repos="http://cran.r-project.org", dependencies = TRUE)
?ggplot2
overallList$overallResult
c <- ggplot(overallList$overallResult) 
c
c + geom_bar() 
gplot(data=overallList$overallResult, geom="bar") 
ggplot(data=overallList$overallResult, geom="bar") 
c <- ggplot(mtcars, aes(factor(cyl))) 
c + geom_bar()
mtcars
class(mtcars)
class(overallList$overallResult)
overallList$overallResult
cMy <- ggplot(overallList$overallResult, aes()) 
cMy
cMy + geom_bar()
?ggplot
?geom_bar()
?ggplot
mtcars
cMy <- ggplot(overallList$overallResult, aes(58)) 
cMy
cMy <- ggplot(overallList$overallResult, aes(58)) 
cMy + geom_bar()
cMy <- ggplot(overallList$overallResult, aes("58")) 
cMy + geom_bar()
ggplot(overallList$overallResult) 
ggplot(overallList$overallResult, aes(overallList$overallResult[1])) 
overallList$overallResult
ggplot(overallList$overallResult, aes(Values)) 
ggplot(overallList$overallResult, aes("Values")) 
ggplot(overallList$overallResult, aes(factor(name))) 
?aes
ggplot(overallList$overallResult) 
ggplot(overallList$overallResult, mapping = overallList$overallResult["names"], geom="bar") 
ggplot(overallList$overallResult, mapping = overallList$overallResult["name"], geom="bar") 
ggplot(tempOverallResult, mapping = tempOverallResult["name"], geom="bar") 
ggplot(tempOverallResult, mapping = aes(x=tempOverallResult["name"]), geom="bar") 
ggplot(tempOverallResult, mapping = aes(x=tempOverallResult["values"]), geom="bar") 
ggplot(tempOverallResult, aes(x=tempOverallResult["values"]), geom="bar") 
aes(x=tempOverallResult["values"])
aes(tempOverallResult["values"])
aes(tempOverallResult)
aes(tempOverallResult[1])
aes(tempOverallResult[2])
aes_string(tempOverallResult[2])
aes_string(tempOverallResult[1])
ggplot(tempOverallResult, aes_string(tempOverallResult["values"]), geom="bar") 
ggplot(tempOverallResult, aes_string("values"), geom="bar") 
ggplot(tempOverallResult, aes_string(values), geom="bar") 
ggplot(tempOverallResult, aes_string("values"), geom="bar") 
ggplot(tempOverallResult, aes_string("name"), geom="bar") 
ggplot(as.factor(tempOverallResult), aes_string("name"), geom="bar") 
ggplot(as.factor(tempOverallResult), aes("name"), geom="bar") 
ggplot(as.factor(tempOverallResult), aes("values"), geom="bar") 
as.factor(tempOverallResult)
as.factor(tempOverallResult[1])
as.factor(tempOverallResult[2])
tempOverallResult
class(tempOverallResult)
class(tempOverallResult[2])
class(factor(tempOverallResult[2]))
factor(tempOverallResult[2])
ggplot(data= tempOverallResult, x=tempOverallResult[2], y=tempOverallResult[1]) 
ggplot(data= tempOverallResult, x=tempOverallResult[2], y=tempOverallResult[1], group=tempOverallResult[2]) 
y = 1
c <- ggplot(myStats, aes(value, means))
c + stat_smooth()
c + stat_smooth(span=myStats["se"])
myStats["se"]
c + stat_smooth(span=1)
c + stat_smooth(span=5)
c + stat_smooth(span=1)
c + stat_smooth()
c + stat_smooth(data=myStats["es"])
myStats
c + stat_smooth(data=myStats["se"])
stat_smooth(data=myStats)
c
c <- ggplot(myStats, aes(value, means))
c
c + stat_smooth()
gplot(value, wt, data=myStats, geom=c("smooth", "point"))
install.packages(c("gplot"), repos="http://cran.r-project.org", dependencies = TRUE)
install.packages(c("ggplot"), repos="http://cran.r-project.org", dependencies = TRUE)
ggplot(value, wt, data=myStats, geom=c("smooth", "point"))
c <- ggplot(myStats, aes(value, means))
c <- ggplot(myStats, aes(x=value, y=means, se=se))
c + stat_smooth()
c + stat_smooth(aes(se=se))
c <- ggplot(myStats, aes(x=value, y=means))
c + stat_smooth(aes(se=se))
c + stat_smooth(se = FALSE)
c + stat_smooth(se = FALSE) + geom_point()
h <- 2
y <- 1
c + stat_smooth(formula = y+myStats) + geom_point()
c <- ggplot(myStats, aes(x=value, y=means, test=se))
c + stat_smooth(formula = y + test) + geom_point()
c + stat_smooth(formula = y + myStats["se"]) + geom_point()
c + stat_smooth() + geom_point()
c + stat_smooth(myStats["se"]) + geom_point()
c + stat_smooth(y~) + geom_point()
c + stat_smooth(y~x) + geom_point()
?span
??span
c + stat_smooth(method = "lm") + geom_point()
c + stat_smooth(method = "loess") + geom_point()
c + stat_smooth(x) + geom_point()
c + stat_smooth(formula = y nx(x,3)) + geom_point()
c <- ggplot(myStats, aes(x=value, y=means, test=se))
c + stat_smooth(formula = y~x) + geom_point()
c + stat_smooth(formula = y) + geom_point()
c + stat_smooth(formula = y+test) + geom_point()
c <- ggplot(myStats, aes(x=value, y=means, se))
c <- ggplot(myStats, aes(x=value, y=means, se=se))
c + stat_smooth(formula = y+se) + geom_point()
colnames(mtcars)
c + stat_smooth(aes(ymin=means-se, ymax=means+se)) + geom_point()
c + stat_smooth(aes(ymin=means-se, ymax=means+se), data=myStats, stat="identity") + geom_point()
c + geom_smooth(aes(ymin=means-se, ymax=means+se), data=myStats, stat="identity") + geom_point()
myStat
myStats
?sd
sd(1:2)
sd(2)
sd(1:2)
plot(1:2)
error.bars(stats=data.frame(value=data.frame(1), mean=data.frame(1.5), se=data.frame(se)))
error.bars(stats=data.frame(value=data.frame(1), mean=data.frame(1.5), se=data.frame(0.7)))
]
myStats$means
myStats
overallList$filterTreatment
overallList$rowName
?rep
overallList$overallResult
colnames(overallList$overallResult)
colnames(t(overallList$overallResult))
overallList$rowName
length(t(overallList$overallResult))
t(overallList$overallResult)[1:50]
overallList$overallResult[1:50]
overallList$overallResult[1:50,]
overallList$overallResult[1:10,]
t(overallList$overallResult)[1:10]
overallList$overallResult[1:10,]
overallList$overallResult[1,]
t(overallList$overallResult)[1:10]
t(overallList$overallResult)
y <- 1
ggplot(myStats, aes(x=value, y=means, colour=overallList$color[y])) + geom_smooth(aes(ymin=means-se, ymax=means+se, fill=overallList$color[y]), data=myStats, stat="identity") + geom_point() + scale_shape(solid = TRUE)
diamonds
colname(diamonds)
colnames(diamonds)
groupedDataFrameMeanTemp <- groupedDataFrameMean
groupedDataFrameSDTemp <- groupedDataFrameSD
[[40]]
groupedDataFrameMean[[40]]
groupedDataFrameMean[["40"]]
test <-  buildList(overallList))
test <-  buildList(overallList)
names(test)
h <- Treatment
h <- "Treatment"
groupedDataFrameMean[[h]]
groupedDataFrameMean[[h]] %in% test[[h]]
groupedDataFrameMean[1,]
groupedDataFrameMean[1,] + groupedDataFrameSD[1,]
class(groupedDataFrameMean[1,])
?merge()
class(groupedDataFrameMean[1,])
groupedDataFrameMean[1,]
groupedDataFrameSD1,]
groupedDataFrameSD[1,]
merge(groupedDataFrameMean[1,], groupedDataFrameSD[1,], by.x = groupBy)
x <- groupedDataFrameMean[1,]
y <- groupedDataFrameSD[1,]
merge(x,y,by="Treatment")
test <- merge(x,y,by="Treatment")
colnames(test)
test <- merge(x,y,by=groupBy)
test
test <- merge(x,y,by=c(groupBy,overallList$descriptor))
test
test <- merge(x,y,by=c(groupBy))
test
x
y
test <- merge(x,y,by=c(groupBy), all=TRUE)
test
y
groupedDataFrameSD[1,]
x <- groupedDataFrameMean[1,]
y <- groupedDataFrameSD[1,]
test <- merge(x,y,by=c(groupBy))
test
merge(groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = roupBy)[1,]
groupedDataFrameSD[6,]
mergeTest <- merge(groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)
mergeTest[1]
mergeTest[1,]
mergeTest[2,]
groupedDataFrameMean[2,]
sum(is.na(groupedDataFrameMean[booleanVector,]))
sum(is.na(groupedDataFrameSD[booleanVector,]))
sum(is.na(groupedDataFrameSD))
sum(is.na(groupedDataFrameMean))
mergeTest <- merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)
mergeTest[1,]
groupedDataFrameMean[1,]
groupedDataFrameSD[1,]
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=TRUE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=TRUE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
system.time({merge(sort=TRUE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupBy)},TRUE)
mergeTest[1,]
overallList$xAxis
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=means), colour=factor(Treatment,Condition))
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=means), colour=factor(Treatment,Condition)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=means), colour=factor(Treatment,Condition)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=mean), colour=factor(Treatment,Condition)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=mean)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=mean)) + geom_point()
colnames(overallList$iniDataSet)
ggplot(overallList$iniDataSet, aes(x=Day..Int., y=mean)) + geom_point()
class(overallList$xAxis)
ggplot(overallList$iniDataSet, aes(x=Day..Int., y=mean)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=overallList$xAxis, y=mean)) + geom_point()
test <- "Day..Int."
ggplot(overallList$iniDataSet, aes(x=test, y=mean)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=$test, y=mean)) + geom_point()
ggplot(overallList$iniDataSet, aes(x=\test, y=mean)) + geom_point()
ggplot(overallList$iniDataSet, aes_string(x=test, y=mean)) + geom_point()
groupBy
colnames(merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = groupByAll))
colnames(groupedDataFrameMean[booleanVector,])
colnames(groupedDataFrameMean[booleanVector,])
colnames(groupedDataFrameSD[booleanVector,])
groupedDataFrameSD[booleanVector,]
groupedDataFrame <- groupedDataFrameMean
listOfValues <- buildList(overallList)
h
h <- "none"
h <- "Day..Int."
groupedDataFrame
##------ 12.01.2012 11:08:52 ------##
}
ggplot(overallList$iniDataSet, aes(x=xAxis, y=mean)) + geom_point()
paste(overallList$iniDataSet[1], overallList$iniDataSet[2])
paste(overallList$iniDataSet[1], overallList$iniDataSet[2])
class(overallList$iniDataSet[1])
overallList$iniDataSet[1]
paste(overallList$iniDataSet[1,1], overallList$iniDataSet[2,1])
paste(overallList$iniDataSet[2,1])
overallList$iniDataSet[2,1]
overallList$iniDataSet[1,]
overallList$iniDataSet[,1]
paste(overallList$iniDataSet[,1], overallList$iniDataSet[,1])
paste(overallList$iniDataSet[,1], overallList$iniDataSet[,2])
paste(overallList$iniDataSet[,1:2])
groupBy[h]
h<-1
groupBy[h]
paste(vector(), mergeDataSet[groupBy])
paste(NULL, mergeDataSet[groupBy])
paste(FALSE, mergeDataSet[groupBy])
mergeDataSet[groupBy]
paste(mergeDataSet[groupBy], mergeDataSet[groupBy])
paste(mergeDataSet[,groupBy], mergeDataSet[,groupBy])
paste(NULL, mergeDataSet[,groupBy])
paste(FALSE, mergeDataSet[,groupBy])
paste("", mergeDataSet[,groupBy])
paste("", mergeDataSet[,groupBy], sep="")
paste(vector(), mergeDataSet[,groupBy], sep="")
paste(vector(), mergeDataSet[,groupBy])
valueVector <- c(colOfXaxis, colOfMean, colOfSD)
h<-2
ggplot(overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point()
overallList$overallResult
overallList$overallResult
ggplot(overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean), colour=factor(name)) + geom_point()
overallList$overallResult
factor(overallList$overallResult["name"])
factor(levels(overallList$overallResult["name"]))
levels(overallList$overallResult["name"])
overallList$overallResult["name"]
options() 
ggplot(overallList$overallResult, aes(x=xAxis, y=mean), colour=factor(levels(name))) + geom_point()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean), colour=name) + geom_point()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean), colours()) + geom_point()
overallList$color
overallList$xAxisName
ggplot(overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point(aes(colour=name)) + scale_colour_manual(values=overallList$color) + opts(legend.position="none", axis.title.x=overallList$xAxisName) + scale_shape()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean), shape=name) + geom_point(aes(colour=name)) + scale_colour_manual(values=overallList$color) + opts(legend.position="none", axis.title.x=overallList$xAxisName) + scale_shape()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean, shape=name)) + geom_point(aes(colour=name)) + scale_colour_manual(values=overallList$color) + opts(legend.position="none", axis.title.x=overallList$xAxisName) + scale_shape()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point(aes(colour=name)) + scale_colour_manual(values=overallList$color) + opts(legend.position="none", axis.title.x=overallList$xAxisName) + scale_shape()
ggplot(overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point(aes(colour=name)) + scale_colour_manual(values=overallList$color) + opts(legend.position="none", axis.title.x=overallList$xAxisName) + scale_shape(name="Test")
ggplot(overallList$overallResult, aes(x=xAxis, y=mean, shape=name)) + geom_point(aes(colour=name)) + scale_colour_manual(values=overallList$color) + opts(legend.position="none") + scale_shape()
##------ 13.01.2012 06:42:16 ------##
test <- c(1:4)
test
?scale_x_continuous()
overallResult <- overallList$overallResult
overallResult
)
overallResult[111,"mean"]
factor(overallResult["name"])
level(overallResult["name"])
levle(overallResult["name"])
?level
??level
?factor()
factor(overallResult["name"], ordered = FALSE)
factor(overallResult["name"], ordered = TRUE)
is.factor(overallResult["name"])
as.factor(overallResult["name"])
levels(overallResult["name"])
levels(as.vector(overallResult["name"]))
levels(factor(as.vector(overallResult["name"])))
test
levels(test)
overallResult["name"]
as.vector(overallResult["name"])
unlist(overallResult["name"])
unlist(overallResult["name"])[2]
unlist(overallResult["name"])[[1]]
[overallResult["name"] == Trockenstress
[overallResult["name"] == "Trockenstress"
[overallResult$name == "Trockenstress"
overallResult$name == "Trockenstress"
overallList$overallResult
overallList$overallResult$mean
class(overallResult$mean[overallResult$name == unlist(overallResult$name)
)
class(overallResult$mean[overallResult$name == unlist(overallResult$name)])
class(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]])
class(as.vector(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]))
rowSums(as.vector(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]))
rowSums(data.frame(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]))
colSums(data.frame(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]))
colSums(data.frame(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]),,na.rm=TRUE)
colSums(data.frame(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]),na.rm=TRUE)
rowSums(data.frame(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]),na.rm=TRUE)
is.na(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]])
sum(is.na(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]))
sum(!is.na(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1]]]))
sum(!is.na(overallResult$mean[overallResult$name == unlist(overallResult$name)[[1:2]]]))
length(unlist(overallResult$name))
length(levels(unlist(overallResult$name)))
gplot(data=overallList$overallResult, aes(x=xAxis, y=mean)) + geom_bar()
ggplot(data=overallList$overallResult, aes(x=xAxis, y=mean)) + geom_bar()
ggplot(data=overallList$overallResult, aes(x=xAxis, y=mean), na.rm=TRUE) + geom_bar()
ggplot(data=overallList$overallResult, aes(x=xAxis, y=mean), na.rm=TRUE) + geom_bar()
overallList$overallResult
ggplot(data=overallList$overallResult, aes(x=xAxis, y=mean), na.rm=TRUE) + geom_point()
ggplot(data=overallList$overallResult, aes(x=xAxis, y=mean)) + geom_point()
ggplot(data=overallList$overallResult, aes(x=name, y=mean)) + geom_point()
ggplot(data=overallList$overallResult, aes(x=name, y=mean)) + geom_bar()
ggplot(data=overallList$overallResult, aes(x=name, y=mean)) + geom_bar(stat="identity", binwidth=1)
ggplot(data=overallList$overallResult, aes(x=name, y=mean)) + geom_bar(stat="identity")
ggplot(data=overallList$overallResult, aes(x=name, y=mean, na.rm=TRUE)) + geom_bar(stat="identity")
overallList$overallResult
overallList$overallResult[is.na(overallList$overallResult)] <- 0
overallList$overallResult <- 0
overallList$overallResult
test <- overallList$overallResult
test[is.na(test)] <- 0
test
ggplot(data=test, aes(x=name, y=mean, na.rm=TRUE)) + geom_bar(stat="identity")
overallList$overallResult[is.na(overallList$overallResult)] <- 0
class(overallList$overallResult)
overallList$overallResult$name
options()
overallList$overallResult
overallList$overallList
overallList$saveName
##------ 16.01.2012 06:58:43 ------##
?xlab
overallListTemp <- overallList
o <- stackedImages[1]
o
colnames(groupedDataFrameMean)
overallList$descriptor
colnames(groupedDataFrameMean)
colnames(groupedDataFrameSD)
colnames(mergeDataSet)
colnames(buildRowName)
test <- buildRowName(mergeDataSet,groupBy, c(overallList$xAxis, overallList$descriptor, colOfSD), overallList$yAxisName)
colnames(test)
test
test["name"]
overallResult <- overallList$overallResult
)
overallResult[,overallList$descriptor]
overallResult[overallResult$name == unlist(levels(overallResult$name))[[1]],overallList$descriptor]
overallResult[1,overallList$descriptor]
overallResult[c(T,T,F,T),overallList$descriptor]
overallResult[TRUE,overallList$descriptor]
overallResult[FALSE,overallList$descriptor]
overallResult[overallList$descriptor]
overallResult[,overallList$descriptor]
overallResult[overallList$descriptor,]
overallResult[overallList$descriptor][1]
overallResult[overallList$descriptor][2]
overallResult$name == unlist(levels(overallResult$name))[[1]]
index <- 1
vec <- overallResult$name == unlist(levels(overallResult$name))[[index]]
overallResult[overallList$descriptor][vec]
overallResult[vec,overallList$descriptor]
vec
overallResult$overallList$descriptor]
overallResult[overallList$descriptor]
overallResult[overallList$descriptor,]
class(overallResult[overallList$descriptor])
overallResult[vec, overallList$descriptor]
overallResult[vec]
overallResult
overallResult[overallResult==vec]
overallResult[overallResult==vec,]
overallResult[overallResult[vec]]
overallResult[c(T,F,T)]
overallResult[c(T)]
overallResult[c(T,F)]
overallResult[c(T,F),]
length(vec)
vec
as.vector(vec)
overallResult[vec,]
overallResult[vec,overallList$descriptor]
index <- 2
overallList$descriptor
testDes <- overallList$descriptor
testDes <- c(testDes, "side.area.norm..mm.2..SD")
index <- 1
overallResult[overallList$descriptor]
overallResult[testDes]
overallResult[vec,testDes]
is.na(overallResult[vec,testDes])
update(ggplot2)
update("ggplot2")
update.packages("ggplot2")
update.packages(c("ggplot2"), repos="http://cran.r-project.org", dependencies = TRUE)
##------ 16.01.2012 08:35:05 ------##
##------ 16.01.2012 08:41:23 ------##
##------ 16.01.2012 08:49:19 ------##
)
)
durchlauf
h <- 1
dev.off()
overallList(overallList$overallResult)
colnames(overallList$overallResult)
colnames(overallList$overallResult)
overallResult[1:10]
overallList$overallResult[1:10]
overallList$overallResult[1:10,]
overallList$overallResult[1:5,]
test <- overallList$overallResult[1:5,]
data(postdoc, package = "latticeExtra")
class(postdoc)
dat2
test
test2 <- rbind(test[1])
test2
test[2]
test[3]
colnames(test[3])
test2 <- rep.int(colnames(test[3]), length(test[3]))
test2
length(test[3])
length(test[,3])
test2 <- rep.int(colnames(test[3]), length(test[,3]))
test2
test2 <- rep.int(colnames(test[3]), length(test[,3])) <- cbind(test[3])
test2 <- rep.int(colnames(test[3]), length(test[,3]))
test2 <- cbind(test[3])
test2
test2 <- rep.int(colnames(test[3]), length(test[,3]))
test2
test2 <- as.data.frame(hist=rep.int(colnames(test[3]), length(test[,3]), values=test[3], day=test[2], name=test[1])
test2
test2 <- as.data.frame(hist=rep.int(colnames(test[3]), length(test[,3])), values=test[3], day=test[2], name=test[1])
test2 <- as.data.frame(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=test[3], day=test[2], name=test[1])
test2 <- data.frame(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=test[3], day=test[2], name=test[1])
test2
test2 <- data.frame(hist=rep.int(x="x", times=length(test[,3])), values=test[3], day=test[2], name=test[1])
test2
test2 <- data.frame(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=as.vector(test[3]), day=test[2], name=test[1])
test2
test2 <- data.frame(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=unlist(test[3]), day=test[2], name=test[1])
test2
unlist(test[3])
test2 <- data.frame(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=(test[3]), day=test[2], name=test[1])
test2
?cbind
rbind(test2, data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1]))
rbind(data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1]), test2)
test3 <- data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1])
test3
test4 <- rbind(test2,test3)
test4 <- rbind(test2,test3,deparse.level = 0)
test4 <- rbind(test2,test3,deparse.level = 1)
test4 <- rbind(test2,test3,deparse.level = 2)
test4 <- rbind(test2,test3,deparse.level = 3)
test4 <- rbind(test2,test3,check.names=FALSE)
test3 <- data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1], check.names = FALSE)
test3
test3 <- data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1], check.names = TRUE)
test3
test3 <- data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1], row.names = FALSE)
test3 <- data.frame(hist=rep.int(x=colnames(test[4]), times=length(test[,4])), values=(test[4]), day=test[2], name=test[1], check.rows = FALSE)
test3
test2_1 <- matric(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=(test[3]), day=test[2], name=test[1])
test2_1 <- matrix(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=(test[3]), day=test[2], name=test[1])
test2_1 <- list(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=(test[3]), day=test[2], name=test[1])
test2_1
as.data.frame(test2)
test2_1 <- list(rep.int(x=colnames(test[3]), times=length(test[,3])), (test[3]), test[2], test[1])
test2
colnames(test2) <- NULL
test2
colnames(test) <- NULL
test2 <- data.frame(hist=rep.int(x=colnames(test[3]), times=length(test[,3])), values=(test[3]), day=test[2], name=test[1])
overallList$descriptor
overallList$iniDataSet[1:5,]
colnames(overallList$iniDataSet[1:5,])
t(overallList$iniDataSet[1:5,])
as.data.frame(t(overallList$iniDataSet[1:5,]))
groupedDataFrameMean[1:5]
groupedDataFrameMean[1:5,]
colnames(mergeDataSet)
buildRowName(mergeDataSet,groupBy, c(colOfXaxis, colOfMean, colOfSD), overallList$yAxisName)[1:5]
buildRowName(mergeDataSet,groupBy, c(colOfXaxis, colOfMean, colOfSD), overallList$yAxisName)[1:5,]
mergeDataSet <- test
temp
buildRowName(test,groupBy)
buildRowName(test,groupBy)
##------ 18.01.2012 07:14:38 ------##
overallList$overallResult
overallList$overallResult[1:3,]
overallList$treatment
overallList$filterTreatmenttreatment
overallList$filterTreatment
overallList$secondTreatment
overallList$filterSecondTreatment
length(overallList$filterSecondTreatment)
value <- overallList$filterTreatment[1]
overallList$overallResult[1:3,]
overallList$overallResult[1:3,]
value <- overallList$filterTreatment[1]
class(plotThisValues)
colnames(plotThisValues)
plotThisValues[1:3,]
overallList$treatment
overallList
?ggsave
value <- overallList$filterTreatment[1]
value
plotThisValues[1:5,]
plotThisValues[1:50,]
h = 1
overallList$filterTreatment[4]
value <- overallList$filterTreatment[4]
length(plotThisValues)
length(plotThisValues[,])
length(plotThisValues[1,])
length(plotThisValues[,1])
value <- overallList$filterTreatment[1]
makeOverallImage = TRUE
minor_breaks=FALSE
plot
print(plot)
plot
value <- overallList$filterTreatment[1]
makeOverallImage = TRUE
legende=TRUE
minor_breaks=FALSE
dev.off()
dev.off()
dev.off()
dev.off()
plotThisValues$hist
colNameWichMustBind <- plotThisValues$hist[1]
colNameWichMustBind
?substr
n
?sub
sub("[.]{6}", "", "side.fluo.normalized.histogram.bin.1.0_25") 
sub("[.]{6}*", "", "side.fluo.normalized.histogram.bin.1.0_25") 
sub("[.]{6}.*", "", "side.fluo.normalized.histogram.bin.1.0_25") 
sub(".{6}.*", "", "side.fluo.normalized.histogram.bin.1.0_25") 
sub(".{6}", "", "side.fluo.normalized.histogram.bin.1.0_25") 
sub("\\.{6}", "", "side.fluo.normalized.histogram.bin.1.0_25") 
sub("\.{6}", "", "side.fluo.normalized.histogram.bin.1.0_25") 
charmatch(".", "side.fluo.normalized.histogram.bin.1.0_25")
index(".", "side.fluo.normalized.histogram.bin.1.0_25")
which(strsplit("side.fluo.normalized.histogram.bin.1.0_25", '')[[1]]=='.')
substr("side.fluo.normalized.histogram.bin.1.0_25",37)
substr("side.fluo.normalized.histogram.bin.1.0_25",37,length("side.fluo.normalized.histogram.bin.1.0_25"))
length("side.fluo.normalized.histogram.bin.1.0_25")
nchar("side.fluo.normalized.histogram.bin.1.0_25")
substr("side.fluo.normalized.histogram.bin.1.0_25",37,nchar("side.fluo.normalized.histogram.bin.1.0_25"))
substr("side.fluo.normalized.histogram.bin.1.0_25",37+1,nchar("side.fluo.normalized.histogram.bin.1.0_25"))
positions[length(positions)]
overallList$overallResult$hist[1:5]
overallList$overallResult$hist[1:5]
value <- overallList$filterTreatment[1]
dev.off()
dev.off()
dev.off()
plotThisValues[1:10]
plotThisValues[1:10]
plotThisValues[1:10,]
plotThisValues <- overallList$overallResult
plotThisValues <- overallList$overallResult
plotThisValues
length(plotThisValues[,1])
length(overallList$overallResult[,1])
overallList$diagramTyp
value <- overallList$filterSecondTreatment[1]
columnName <- "name"
?tapply
test <- tapply(plotThisValues["name"], plotThisValues["name"], reNameColumn)
test <- tapply(plotThisValues["name"], plotThisValues["name"], reNameColumn)
test <- tapply(plotThisValues["name"], reNameColumn)
test <- tapply(plotThisValues, plotThisValues["name"], reNameColumn)
plotThisValues[,columnName]
plotThisValues[1,columnName]
overallList$overallResult$name
h = 1
value <- overallList$filterSecondTreatment[1]
?opts
plot_theme(x)
?ggsave
?ggpshade
??ggpshade
value <- overallList$filterSecondTreatment[1]
plotThisValues[1:10]
plotThisValues[1:10,]
temp <- plotThisValues[1:10,]
reNameColumn(plotThisValues)[1:10,]
reNameColumn(plotThisValues, "name")[1:10,]
index <- 1
class(plotThisValues[index,columnName])
class(plotThisValues)
as.factor(substr(as.character(plotThisValues[index,columnName]),0,positions[1]-1))
plotThisValues[1:10,]
value <- overallList$filterSecondTreatment
value <- overallList$filterSecondTreatment[1]
index <- 1
class(plotThisValues)
class(plotThisValues$values)
class(plotThisValues$name)
plotThisValues[1:10,]
reNameColumn(plotThisValues, "name")[1:10]
reNameColumn(plotThisValues, "name")[1:10,]
makeOverallImage = TRUE
minor_breaks=FALSE
print(plot)
print(plot)
print(plot)
dev.off()
dev.off()
value <- overallList$filterSecondTreatment[1]
value <- overallList$filterSecondTreatment[1]
class(plotThisValues$name)
test <- as.data.frame(plotThisValues, stringsAsFactors =FALSE)
class(test$name)
test <- reNameColumn(plotThisValues, "name")
class(test$name)
class(plotThisValues$name)
class(plotThisValues$hist)
class(plotThisValues$values)
class(plotThisValues$xAxis)
##------ 19.01.2012 06:46:11 ------##
class(overallList$overallResult$hist)
class(overallList$overallResult$name)
class(overallList$overallResult$values)
class(overallList$overallResult$xAxis)
value <- overallList$filterSecondTreatment[1]
value
class(reNameColumn(plotThisValues, "name")$name)
class(reNameColumn(plotThisValues, "name")$hist)
h <- 2
class(plotThisValues$hist)
class(plotThisValues$name)
class(plotThisValues$value)
class(plotThisValues$index)
class(plotThisValues$xAxis)
class(plotThisValues$hist)
class(plotThisValues$xAxis)
class(plotThisValues$hist)
class(plotThisValues$value)
value <- overallList$filterSecondTreatment[1]
class(plotThisValues$hist)
class(plotThisValues$value)
class(plotThisValues$xAxis)
class(plotThisValues$name)
h <- 2
class(plotThisValues$name)
class(plotThisValues$xAxis)
class(plotThisValues$value)
class(plotThisValues$hist)
class(overallList$overallResult$hist)
class(overallList$overallResult$name)
class(reNameColumn(plotThisValues, "name"))$hist
class(reNameColumn(plotThisValues, "name")$hist)
class(reNameColumn(plotThisValues, "name")$hist)
class(reNameColumn(plotThisValues, "name")$value)
}
}
mergeDataSet <- overallList$iniDataSet
colnames(buildRowNameDataSet)
colnames(buildRowNameDataSet)
overallList$iniDataSet$primaerTreatment
colnames(buildRowNameDataSet)
temp[1:10,]
temp[1:10,]
value <- overallList$filterSecondTreatment[1]
colnames(plotThisValues)
class(reNameColumn(plotThisValues, "name")$name)
class(reNameColumn(plotThisValues, "name")$value)
class(reNameColumn(plotThisValues, "name", "primaerTreatment")$Hist)
class(reNameColumn(plotThisValues, "name", "primaerTreatment")$hist)
class(reNameColumn(plotThisValues, "name", "primaerTreatment")$name)
class(reNameColumn(plotThisValues, "name", "primaerTreatment")$value)
h <- 2
overallList$overallResult[1:50,]
overallList$overallResult[1:50,]
overallList$overallResult
overallList$overallResult[!is.na(overallList$overallResult)]
overallList$overallResult[is.na(overallList$overallResult)]
is.na(overallList$overallResult)
overallList$overallResult[!is.na(overallList$overallResult)]$xAxis
overallList$overallResult[!is.na(overallList$overallResult)]
overallList$overallResult[!is.na(overallList$overallResult),]
overallList$overallResult$xAxis[!is.na(overallList$overallResult),]
overallList$overallResult$xAxis
overallList$overallResult$xAxis[!is.na(overallList$overallResult$xAxis),]
!is.na(overallList$overallResult$xAxis)
overallList$overallResult$xAxis
!is.na(overallList$overallResult$mean)
overallList$overallResult$xAxis[!is.na(overallList$overallResult$mean),]
overallList$overallResult$xAxis[!is.na(overallList$overallResult$mean)]
overallList$overallResult$xAxis[!is.na(overallList$overallResult$mean)][1]
##------ 23.01.2012 08:13:40 ------##
##------ 24.01.2012 07:06:05 ------##
?ggsave
??ggsave
?ggplot2::ggsave
?geom_shape
length(overallList$overallResult)
length(overallList$overallResult[1,])
length(overallList$overallResult[1:10,])
overallList$overallResult[1:10,]
theme_get()
?theme_get
?theme_set
##------ 25.01.2012 07:31:33 ------##
?opt
?opts
)
print(plot)
)
?scale_manual
?legend.text
??legend.text
##------ 31.01.2012 07:39:38 ------##
quantile(overallList$overallResult)
 as.data.frame(groupedDataFrame[,lapply(.SD, quantile, na.rm=TRUE), by=c(groupBy,overallList$xAxis)])
test <- as.data.frame(groupedDataFrame[,lapply(.SD, quantile, na.rm=TRUE), by=c(groupBy,overallList$xAxis)])
test[1:10,]
test[5000:5010,]
test
as.data.frame(groupedDataFrame[,lapply(.SD, quantile, na.rm=TRUE), by=c(groupBy,overallList$xAxis)])
?quantile
?lapply
x
groupedDataFrame[,, by=c(groupBy)]
groupedDataFrame[,.SD, by=c(groupBy)]
groupedDataFrame[,.SD,sum, by=c(groupBy)]
groupedDataFrame[.SD,, by=c(groupBy)]
groupedDataFrame[.SD, by=c(groupBy)]
groupedDataFrame[.SD,sum, by=c(groupBy)]
groupedDataFrame[,lapply(.SD,sum), by=c(groupBy)]
groupedDataFrame[,lapply(.SD,sum, na.rm=TRUE), by=c(groupBy)]
groupedDataFrame[,lapply(.SD,quantile, na.rm=TRUE), by=c(groupBy)]
groupedDataFrame[1:5;]
groupedDataFrame[1:5,]
groupedDataFrame[1:5,.SD]
?data.table
groupedDataFrame[,.SD[2], by=groupBy]
groupedDataFrame[,.SD, by=groupBy]
groupedDataFrame[,.SD[1:19], by=groupBy]
groupedDataFrame[,.SD[100:109], by=groupBy]
groupedDataFrame[,.SD[1000:1009], by=groupBy]
groupedDataFrame[,.SD[5000:5009], by=groupBy]
groupedDataFrame[,lapply(.SD[5000:5009],sum), by=groupBy]
groupedDataFrame[,lapply(.SD[5000:5009],quantile), by=groupBy]
groupedDataFrame[,list(.SD[5000:5009]), by=groupBy]
groupedDataFrame[,quantile(list(.SD[5000:5009])), by=groupBy]
groupedDataFrame[,lapply(.SD[5000:5009], quantile), by=groupBy]
groupedDataFrame[,list(lapply(.SD[5000:5009], quantile)), by=groupBy]
groupedDataFrame[,list(q=lapply(.SD[5000:5009], quantile)), by=groupBy]
groupedDataFrame[,list(q0=quantile(.SD[5000:5009], probs=c(0.1))), by=groupBy]
groupedDataFrame[,list(q=quantile(.SD[5000:5009], probs=c(0.1))), by=groupBy]
quantile(groupedDataFrame[5000:5009,], probs=c(0.1))
quantile(groupedDataFrame[5000:5009,], probs=c(0.1), na.rm=TRUE)
groupedDataFrame[5000:5009,]
groupedDataFrame[,5000:5009,]
groupedDataFrame[,5000:5009]
groupedDataFrame[5000:5009]
groupedDataFrame[5000:5009]
groupedDataFrame[2]
groupedDataFrame[3]
groupedDataFrame[,3]
groupedDataFrame[,Treatment#]
groupedDataFrame[,Treatment]
groupedDataFrame[,Treatment]
groupedDataFrame[5,Treatment]
groupedDataFrame[1:5,Treatment]
quantile(groupedDataFrame[5000:5009,side.height.norm..mm.], probs=c(0.1), na.rm=TRUE)
quantile(groupedDataFrame[5000:5009,side.height.norm..mm.], probs=c(0.1, 10), na.rm=TRUE)
quantile(groupedDataFrame[5000:5009,side.height.norm..mm.], probs=c(0.1, 0.5), na.rm=TRUE)
groupedDataFrame[5000:5009,side.height.norm..mm.]
groupedDataFrame[side.height.norm..mm.]
groupedDataFrame[,side.height.norm..mm.]
quantile(groupedDataFrame[,side.height.norm..mm.], probs=c(0.1, 0.5), na.rm=TRUE)
quantile(groupedDataFrame[,.SD], probs=c(0.1, 0.5), na.rm=TRUE)
quantile(groupedDataFrame[,], probs=c(0.1, 0.5), na.rm=TRUE)
quantile(groupedDataFrame[], probs=c(0.1, 0.5), na.rm=TRUE)
quantile(groupedDataFrame, probs=c(0.1, 0.5), na.rm=TRUE)
quantile(groupedDataFrame, probs=c(0.1), na.rm=TRUE)
groupedDataFrame[,list(q=quantile(side.height.norm..mm., probs=c(0.1,1), na.rm=TRUE)), by=groupBy]
?quantile()
quantile(x <- rnorm(1001))
x
p <- ggplot(x) + geom_boxplot()
p <- ggplot(x) + geom_boxplot(lower=)
test <- quantile(x <- rnorm(1001))
test
test$0%%
test["0%"]
p <- ggplot(x) + geom_boxplot(lower=test["25%"], upper=test["75%"],middle=median(x),ymin=min(x), ymax=max(x))
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot() 
p
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot() 
mtcars
head(mtcars)
head(overallList$iniDataSet)
groupedDataFrame[,list(q=quantile(test, probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile(side.height.norm..mm., probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile("side.height.norm..mm.", probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile(side.height.norm..mm., probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile(eval(test), probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile(.test, probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile(J(test), probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy]
groupedDataFrame[,list(q=quantile(J(test), probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy, with=FALSE]
groupedDataFrame[,list(q=quantile(J(test), probs=c(0,0.25,0.5,0.75,1), na.rm=TRUE)), by=groupBy, with=FALSE]
length(myQuantile)
length(myQuantile[1,])
length(myQuantile[,1])
length(myQuantile[,1])
length(myQuantile[,1])
length(myQuantile[1,])
length(myQuantile[,1])
?seq
colnames(groupedDataFrameMean)
colnames(groupedDataFrameMean)
test <- as.data.frame(groupedDataFrame[,lapply(.SD, mean, na.rm=TRUE), by=c(groupBy,overallList$xAxis)])
colnames(test)
colnames(groupedDataFrameMean[groupBy])
colnames(groupedDataFrameMean)
length(overallList$iniDataSet[,1])
colnames(groupedDataFrameMean)
colnames(groupedDataFrameMean)
class(groupedDataFrameMean)
groupedDataFrame <- groupedDataFrameMean
colnames(overallList$overallResult)
colnames(overallList$overallResult)
overallList$diagramTyp
?file.exist
?file.exists
p
overallList$descriptor
head(overallList$iniDataSet)
head(overallList$overallResult)
?setkey
help("datatable")
help("data.table")
groupedDataFrame[[groupBy]]
groupedDataFrame[,groupBy, with=FALSE]
?setkey
head(groupedDataFrame)
tables()
head(groupedDataFrameMean)
tail(groupedDataFrameMean)
?seq
head(groupedDataFrameMean)
tail(groupedDataFrameMean)
head( merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = c(groupBy, colOfXaxis)))
tail( merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = c(groupBy, colOfXaxis)))
index <- 1
head(overallList$overallResult[,1:2])
imagesIndex <- 1
tail(workingDataSet)
tail(workingDataSet)
tail(overallList$overallResult)
##------ 02.02.2012 07:34:02 ------##
tail(workingDataSet)
tail(standardDataFrame)
imagesIndex <- 1
tail(workingDataSet)
tail(workingDataSet)
overallList[1]
tail(overallList[1])
tolower(overallList$diagramTyp)[1]
saveNameVector <- c("side.area.norm (mm^2)", "side.height.norm (mm)")
nchar(saveNameVector)> 70
temp <- saveNameVector
saveNameVector <- c("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbb", "fff$aaaa")
saveNameVector <- temp
descriptorVector <- c("side.area.norm (mm^2)", "side.height.norm (mm)")
value <- descriptorVector
quit = TRUE
isColValue = TRUE
test <- c("sdadasdas$sdfsa$sdasd", "dfsadfasdasd_ss")
unlist(strsplit(test, "$", fixed=TRUE))
(strsplit(test, "$", fixed=TRUE))
test2 <- (strsplit(test, "$", fixed=TRUE))
gsub(regExpressionCol,replaceString,test2)
as.list(gsub(regExpressionCol,replaceString,test2))
test2 <- (strsplit(as.list(test), "$", fixed=TRUE))
test2 <- (strsplit(test, "$", fixed=TRUE))
test2
as.list(test2)
as.list(test2[[1])
as.list(test2[[1]])
?strplit
?strsplit
test2[1]
test2[1][1]
test2[[1]][1]
test2[,]
test2[,1]
test2[]
as.list(test2[])
as.matrix(test2[])
as.matrix(test2)
as.data.frame(test2)
test2
test2[[1]]
test2[[1]][1]
gsub(regExpressionCol,replaceString,test2)
?substring2
?substring2
substring2(test2, regExpressionCol) <- "."
test2
test
test <- c(test, "sss fff kkk")
test2 <- strsplit(test, "$", fixed=TRUE)
test2
substring2(test2, regExpressionCol) <- "."
test2
substring2(test2[[3]], regExpressionCol) <- "."
test2
substring2(test2[[3]][1], regExpressionCol) <- "."
test2
gsub(regExpressionCol,replaceString,test2)
?gsub
grep(regExpressionCol,replaceString,test2)
grepl(regExpressionCol,replaceString,test2)
sub(regExpressionCol,replaceString,test2)
gsub(regExpressionCol,replaceString,test2)
test2
gsub(regExpressionCol,replaceString,test2[[1]][1])
gsub(regExpressionCol,replaceString,test2[[2]][1])
gsub(regExpressionCol,replaceString,test2[[3]][1])
length(test2)
gsub(regExpressionCol,replaceString,test2[[1]])
test <- c("sdadas das$sd;;fsa$sd asd", "dfsadfas/dasd_ss", "aa ff hh$hallo")
test2 <- strsplit(test, "$", fixed=TRUE)
test2
gsub(regExpressionCol,replaceString,test2[[1]])
value <- c("hallo")
value[[1]]
descriptorVector
iniDataSet <- overallList$iniDataSet
test <- "side.height.norm..mm."
test %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet
colnames(iniDataSet)
descriptorVector <- overallList$nBoxDes
iniDataSet <- overallList$iniDataSet
test <- overallList$xAxis
isColValue=TRUE
value <- test
)
head(overallList$iniDataSet[overallList$xAxis])
overallList$nBoxDes
overallList$appendix
overallList$nBoxDes
overallList$nBoxDesName
overallList$nBoxDes
overallList$nBoxDes
descriptorVector <- overallList$nBoxDes
iniDataSet <- overallList$iniDataSet
?find
?match
'a' %in% 'ab'
n <- 1
##------ 03.02.2012 07:04:25 ------##
descriptorVector <- overallList$boxStackDes
iniDataSet["side.fluo.normalized.histogram.bin.1.0_25"]
iniDataSet <- overallList$iniDataSet
descriptor <- descriptorVector
head(descriptor)
descriptor[descriptor %checkIfDescriptorExists% dataSet]
dataSet <- iniDataSet
descriptor[descriptor %checkIfDescriptorExists% dataSet]
n <-1
overallList$nBoxDesName
n <- 1
descriptorVector <- overallList$boxStackDes[n]
iniDataSet <-  overallList$iniDataSet
colnames(iniDataSet)
descriptorVector
iniDataSet["side.fluo.normalized.histogram.bin.1.0_25"]
"side.fluo.normalized.histogram.bin.1.0_25" %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
descriptorVector[1] %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
descriptorVector[[1]][1] %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
descriptorVector[[1]][2] %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
unlist(descriptor)
unlist(descriptorVector)
unlist(descriptorVector) %GetDescriptorAfterCheckIfDescriptorNotExists% iniDataSet 
descriptorVector <- overallList$boxStackDes[n]
temp <- 
preprocessingOfDescriptor(overallList$boxStackDes[n], overallList$iniDataSet)
temp
as.list(temp)
as.matrix(temp)
as.data.frame(temp)
class(temp)
as.vector(temp)
as.list(as.vector(temp))
as.vector(as.list(as.vector(temp)))
as.matrix(as.list(as.vector(temp)))
as.matrix(temp)))
as.matrix(temp)
as.matrix(temp)[,1]
test[[1]] <- as.matrix(temp)[,1]
test[[1]] <-overallList$boxStackDes[[n]]
test <-overallList$boxStackDes[[n]]
test
test[[1]] <-overallList$boxStackDes[[n]]
test
test[[1]] <- temp
test[[1]] <- temp[,1]
temp
test[[1]] <- as.matrix(temp)[,1]
test[[1]] <- NULL
test[[1]]
test[[1]] <- ""
test
test[1] <- ""
test[1] <- temp
test[1] <- temp
temp
test
test <- as.data.frame(temp)
test
test[1]
test[2]
test <- overallList$boxStackDes[[n]]
test
test[[1]] <- as.data.frame(temp)
test
test[[1]]$temp
test <- overallList$boxStackDes[[n]]
test[1] <- as.data.frame(temp)
test
test[2] <- as.data.frame(temp[1:2])
test
descriptorVector <- overallList$nBoxDes[n]
iniDataSet <- overallList$iniDataSet
value <- descriptorVector
isColValue <- TRUE
descriptorVector <- overallList$boxStackDes[n]
value <- descriptorVector
length(strsplit(value, "$", fixed=TRUE))
as.data.frame(strsplit(value, "$", fixed=TRUE))
temp <- as.data.frame(strsplit(value, "$", fixed=TRUE))
gsub(regExpressionCol,replaceString,temp)
gsub(regExpressionCol,replaceString,temp)
gsub(regExpressionCol,replaceString,temp[,1])
class(gsub(regExpressionCol,replaceString,temp[,1]))
descriptorVector <- overallList$boxStackDes[n]
descriptorVector
iniDataSet <- overallList$iniDataSet
class(overallList$boxStackDes[n])
class(preprocessingOfDescriptor(overallList$boxStackDes[n], overallList$iniDataSet))
class(preprocessingOfDescriptor(overallList$boxStackDes[n], overallList$iniDataSet))
n <- 1
overallList$nBoxDes[2]
overallList$nBoxDes[1]
class(overallList$nBoxDes)
class(overallList$nBoxDes[1])
descriptorVector <- overallList$nBoxDes[n]
iniDataSet <- overallList$iniDataSet
value <- descriptorVector
isColValue = TRUE
value <- overallList$nBoxDes[[n]]
n <- 1
overallList$nBoxDes[1]
overallList$nBoxDes[1] <- data.frame(1)
class(overallList$nBoxDes[1])
class(overallList$nBoxDes[2])
n <- 1
e <- preprocessingOfDescriptor(overallList$nBoxDes[n], overallList$iniDataSet)
r <- preprocessingOfDescriptor(overallList$nBoxDes[2], overallList$iniDataSet)
e
r
temp <- overallList$nBoxDes
class(temp[1])
class(temp[1])
n
n <- 1
overallList$nBoxDes[2]
descriptorVector <- overallList$nBoxDes[[n]]
iniDataSet <- overallList$iniDataSet
as.vector(descriptorVector)
unlist(check(overallList$nBoxDes))[1]
unlist(check(overallList$nBoxDes))[2]
unlist(overallList$boxStackDes)
class(overallList$boxStackDes)
class(overallList$boxStackDes[1])
unlist(overallList$boxStackDes[1])
unlist(overallList$boxStackDes[[1]])
as.vector(overallList$boxStackDes)
unlist(as.vector(overallList$boxStackDes))
overallList$boxStackDes
unlist(overallList$boxStackDes)
class(overallList$boxStackDes)
class(overallList$boxStackDes[[1]])
length(overallList$boxStackDes)
getVector(overallList$boxStackDes)
getVector(overallList$boxStackDes)
getVector(overallList$boxStackDes)
(overallList$boxStackDes)
(overallList$boxStackDes[[1]])
unlist(overallList$boxStackDes[[1]])
as.vector(unlist(overallList$boxStackDes[[1]]))
as.vector((overallList$boxStackDes[[1]]))
getVector(overallList$boxStackDes)
getVector(overallList$boxStackDes)
colnames(overallList$iniDataSet)
head(overallList$iniDataSet)
tail(overallList$iniDataSet)
?duplicated()
duplicated(c(check(getVector(overallList$nBoxDes)), check(getVector(overallList$boxDes)), check(getVector(overallList$boxStackDes)), check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment)))
unique(c(check(getVector(overallList$nBoxDes)), check(getVector(overallList$boxDes)), check(getVector(overallList$boxStackDes)), check(overallList$xAxis), check(overallList$treatment), check(overallList$secondTreatment)))
##------ 03.02.2012 11:50:14 ------##
tail(overallList$iniDataSet)
n <- 1
overallList$boxStackDes[[n]]
as.vector(overallList$boxStackDes[[n]])
as.vector(overallList$boxStackDes[n])
as.vector(overallList$boxStackDes[[n]])
unlist(overallList$boxStackDes[[n]])
as.vector(unlist(overallList$boxStackDes[[n]]))
##------ 06.02.2012 08:01:14 ------##
tail(groupedDataFrameMean)
head(groupedDataFrameMean)
head(groupedDataFrameMean)
head(groupedDataFrame)
}
overallList$boxDesName
as.vector(unlist(overallList$boxStackDes))
colnames(groupedDataFrameMean)
head(groupedDataFrameMean)
head(groupedDataFrameSD)
head(groupedDataFrameSD)
head(groupedDataFrameSD)
head(groupedDataFrameMean)
head(iniDataSet)
head(merge(sort=FALSE, groupedDataFrameMean[booleanVector,], groupedDataFrameSD[booleanVector,], by = c(groupBy, colNames$colOfXaxis)))
head(buildRowName(iniDataSet,groupBy, overallList$yAxisName))
head(buildRowName(iniDataSet,groupBy, overallList$yAxisName))
head(buildRowName(iniDataSet,groupBy, descriptorName))
head(overallList$overallResult_boxDes)
head(overallList$overallResult_nBoxDes)
head( getResultDataFrame("nboxplot", getVector(overallList$nBoxDes), overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$nboxDesName, overallList$debug))
head(overallList$overallResult_nBoxDes)
head(getResultDataFrame("nboxplot", getVector(overallList$nBoxDes), overallList$iniDataSet[columns], groupBy, colNames, booleanVectorList, overallList$nboxDesName, overallList$debug))
head(overallList$overallResult_nBoxDes)
head(overallList$overallResult_nBoxDes)
head(overallList$overallResult_boxDes)
head(overallList$overallResult_nBoxDes)
head(groupedDataFrameMean)
listOfValues <- booleanVectorList
groupedDataFrame <- groupedDataFrameMean
h <- Treatment
h <- "Treatment"
h <- xAxis
h
h <- "xAxis"
head(buildRowName(iniDataSet, groupBy, descriptorName))
colNameWichMustBind <- name
colNameWichMustBind <- "name"
colnames(buildRowNameDataSet)
head(temp)
overallList$boxStackDes
overallList$boxStackDes
overallList$boxStackDes
overallList$boxStackDes
?list
overallList$boxStackDes[[1]]
names(overallList$boxStackDes[[1]])
names(overallList$boxStackDes[[1]]) <- 1
names(overallList$boxStackDes[[1]])
overallList$boxStackDes
overallList$boxDes
head(overallResult)
names(overallList$boxStackDes)
names(overallList$boxStackDes) <- c(1,2)
names(overallList$boxStackDes)
overallList$boxStackDes
names(overallList$boxStackDes[[]])
names(overallList$boxStackDes[[1]])
names(overallList$boxStackDes) <- c(4,5)
names(overallList$boxStackDes[[1]])
overallList$boxStackDes
names(overallList$boxStackDes)
names(overallList$boxStackDes)
head(overallResult)
names(descriptorList)

n <- 1
n <- 2
"side.nir.normalized.histogram.bin.10.229_255" %in% descriptorList[[2]]
"side.nir.normalized.histogram.bin.10.229_255" %in% as.vector(descriptorList[[2]])
"side.nir.normalized.histogram.bin.10.229_255" %in% as.vector(unlist(descriptorList[[2]]))
as.vector(unlist(descriptorList[[2]]))
head(overallResult)
tail(overallResult)
?colorRampPalette
?rgb
descriptorList <- overallList$nBoxDes
length(overallList$boxStackDes)
n <- "1"
isGrey <- FALSE
n <- "2"
colorList$`1`
colorList[1]
colorList[[1]]
charmatch("fluo", "hallo")
charmatch("fluo", "hfluoallo")
charmatch("fluo", "fluo")
pmatch("fluo", "fluo")
pmatch("fluo", "hfluoallo")
sub("fluo","","hallo")
sub("fluo","","fluohallo")
grep("fluo","","fluohallo")
?grep("fluo","","fluohallo")
?grep("fluo","fluohallo")
grep("fluo","fluohallo")
grep("fluo","fluohallo", ignore=T)
grep("fluo","hallo", ignore=T)
grep("fluo","halfluolo", ignore=T)
grep("fluo","halFLUOlo", ignore=T)
grep("fluo","halFLUOlo")
n <- "1"
descriptorList <- overallList$boxStackDes
diagramTyp <- "boxplotStacked"
)
?grepl
grep("fluo",getVector(descriptorList[2]), ignore.case=TRUE, value=TRUE)
grep("fluo",getVector(descriptorList[1]), ignore.case=TRUE, value=TRUE)
grep("fluo",getVector(descriptorList[1]), ignore.case=TRUE)
length(grep("fluo",getVector(descriptorList[1]), ignore.case=TRUE))
length(grep("fluo",getVector(descriptorList[2]), ignore.case=TRUE))
##------ 07.02.2012 07:11:30 ------##
?rgb
rgb(0, 0:12, 0, max = 255)
rgb( ramp(seq(0, 1, length = 5)), max = 255)
rgb(255, seq(13:255,by=25), 255, max = 255)
seq(13:255,by=25)
?seq(13:255,by=25)
?seq(13,255,by=25)
seq(13,255,by=25)
rgb(255, seq(13,255,by=25), 255, max = 255)
?rgb(255, seq(13,255,by=25), 255, max = 255)
rgb(255, seq(12,255,by=25), 255, max = 255)
seq(12,255,by=25)
as.list(rgb(255, seq(12,255,by=25), 255, max = 255))
?invert
?rgb
hsv(h=seq(0.05,0.95, by=0.1), s=1, v=1)
seq(0.05,0.95, by=0.1)
seq(0,255,by=255/10)
seq(256/10/2,255,by=255/10)
grep("grey",colors())
?rgb
rgb(0,1,0)
rgb(0,255,0)
rgb(0,255,0, maxColorValue = 255)
n <- 1
n <- "1"
temp <- colorList
temp[[n]] <- setColorListHist(descriptorList[n])
temp
temp$`1`
temp$`1`$1
temp$`1`[1]
temp[n] <- setColorListHist(descriptorList[n])
overallList$color_boxColor
overallList$color_boxStack
head(overallList$overallResult_boxDes)
head(overallList$overallResult_nBoxDes)
h <- 1
length(overallResult)
head(overallResult)
overallList$nBoxDes
length(overallList$nBoxDes)
head(overallResult)
)
levels(overallResult$name)["normal bewaessert"]
levels(overallResult$name)[["normal bewaessert"]]
levels(overallResult$name)[[1]]
class(index)
unlist(levels(overallResult$name))[[1]]
index <- 1
imagesIndex <- names(overallDescriptor)[1]
imagesIndex
head(overallResult)
tail(overallResult)
index <- levels(overallResult$name)[1]
index
overallList$xAxisName
overallDesName[imagesIndex]
overallList$nBoxDesName[1]
imagesIndex <- "1"
head(overallResult)
print(plot)
head(overallResult)
overallDesName[[imagesIndex]]
n <- "1"
h <- 1
imagesIndex <- "1"
head(overallResult)
h <- 1
imagesIndex <- '1'
head()
head(overallResult)
head(overallResult)
overallList$SaveName_boxDes
head(overallResult)
head(!is.na(overallResult$mean))
head(is.na(overallResult$mean))
head((overallResult$mean))
head((overallResult$value))
head(overallResult))
head(overallResult)
head(overallResult)
head(overallResult)
head(tempOverallResult)
tempOverallResult$plot
h <- 2
h <- 1
h <- 1
imagesIndex <- "1"
imagesIndex <- "1"
makeOverallImage = TRUE
, legende=TRUE
legende=TRUE
minor_breaks=FALSE
head(overallResult)
unique(overallResult$name)
unique(overallResult$hist)
overallColor[["1"]]
factor(overallResult$hist)
mappingList["0..25"]
mappingList[["0..25"]]
)
mappingList
names(mappingList) <- "0..25"
mappingList
list(1:10)
list(1,2,3)
?list()
?list
mappingList[["0..25"]]
mappingList["0..25"]
mappingList[["0..25"]]
h <- 2
imagesIndex <- "1"
makeOverallImage = FALSE
 legende=TRUE
 minor_breaks=TRUE
overallColorIndex <- overallColor[[imagesIndex]]
)
h <- 2
imagesIndex <- "1"
title = ""; makeOverallImage = FALSE, legende=TRUE, minor_breaks=TRUE
title = ""; makeOverallImage = FALSE; legende=TRUE; minor_breaks=TRUE
imagesIndex <- "2"
overallColorIndex <- overallColor[[imagesIndex]]
head(overallResult)
overallResult$hist
overallResult
unique(overallResult$hist)
overallResult$hist["127..153"]
unique(overallResult$hist)
overallResult
overallResult[1000:1100]
overallResult[1000:1100,]
overallResult
overallResult[1000:1010,]
overallResult
unique(overallResult$hist)
?unique()
factor(overallResult$hist)
unique(overallResult$hist)
overallResult$hist
##------ 08.02.2012 06:46:17 ------##
head(overallList$overallResult_boxStackDes)
h <- 2
head(overallResult)
unique(overallResult)
unique(overallResult$hist)
imagesIndex <- "1"
unique(overallResult$hist)
overallResult
overallResult$hist
imagesIndex <- "2"
overallResult$hist
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar()
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="identity", position = "fill")
unique(overallList$his)
unique(overallList$hist)
unique(overallResult$hist
)
unique(overallResult$hist)[1]
test <- overallResult
?factor
ordered(test)
ordered(test$hist)
test2 <- test
test2 <- factor(test2, unique(test2))
test2
test2 <- test
test2 <- factor(test2, unique(test2$hist))
test2
test2 <- test
test2 <- factor(test2$hist, unique(test2$hist))
test2
test2 <- test
test2$hist <- factor(test2$hist, unique(test2$hist))
test2
test2$hist
DEBUG <- TRUE
debug <- TRUE
k <- "treatment"
as.vector(descriptorVector)
descriptorVector=descriptorVector;iniDataSet= workingDataSet; isDescriptor=FALSE
colnames(iniDataSet)
unlist(descriptorSet)
unlist(descriptorVector)
getVector(descriptorVector)
test <- listOfTreat[[k]] 
test <- listOfTreat
test[[k]] <- descriptorVector
test
test[[k]]
?library()
?require()
overallList$boxDes
overallList$boxDes
overallList$boxDesName
overallList$boxDesName
overallList$boxDes
overallList$boxDes
overallList$nBoxDes[1]
overallList$nBoxDes[[1]]
descriptorVector <- overallList$nBoxDes[[1]]
iniDataSet <- overallList$iniDataSet
n <- 1
test<- overallList$nBoxDes
test[n] <- preprocessingOfDescriptor(overallList$nBoxDes[[n]], overallList$iniDataSet)
test
overallList$boxDes
overallList$nBoxDes
overallList$nBoxDes
n <- 1
?hsv
?seq
overallList$nBoxDes
overallList$nBoxDes
overallList$nBoxDes
overallList$nBoxDes
n <- 1
descriptorVector <- overallList$nBoxDes[[n]]
iniDataSet <- overallList$iniDataSet
)
is.null(overallList$nBoxDes[[n]])
overallList$nBoxDes[[n]] <- NULL
is.null(overallList$nBoxDes[[n]])
overallList$nBoxDes[[n]]
overallList$nBoxDes
overallList$nBoxDes[[n]] <- NA
overallList$nBoxDes[[n]]
overallList$nBoxDes
is.na(overallList$nBoxDes)
is.null(overallList$nBoxDes)
is.nan(overallList$nBoxDes)
overallList$nBoxDes[n] <- NA
is.nan(overallList$nBoxDes)
is.na(overallList$nBoxDes)
is.na(temp)
temp
is.na(temp)
overallList$stoppTheCalculation
isTRUE(is.na(overallList$nBoxDes))
isTRUE(c(T,T,F))
isTRUE(c(T,T,T))
isTRUE(c(TRUE,TRUE,TRUE))
isTRUE(TRUE)
sum(is.na(overallList$nBoxDes))
sum(is.na(overallList$nBoxDes))
is.na(overallList$nBoxDes)
sum(!is.na(overallList$nBoxDes))
sum(!is.na(overallList$boxDes)) 
overallList$boxDes
overallList$nBoxDes
n <- 1
value <- getVector(overallList$nBoxDes)
colnames(overallList)
colnames(overallList$iniDataSet)
 overallList$nboxDesName
 overallList$nBoxDesName
diagramTyp="nboxplot"; descriptorList=overallList$nBoxDes; iniDataSet=overallList$iniDataSet[columns]; groupBy=groupBy; colNames=colNames; booleanVectorList=booleanVectorList; descriptorName=overallList$nBoxDesName; debug=overallList$debug
is.na(descriptor)
descriptor[!is.na(descriptor)]
colnames(groupedDataFrameMean)
listOfValues <- booleanVectorList
colnames(iniDataSet)
overallResult <- overallList$nBoxDes
overallList$overallResult
imagesIndex <- "1"
overallList$overallResult_boxStackDes
overallList$boxStackDes
n <- 1
n <- 3
descriptorVector <- overallList$boxStackDes[[n]]
iniDataSet <- overallList$iniDataSet
n <- 2
descriptorVector <- overallList$boxStackDes[[n]]
iniDataSet <- overallList$iniDataSet
descriptorVector <- overallList$nBoxDes[[n]]
colnames(iniDataSet)
)
n <- 3
overallDescriptor <- overallList$nBoxDes
overallResult <- overallList$overallResult_nBoxDes
overallDescriptor <- overallList$nBoxDes
overallColor <- overallList$color_nBox
overallDesName <- overallList$nBoxDesName
imagesIndex <- "2"
colnames(tempOverallResult)
overallList$overallResult_nBoxDes
colnames(overallList$overallResult_nBoxDes)
h <- 2
?seq
h <- 1
head(overallResult)
imagesIndex <- "1"
head(overallResult)
unique(tempOverallResult$plot)
makeOverallImage = TRUE; legende=TRUE; minor_breaks=FALSE
h <- 1
h <- 1
imagesIndex <- "1"
makeOverallImage = TRUE; legende=TRUE; minor_breaks=FALSE
imagesIndex <- "2"
head(overallResult)
overallResult
imagesIndex <- "3"
imagesIndex <- "1"
overallList$nBoxDes[[imagesIndex]]
overallList$nBoxDes[[imagesIndex]][1]
overallList$boxDes[[imagesIndex]][1]
overallList$boxStackDes[[imagesIndex]][1]
getVector(overallList$boxDes[[imagesIndex]])
overallList$saveName_boxStackDes
iniDataSet
iniDataSet[15394, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15130, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15129, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15100:15150, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15300:15400, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15394, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15395, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[1533, "side.nir.normalized.histogram.bin.2.25_51"]
iniDataSet[15393, "side.nir.normalized.histogram.bin.2.25_51"]
overallList$treatment
overallList$secondTreatment
colnames(overallList$iniDataSet)
overallList$overallResult_boxDes
head(overallList$overallResult_boxDes)
head(overallList$overallResult_boxStackDes)
unique(overallList$overallResult_boxStackDes)
unique(overallList$overallResult_boxStackDes$plot)
##------ 09.02.2012 06:56:00 ------##
head(overallList$overallResult_nBoxDes)
unique(overallList$overallResult_nBoxDes$name)
unique(overallList$overallResult_boxDes$name)
unique(overallList$overallResult_boxStackDes$name)
h <- 2
imagesIndex <- "1"
plot <- null
plot <- NULL
head(overallResult)
tail(overallResult)
?scale_manual
overallResult$xAxis
head(overallResult)
head(tempOverallResult)
head(overallResult)
head(overallResult)
head(overallResult)
value <- overallList$filterSecondTreatment
value <- overallList$filterSecondTreatment[1]
value
head(plotThisValues)
makeOverallImage = TRUE;  legende=TRUE; minor_breaks=FALSE
?geom_bar
test <- NULL
length(test)
test <- c("hallo")
length(test)
test <- c("hallo", "duda")
h <- 2
head(tempOverallResult)
imagesIndex <- "1"
head(tempOverallResult)
colnames(overallList$overallResult_boxDes)
colnames(overallList$overallResult_boxDes)
colnames(overallResult)
imagesIndex <- "2"
head(overallResult)
tail(overallResult)
overallResult[2140:2150,]
diagramTyp="boxplotStacked"; descriptorList =overallList$boxStackDes; iniDataSet=overallList$iniDataSet[columns]; debug=overallList$debug
head(iniDataSet)
colNameWichMustBind <- buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")[1]
buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")[1]
(buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment"))[1]
colNameWichMustBind <- (buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment")[1])
colNameWichMustBind <- (buildRowNameDataSet %allColnamesWithoutThisOnes% c(colNames$xAxis, colNames$colName, "primaerTreatment"))[1]
colNameWichMustBind <- "side.nir.normalized.histogram.bin.3.51_76.1"
imagesIndex <- "4"
head(overallResult)
tail(overallResult)
]
h <-1
head(overallResult)
head(tempOverallResult)
sum(c(F,F))
tail(overallResult)
colnames(overallResult)
h <- 1
imagesIndex <- "4"
colnames(overallResult)
colnames(overallResult)
imagesIndex <- "1"
##------ 10.02.2012 06:45:03 ------##
?substring("Hallo_Du")
overallList$iniDataSet$'Plant.ID'[1,]
overallList$iniDataSet$'Plant.ID'[1]
overallList$iniDataSet$'Plant.ID'
substring("Hallo",1,length("Hallo"))
substring("Hallo",1,length("Hallo")) <- "a"
?gsub()
requestList$KN$barley
requestList["KN"]["barley"]
requestList["KN"]
requestList[["KN"]]
requestList[["KN"]]["barley"]
requestList[["KN"]][["barley"]]
requestList$'KN'$'barley'
overallList$iniDataSet["Species"]
requestList$BA$barley$nBoxplot$doannyThingOther
listOfExtraOptions
overallList$nBoxOptions
overallList$boxOptions
overallList$boxOptions
option <- names(listOfExtraOptions$boxplot)[1]
option
overallList$boxOptions[[option]]
option <- "test"
test <- 
overallList$boxOptions
test[[option]]
test[[option]] c("Hallo")
test[[option]] <- c("Hallo")
test
names(listOfExtraOptions[["boxplot"]])
typOfPlot <- "boxplot"
n <- "10"
h <- 2
imagesIndex <- "1"
head(overallResult)
h <- 1
imagesIndex <- "4"
imagesIndex <- "1"
h <- 1
imagesIndex <- "13"
tail(overallResult)
makeOverallImage = TRUE; legende=TRUE; minor_breaks=FALSE
h <- 1
imagesIndex <- "1"
head(overallResult)
overallResult$xAxis
unique(overallResult$xAxis)
?round
round(2.1)
round(2.9)
floor(2.1)
floor(2.9)
median(uniqueDays)
uniqueDays[44]
test <- c(13,14,15)
median(test)
test == 14
uniqueDays[1:10]
mean(uniqueDays)
head(overallResult)
overallResult[1000:1100]
overallResult[1000:1100,]
?facet_wrap
overallResult$xAxis
test$xAxisfactor <- factor(test$xAxis, levels=whichDayShouldBePlot)
test$xAxisfactor
head(tempOverallResult)
head(overallResult)
?facet_wrap
paste("DAS", overallResult$xAxisfactor) == "DAS NA"
(paste("DAS", overallResult$xAxisfactor) == "DAS NA") <- NA
xAxisValue <- overallResult$xAxis
h <- 1
imagesIndex <- "1"
!is.null(options$daysOfBoxplotNeedsR)
!is.na(options$daysOfBoxplotNeedsR)
options$daysOfBoxplotNeedsR
options$daysOfBoxp
!is.null(options$daysOfBoxpl)
changes <- options$daysOfBoxplotNeedsReplace
unique(setxAxisfactor(overallResult$xAxis, options))
xAxisValue <- overallResult$xAxis
options <- options
changes <- options$daysOfBoxplotNeedsReplace
xAxis <- xAxisValue
)
##------ 15.02.2012 09:12:22 ------##
h <- 1
imagesIndex <- '1'
imagesIndex <- "7"
colnames(overallResult)
overallResult[xAxis='DAS 20']
overallResult[1:10;]
overallResult[1:10,]
overallResult[xAxisfactor=='DAS 20']
overallResult[,xAxisfactor=='DAS 20']
overallResult[100:120,]
overallResult
test <- overallResult
sum(!is.na(overallResult))
?apply()
apply(overallResult, 2, !is.na())
apply(overallResult, 2, !is.na)
apply(overallResult, 2, is.na)
apply(overallResult[is.na(overallResult)], 2)
apply(overallResult[!is.na(overallResult)], 2,)
apply(overallResult[!is.na(overallResult)], 2,mean)
apply(overallResult[!is.na(overallResult),], 2,mean)
apply(overallResult, 2, overallResult[!is.na(overallResult)])
apply(overallResult, 2, function(x) x[!is.na(overallResult)])
head(apply(overallResult, 2, function(x) x[!is.na(overallResult)]))
head(overallResult)
head(apply(overallResult, 1, function(x) x[!is.na(overallResult)]))
?na.omit
na.omit(overallResult)
overallResult
colnames(test)
test[xAxis=16]
test[test$xAxis==16,]
test[test$xAxis==16,"value7"]
xAxisValue <- overallResult$xAxis
xAxis <- xAxisValue
overallResult
length(uniqueDays)
##------ 15.02.2012 16:12:54 ------##
?ggsave
?ggsave
??ggsave
?ggplot2::ggsave
h <- 1
imagesIndex <- "1"
value <- dry 
value <- "dry"
makeOverallImage = TRUE;  legende=TRUE; minor_breaks=FALSE
)
positionTyp <- "dodge"
head(overallResult)
head(overallResult)
overallResult[,"xAxis"]
head(overallResult)
##------ 16.02.2012 07:18:55 ------##
imagesIndex <- "13"
value <- "dry"
makeOverallImage = TRUE;  legende=TRUE; minor_breaks=FALSE
positionTyp <- "dodge"
head(overallResult)
head(diamonds)
tail(diamonds)
head(overallResult)
print(plot)
head(overallResult)
head(overallResult)
head(overallResult)
overallResult[overallResult$hist=="0..25",values]
overallResult[overallResult$hist=="0..25","values"]
overallResult[overallResult$hist=="0..25",c("values","xAxis")]
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="identity", position = "fill")
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="identity", position = "dodge")
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="identity", position = "jitter")
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="density", position = positionTyp)
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="bin", position = positionTyp)
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="smooth", position = positionTyp)
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(position = positionTyp)
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="identity")
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_line(stat="identity")
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_bar(stat="identity")
ggplot(overallResult, aes(xAxis, values, fill=hist)) + geom_point()
ggplot(overallResult, aes(xAxis, values, colour=hist)) + geom_point()
overallResult[overallResult$hist=="0..25",c("values","xAxis")]
overallResult[overallResult$hist=="0..25" & overallResult$xAxis==35,c("values","xAxis")]
overallResult[overallResult$hist=="0..25" & overallResult$xAxis==35,]
)
head(plotThisValues)
overallResult <- plotThisValues
head(plotThisValues)
positionTyp <- "fill"
positionTyp<-"dodge"
?replace
replace(name, "%", "px")
replace("%",name, "px")
sub(name, "%", "px")
?sub(name, "%", "px")
?sub("%", "px", name)
sub("%", "px", name)
positionTyp<-"fill"
h <- 2
##------ 16.02.2012 14:15:17 ------##
imagesIndex <- "13"
makeOverallImage = TRUE; legende=TRUE; minor_breaks=FALSE
positionTyp <- fill
positionTyp <- "fill"
head(overallResult)
