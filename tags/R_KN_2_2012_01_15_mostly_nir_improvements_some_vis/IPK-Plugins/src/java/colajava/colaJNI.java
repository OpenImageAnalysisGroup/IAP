/*
 * ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * -----------------------------------------------------------------------------
 */

package colajava;

class colaJNI {
	public final static native long new_EdgeVector__SWIG_0();
	
	public final static native long new_EdgeVector__SWIG_1(long jarg1);
	
	public final static native long EdgeVector_size(long jarg1, EdgeVector jarg1_);
	
	public final static native long EdgeVector_capacity(long jarg1, EdgeVector jarg1_);
	
	public final static native void EdgeVector_reserve(long jarg1, EdgeVector jarg1_, long jarg2);
	
	public final static native boolean EdgeVector_isEmpty(long jarg1, EdgeVector jarg1_);
	
	public final static native void EdgeVector_clear(long jarg1, EdgeVector jarg1_);
	
	public final static native void EdgeVector_add(long jarg1, EdgeVector jarg1_, long jarg2, ColaEdge jarg2_);
	
	public final static native long EdgeVector_get(long jarg1, EdgeVector jarg1_, int jarg2);
	
	public final static native void EdgeVector_set(long jarg1, EdgeVector jarg1_, int jarg2, long jarg3, ColaEdge jarg3_);
	
	public final static native void delete_EdgeVector(long jarg1);
	
	public final static native long new_ColaEdge__SWIG_0();
	
	public final static native long new_ColaEdge__SWIG_1(long jarg1, long jarg2);
	
	public final static native long new_ColaEdge__SWIG_2(long jarg1, ColaEdge jarg1_);
	
	public final static native void ColaEdge_first_set(long jarg1, ColaEdge jarg1_, long jarg2);
	
	public final static native long ColaEdge_first_get(long jarg1, ColaEdge jarg1_);
	
	public final static native void ColaEdge_second_set(long jarg1, ColaEdge jarg1_, long jarg2);
	
	public final static native long ColaEdge_second_get(long jarg1, ColaEdge jarg1_);
	
	public final static native void delete_ColaEdge(long jarg1);
	
	public final static native long new_OffsetPair__SWIG_0();
	
	public final static native long new_OffsetPair__SWIG_1(long jarg1, double jarg2);
	
	public final static native long new_OffsetPair__SWIG_2(long jarg1, OffsetPair jarg1_);
	
	public final static native void OffsetPair_first_set(long jarg1, OffsetPair jarg1_, long jarg2);
	
	public final static native long OffsetPair_first_get(long jarg1, OffsetPair jarg1_);
	
	public final static native void OffsetPair_second_set(long jarg1, OffsetPair jarg1_, double jarg2);
	
	public final static native double OffsetPair_second_get(long jarg1, OffsetPair jarg1_);
	
	public final static native void delete_OffsetPair(long jarg1);
	
	public final static native long new_OffsetList__SWIG_0();
	
	public final static native long new_OffsetList__SWIG_1(long jarg1);
	
	public final static native long OffsetList_size(long jarg1, OffsetList jarg1_);
	
	public final static native long OffsetList_capacity(long jarg1, OffsetList jarg1_);
	
	public final static native void OffsetList_reserve(long jarg1, OffsetList jarg1_, long jarg2);
	
	public final static native boolean OffsetList_isEmpty(long jarg1, OffsetList jarg1_);
	
	public final static native void OffsetList_clear(long jarg1, OffsetList jarg1_);
	
	public final static native void OffsetList_add(long jarg1, OffsetList jarg1_, long jarg2, OffsetPair jarg2_);
	
	public final static native long OffsetList_get(long jarg1, OffsetList jarg1_, int jarg2);
	
	public final static native void OffsetList_set(long jarg1, OffsetList jarg1_, int jarg2, long jarg3, OffsetPair jarg3_);
	
	public final static native void delete_OffsetList(long jarg1);
	
	public final static native long new_RectPtrVector__SWIG_0();
	
	public final static native long new_RectPtrVector__SWIG_1(long jarg1);
	
	public final static native long RectPtrVector_size(long jarg1, RectPtrVector jarg1_);
	
	public final static native long RectPtrVector_capacity(long jarg1, RectPtrVector jarg1_);
	
	public final static native void RectPtrVector_reserve(long jarg1, RectPtrVector jarg1_, long jarg2);
	
	public final static native boolean RectPtrVector_isEmpty(long jarg1, RectPtrVector jarg1_);
	
	public final static native void RectPtrVector_clear(long jarg1, RectPtrVector jarg1_);
	
	public final static native void RectPtrVector_add(long jarg1, RectPtrVector jarg1_, long jarg2);
	
	public final static native long RectPtrVector_get(long jarg1, RectPtrVector jarg1_, int jarg2);
	
	public final static native void RectPtrVector_set(long jarg1, RectPtrVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_RectPtrVector(long jarg1);
	
	public final static native long new_CompoundConstraintsVector__SWIG_0();
	
	public final static native long new_CompoundConstraintsVector__SWIG_1(long jarg1);
	
	public final static native long CompoundConstraintsVector_size(long jarg1, CompoundConstraintsVector jarg1_);
	
	public final static native long CompoundConstraintsVector_capacity(long jarg1, CompoundConstraintsVector jarg1_);
	
	public final static native void CompoundConstraintsVector_reserve(long jarg1, CompoundConstraintsVector jarg1_, long jarg2);
	
	public final static native boolean CompoundConstraintsVector_isEmpty(long jarg1, CompoundConstraintsVector jarg1_);
	
	public final static native void CompoundConstraintsVector_clear(long jarg1, CompoundConstraintsVector jarg1_);
	
	public final static native void CompoundConstraintsVector_add(long jarg1, CompoundConstraintsVector jarg1_, long jarg2);
	
	public final static native long CompoundConstraintsVector_get(long jarg1, CompoundConstraintsVector jarg1_, int jarg2);
	
	public final static native void CompoundConstraintsVector_set(long jarg1, CompoundConstraintsVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_CompoundConstraintsVector(long jarg1);
	
	public final static native long new_ColaLocks__SWIG_0();
	
	public final static native long new_ColaLocks__SWIG_1(long jarg1);
	
	public final static native long ColaLocks_size(long jarg1, ColaLocks jarg1_);
	
	public final static native long ColaLocks_capacity(long jarg1, ColaLocks jarg1_);
	
	public final static native void ColaLocks_reserve(long jarg1, ColaLocks jarg1_, long jarg2);
	
	public final static native boolean ColaLocks_isEmpty(long jarg1, ColaLocks jarg1_);
	
	public final static native void ColaLocks_clear(long jarg1, ColaLocks jarg1_);
	
	public final static native void ColaLocks_add(long jarg1, ColaLocks jarg1_, long jarg2, Lock jarg2_);
	
	public final static native long ColaLocks_get(long jarg1, ColaLocks jarg1_, int jarg2);
	
	public final static native void ColaLocks_set(long jarg1, ColaLocks jarg1_, int jarg2, long jarg3, Lock jarg3_);
	
	public final static native void delete_ColaLocks(long jarg1);
	
	public final static native long new_ColaResizes__SWIG_0();
	
	public final static native long new_ColaResizes__SWIG_1(long jarg1);
	
	public final static native long ColaResizes_size(long jarg1, ColaResizes jarg1_);
	
	public final static native long ColaResizes_capacity(long jarg1, ColaResizes jarg1_);
	
	public final static native void ColaResizes_reserve(long jarg1, ColaResizes jarg1_, long jarg2);
	
	public final static native boolean ColaResizes_isEmpty(long jarg1, ColaResizes jarg1_);
	
	public final static native void ColaResizes_clear(long jarg1, ColaResizes jarg1_);
	
	public final static native void ColaResizes_add(long jarg1, ColaResizes jarg1_, long jarg2, Resize jarg2_);
	
	public final static native long ColaResizes_get(long jarg1, ColaResizes jarg1_, int jarg2);
	
	public final static native void ColaResizes_set(long jarg1, ColaResizes jarg1_, int jarg2, long jarg3, Resize jarg3_);
	
	public final static native void delete_ColaResizes(long jarg1);
	
	public final static native long new_ColaDesiredPositions__SWIG_0();
	
	public final static native long new_ColaDesiredPositions__SWIG_1(long jarg1);
	
	public final static native long ColaDesiredPositions_size(long jarg1, ColaDesiredPositions jarg1_);
	
	public final static native long ColaDesiredPositions_capacity(long jarg1, ColaDesiredPositions jarg1_);
	
	public final static native void ColaDesiredPositions_reserve(long jarg1, ColaDesiredPositions jarg1_, long jarg2);
	
	public final static native boolean ColaDesiredPositions_isEmpty(long jarg1, ColaDesiredPositions jarg1_);
	
	public final static native void ColaDesiredPositions_clear(long jarg1, ColaDesiredPositions jarg1_);
	
	public final static native void ColaDesiredPositions_add(long jarg1, ColaDesiredPositions jarg1_, long jarg2, DesiredPosition jarg2_);
	
	public final static native long ColaDesiredPositions_get(long jarg1, ColaDesiredPositions jarg1_, int jarg2);
	
	public final static native void ColaDesiredPositions_set(long jarg1, ColaDesiredPositions jarg1_, int jarg2, long jarg3, DesiredPosition jarg3_);
	
	public final static native void delete_ColaDesiredPositions(long jarg1);
	
	public final static native long new_TopologyEdgePointPtrVector__SWIG_0();
	
	public final static native long new_TopologyEdgePointPtrVector__SWIG_1(long jarg1);
	
	public final static native long TopologyEdgePointPtrVector_size(long jarg1, TopologyEdgePointPtrVector jarg1_);
	
	public final static native long TopologyEdgePointPtrVector_capacity(long jarg1, TopologyEdgePointPtrVector jarg1_);
	
	public final static native void TopologyEdgePointPtrVector_reserve(long jarg1, TopologyEdgePointPtrVector jarg1_, long jarg2);
	
	public final static native boolean TopologyEdgePointPtrVector_isEmpty(long jarg1, TopologyEdgePointPtrVector jarg1_);
	
	public final static native void TopologyEdgePointPtrVector_clear(long jarg1, TopologyEdgePointPtrVector jarg1_);
	
	public final static native void TopologyEdgePointPtrVector_add(long jarg1, TopologyEdgePointPtrVector jarg1_, long jarg2);
	
	public final static native long TopologyEdgePointPtrVector_get(long jarg1, TopologyEdgePointPtrVector jarg1_, int jarg2);
	
	public final static native void TopologyEdgePointPtrVector_set(long jarg1, TopologyEdgePointPtrVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_TopologyEdgePointPtrVector(long jarg1);
	
	public final static native long new_TopologyEdgePointConstPtrVector__SWIG_0();
	
	public final static native long new_TopologyEdgePointConstPtrVector__SWIG_1(long jarg1);
	
	public final static native long TopologyEdgePointConstPtrVector_size(long jarg1, TopologyEdgePointConstPtrVector jarg1_);
	
	public final static native long TopologyEdgePointConstPtrVector_capacity(long jarg1, TopologyEdgePointConstPtrVector jarg1_);
	
	public final static native void TopologyEdgePointConstPtrVector_reserve(long jarg1, TopologyEdgePointConstPtrVector jarg1_, long jarg2);
	
	public final static native boolean TopologyEdgePointConstPtrVector_isEmpty(long jarg1, TopologyEdgePointConstPtrVector jarg1_);
	
	public final static native void TopologyEdgePointConstPtrVector_clear(long jarg1, TopologyEdgePointConstPtrVector jarg1_);
	
	public final static native void TopologyEdgePointConstPtrVector_add(long jarg1, TopologyEdgePointConstPtrVector jarg1_, long jarg2);
	
	public final static native long TopologyEdgePointConstPtrVector_get(long jarg1, TopologyEdgePointConstPtrVector jarg1_, int jarg2);
	
	public final static native void TopologyEdgePointConstPtrVector_set(long jarg1, TopologyEdgePointConstPtrVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_TopologyEdgePointConstPtrVector(long jarg1);
	
	public final static native long new_TopologyEdgePtrVector__SWIG_0();
	
	public final static native long new_TopologyEdgePtrVector__SWIG_1(long jarg1);
	
	public final static native long TopologyEdgePtrVector_size(long jarg1, TopologyEdgePtrVector jarg1_);
	
	public final static native long TopologyEdgePtrVector_capacity(long jarg1, TopologyEdgePtrVector jarg1_);
	
	public final static native void TopologyEdgePtrVector_reserve(long jarg1, TopologyEdgePtrVector jarg1_, long jarg2);
	
	public final static native boolean TopologyEdgePtrVector_isEmpty(long jarg1, TopologyEdgePtrVector jarg1_);
	
	public final static native void TopologyEdgePtrVector_clear(long jarg1, TopologyEdgePtrVector jarg1_);
	
	public final static native void TopologyEdgePtrVector_add(long jarg1, TopologyEdgePtrVector jarg1_, long jarg2);
	
	public final static native long TopologyEdgePtrVector_get(long jarg1, TopologyEdgePtrVector jarg1_, int jarg2);
	
	public final static native void TopologyEdgePtrVector_set(long jarg1, TopologyEdgePtrVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_TopologyEdgePtrVector(long jarg1);
	
	public final static native long new_TopologyNodePtrVector__SWIG_0();
	
	public final static native long new_TopologyNodePtrVector__SWIG_1(long jarg1);
	
	public final static native long TopologyNodePtrVector_size(long jarg1, TopologyNodePtrVector jarg1_);
	
	public final static native long TopologyNodePtrVector_capacity(long jarg1, TopologyNodePtrVector jarg1_);
	
	public final static native void TopologyNodePtrVector_reserve(long jarg1, TopologyNodePtrVector jarg1_, long jarg2);
	
	public final static native boolean TopologyNodePtrVector_isEmpty(long jarg1, TopologyNodePtrVector jarg1_);
	
	public final static native void TopologyNodePtrVector_clear(long jarg1, TopologyNodePtrVector jarg1_);
	
	public final static native void TopologyNodePtrVector_add(long jarg1, TopologyNodePtrVector jarg1_, long jarg2);
	
	public final static native long TopologyNodePtrVector_get(long jarg1, TopologyNodePtrVector jarg1_, int jarg2);
	
	public final static native void TopologyNodePtrVector_set(long jarg1, TopologyNodePtrVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_TopologyNodePtrVector(long jarg1);
	
	public final static native long new_UnsignedVector__SWIG_0();
	
	public final static native long new_UnsignedVector__SWIG_1(long jarg1);
	
	public final static native long UnsignedVector_size(long jarg1, UnsignedVector jarg1_);
	
	public final static native long UnsignedVector_capacity(long jarg1, UnsignedVector jarg1_);
	
	public final static native void UnsignedVector_reserve(long jarg1, UnsignedVector jarg1_, long jarg2);
	
	public final static native boolean UnsignedVector_isEmpty(long jarg1, UnsignedVector jarg1_);
	
	public final static native void UnsignedVector_clear(long jarg1, UnsignedVector jarg1_);
	
	public final static native void UnsignedVector_add(long jarg1, UnsignedVector jarg1_, long jarg2);
	
	public final static native long UnsignedVector_get(long jarg1, UnsignedVector jarg1_, int jarg2);
	
	public final static native void UnsignedVector_set(long jarg1, UnsignedVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_UnsignedVector(long jarg1);
	
	public final static native long new_ClusterVector__SWIG_0();
	
	public final static native long new_ClusterVector__SWIG_1(long jarg1);
	
	public final static native long ClusterVector_size(long jarg1, ClusterVector jarg1_);
	
	public final static native long ClusterVector_capacity(long jarg1, ClusterVector jarg1_);
	
	public final static native void ClusterVector_reserve(long jarg1, ClusterVector jarg1_, long jarg2);
	
	public final static native boolean ClusterVector_isEmpty(long jarg1, ClusterVector jarg1_);
	
	public final static native void ClusterVector_clear(long jarg1, ClusterVector jarg1_);
	
	public final static native void ClusterVector_add(long jarg1, ClusterVector jarg1_, long jarg2);
	
	public final static native long ClusterVector_get(long jarg1, ClusterVector jarg1_, int jarg2);
	
	public final static native void ClusterVector_set(long jarg1, ClusterVector jarg1_, int jarg2, long jarg3);
	
	public final static native void delete_ClusterVector(long jarg1);
	
	public final static native long new_AlignmentConstraintPair__SWIG_0();
	
	public final static native long new_AlignmentConstraintPair__SWIG_1(long jarg1, AlignmentConstraint jarg1_, long jarg2, AlignmentConstraint jarg2_);
	
	public final static native long new_AlignmentConstraintPair__SWIG_2(long jarg1, AlignmentConstraintPair jarg1_);
	
	public final static native void AlignmentConstraintPair_first_set(long jarg1, AlignmentConstraintPair jarg1_, long jarg2, AlignmentConstraint jarg2_);
	
	public final static native long AlignmentConstraintPair_first_get(long jarg1, AlignmentConstraintPair jarg1_);
	
	public final static native void AlignmentConstraintPair_second_set(long jarg1, AlignmentConstraintPair jarg1_, long jarg2, AlignmentConstraint jarg2_);
	
	public final static native long AlignmentConstraintPair_second_get(long jarg1, AlignmentConstraintPair jarg1_);
	
	public final static native void delete_AlignmentConstraintPair(long jarg1);
	
	public final static native long new_AlignmentConstraintPairList__SWIG_0();
	
	public final static native long new_AlignmentConstraintPairList__SWIG_1(long jarg1);
	
	public final static native long AlignmentConstraintPairList_size(long jarg1, AlignmentConstraintPairList jarg1_);
	
	public final static native long AlignmentConstraintPairList_capacity(long jarg1, AlignmentConstraintPairList jarg1_);
	
	public final static native void AlignmentConstraintPairList_reserve(long jarg1, AlignmentConstraintPairList jarg1_, long jarg2);
	
	public final static native boolean AlignmentConstraintPairList_isEmpty(long jarg1, AlignmentConstraintPairList jarg1_);
	
	public final static native void AlignmentConstraintPairList_clear(long jarg1, AlignmentConstraintPairList jarg1_);
	
	public final static native void AlignmentConstraintPairList_add(long jarg1, AlignmentConstraintPairList jarg1_, long jarg2, AlignmentConstraintPair jarg2_);
	
	public final static native long AlignmentConstraintPairList_get(long jarg1, AlignmentConstraintPairList jarg1_, int jarg2);
	
	public final static native void AlignmentConstraintPairList_set(long jarg1, AlignmentConstraintPairList jarg1_, int jarg2, long jarg3,
						AlignmentConstraintPair jarg3_);
	
	public final static native void delete_AlignmentConstraintPairList(long jarg1);
	
	public final static native void doubleArraySet(long jarg1, int jarg2, double jarg3);
	
	public final static native double doubleArrayGet(long jarg1, int jarg2);
	
	public final static native long newDoubleArray(int jarg1);
	
	public final static native void deleteDoubleArray(long jarg1);
	
	public final static native int HORIZONTAL_get();
	
	public final static native int VERTICAL_get();
	
	public final static native int conjugate(int jarg1);
	
	public final static native void RectangleIntersections_intersects_set(long jarg1, RectangleIntersections jarg1_, boolean jarg2);
	
	public final static native boolean RectangleIntersections_intersects_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_top_set(long jarg1, RectangleIntersections jarg1_, boolean jarg2);
	
	public final static native boolean RectangleIntersections_top_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_bottom_set(long jarg1, RectangleIntersections jarg1_, boolean jarg2);
	
	public final static native boolean RectangleIntersections_bottom_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_left_set(long jarg1, RectangleIntersections jarg1_, boolean jarg2);
	
	public final static native boolean RectangleIntersections_left_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_right_set(long jarg1, RectangleIntersections jarg1_, boolean jarg2);
	
	public final static native boolean RectangleIntersections_right_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_topX_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_topX_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_topY_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_topY_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_bottomX_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_bottomX_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_bottomY_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_bottomY_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_leftX_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_leftX_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_leftY_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_leftY_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_rightX_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_rightX_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_rightY_set(long jarg1, RectangleIntersections jarg1_, double jarg2);
	
	public final static native double RectangleIntersections_rightY_get(long jarg1, RectangleIntersections jarg1_);
	
	public final static native long new_RectangleIntersections();
	
	public final static native int RectangleIntersections_countIntersections(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_print(long jarg1, RectangleIntersections jarg1_);
	
	public final static native void RectangleIntersections_nearest(long jarg1, RectangleIntersections jarg1_, double jarg2, double jarg3, long jarg4, long jarg5);
	
	public final static native void delete_RectangleIntersections(long jarg1);
	
	public final static native void Rectangle_xBorder_set(double jarg1);
	
	public final static native double Rectangle_xBorder_get();
	
	public final static native void Rectangle_yBorder_set(double jarg1);
	
	public final static native double Rectangle_yBorder_get();
	
	public final static native long new_Rectangle__SWIG_0(double jarg1, double jarg2, double jarg3, double jarg4, boolean jarg5);
	
	public final static native long new_Rectangle__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4);
	
	public final static native long new_Rectangle__SWIG_2(long jarg1, Rectangle jarg1_);
	
	public final static native long new_Rectangle__SWIG_3();
	
	public final static native void Rectangle_reset(long jarg1, Rectangle jarg1_, long jarg2, double jarg3, double jarg4);
	
	public final static native double Rectangle_getMaxX(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_getMaxY(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_getMinX(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_getMinY(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_getMinD(long jarg1, Rectangle jarg1_, long jarg2);
	
	public final static native double Rectangle_getMaxD(long jarg1, Rectangle jarg1_, long jarg2);
	
	public final static native double Rectangle_getCentreX(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_getCentreY(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_getCentreD(long jarg1, Rectangle jarg1_, long jarg2);
	
	public final static native double Rectangle_width(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_height(long jarg1, Rectangle jarg1_);
	
	public final static native double Rectangle_length(long jarg1, Rectangle jarg1_, long jarg2);
	
	public final static native void Rectangle_set_width(long jarg1, Rectangle jarg1_, double jarg2);
	
	public final static native void Rectangle_set_height(long jarg1, Rectangle jarg1_, double jarg2);
	
	public final static native void Rectangle_moveCentreD(long jarg1, Rectangle jarg1_, long jarg2, double jarg3);
	
	public final static native void Rectangle_moveCentreX(long jarg1, Rectangle jarg1_, double jarg2);
	
	public final static native void Rectangle_moveCentreY(long jarg1, Rectangle jarg1_, double jarg2);
	
	public final static native void Rectangle_moveCentre(long jarg1, Rectangle jarg1_, double jarg2, double jarg3);
	
	public final static native void Rectangle_moveMinX(long jarg1, Rectangle jarg1_, double jarg2);
	
	public final static native void Rectangle_moveMinY(long jarg1, Rectangle jarg1_, double jarg2);
	
	public final static native double Rectangle_overlapD(long jarg1, Rectangle jarg1_, long jarg2, long jarg3, Rectangle jarg3_);
	
	public final static native double Rectangle_overlapX(long jarg1, Rectangle jarg1_, long jarg2, Rectangle jarg2_);
	
	public final static native double Rectangle_overlapY(long jarg1, Rectangle jarg1_, long jarg2, Rectangle jarg2_);
	
	public final static native boolean Rectangle_allowOverlap(long jarg1, Rectangle jarg1_);
	
	public final static native void Rectangle_offset(long jarg1, Rectangle jarg1_, double jarg2, double jarg3);
	
	public final static native void Rectangle_lineIntersections(long jarg1, Rectangle jarg1_, double jarg2, double jarg3, double jarg4, double jarg5,
						long jarg6, RectangleIntersections jarg6_);
	
	public final static native boolean Rectangle_inside(long jarg1, Rectangle jarg1_, double jarg2, double jarg3);
	
	public final static native boolean Rectangle_overlaps(long jarg1, Rectangle jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
	
	public final static native void Rectangle_routeAround(long jarg1, Rectangle jarg1_, double jarg2, double jarg3, double jarg4, double jarg5, long jarg6,
						long jarg7);
	
	public final static native void delete_Rectangle(long jarg1);
	
	public final static native void generateXConstraints(long jarg1, RectPtrVector jarg1_, long jarg2, long jarg3, boolean jarg4);
	
	public final static native void generateYConstraints(long jarg1, RectPtrVector jarg1_, long jarg2, long jarg3);
	
	public final static native void removeoverlaps__SWIG_0(long jarg1, RectPtrVector jarg1_);
	
	public final static native void removeoverlaps__SWIG_1(long jarg1, RectPtrVector jarg1_, long jarg2, boolean jarg3);
	
	public final static native void removeoverlaps__SWIG_2(long jarg1, RectPtrVector jarg1_, long jarg2);
	
	public final static native long new_delete_object();
	
	public final static native void delete_delete_object(long jarg1);
	
	public final static native long new_Lock__SWIG_0();
	
	public final static native long new_Lock__SWIG_1(long jarg1, double jarg2, double jarg3);
	
	public final static native long Lock_getID(long jarg1, Lock jarg1_);
	
	public final static native double Lock_pos(long jarg1, Lock jarg1_, int jarg2);
	
	public final static native void delete_Lock(long jarg1);
	
	public final static native long new_Resize(long jarg1, double jarg2, double jarg3, double jarg4, double jarg5);
	
	public final static native long Resize_getID(long jarg1, Resize jarg1_);
	
	public final static native long Resize_getTarget(long jarg1, Resize jarg1_);
	
	public final static native void delete_Resize(long jarg1);
	
	public final static native void DesiredPosition_id_set(long jarg1, DesiredPosition jarg1_, long jarg2);
	
	public final static native long DesiredPosition_id_get(long jarg1, DesiredPosition jarg1_);
	
	public final static native void DesiredPosition_x_set(long jarg1, DesiredPosition jarg1_, double jarg2);
	
	public final static native double DesiredPosition_x_get(long jarg1, DesiredPosition jarg1_);
	
	public final static native void DesiredPosition_y_set(long jarg1, DesiredPosition jarg1_, double jarg2);
	
	public final static native double DesiredPosition_y_get(long jarg1, DesiredPosition jarg1_);
	
	public final static native void DesiredPosition_weight_set(long jarg1, DesiredPosition jarg1_, double jarg2);
	
	public final static native double DesiredPosition_weight_get(long jarg1, DesiredPosition jarg1_);
	
	public final static native long new_DesiredPosition();
	
	public final static native void delete_DesiredPosition(long jarg1);
	
	public final static native long new_PreIteration__SWIG_0(long jarg1, ColaLocks jarg1_, long jarg2, ColaResizes jarg2_);
	
	public final static native long new_PreIteration__SWIG_1(long jarg1, ColaLocks jarg1_);
	
	public final static native long new_PreIteration__SWIG_2();
	
	public final static native long new_PreIteration__SWIG_3(long jarg1, ColaResizes jarg1_);
	
	public final static native void delete_PreIteration(long jarg1);
	
	public final static native void PreIteration_locks_set(long jarg1, PreIteration jarg1_, long jarg2, ColaLocks jarg2_);
	
	public final static native long PreIteration_locks_get(long jarg1, PreIteration jarg1_);
	
	public final static native void PreIteration_resizes_set(long jarg1, PreIteration jarg1_, long jarg2, ColaResizes jarg2_);
	
	public final static native long PreIteration_resizes_get(long jarg1, PreIteration jarg1_);
	
	public final static native void PreIteration_changed_set(long jarg1, PreIteration jarg1_, boolean jarg2);
	
	public final static native boolean PreIteration_changed_get(long jarg1, PreIteration jarg1_);
	
	public final static native void TestConvergence_old_stress_set(long jarg1, TestConvergence jarg1_, double jarg2);
	
	public final static native double TestConvergence_old_stress_get(long jarg1, TestConvergence jarg1_);
	
	public final static native long new_TestConvergence__SWIG_0(double jarg1, long jarg2);
	
	public final static native long new_TestConvergence__SWIG_1(double jarg1);
	
	public final static native long new_TestConvergence__SWIG_2();
	
	public final static native void delete_TestConvergence(long jarg1);
	
	public final static native boolean TestConvergence_testoperator(long jarg1, TestConvergence jarg1_, double jarg2, long jarg3, long jarg4);
	
	public final static native void TestConvergence_reset(long jarg1, TestConvergence jarg1_);
	
	public final static native double TestConvergence_tolerance_get(long jarg1, TestConvergence jarg1_);
	
	public final static native long TestConvergence_maxiterations_get(long jarg1, TestConvergence jarg1_);
	
	public final static native void TestConvergence_iterations_set(long jarg1, TestConvergence jarg1_, long jarg2);
	
	public final static native long TestConvergence_iterations_get(long jarg1, TestConvergence jarg1_);
	
	public final static native long defaultTest_get();
	
	public final static native long new_ConstrainedMajorizationLayout__SWIG_0(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, long jarg3,
						double jarg4, long jarg5, long jarg6, TestConvergence jarg6_, long jarg7, PreIteration jarg7_);
	
	public final static native long new_ConstrainedMajorizationLayout__SWIG_1(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, long jarg3,
						double jarg4, long jarg5, long jarg6, TestConvergence jarg6_);
	
	public final static native long new_ConstrainedMajorizationLayout__SWIG_2(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, long jarg3,
						double jarg4, long jarg5);
	
	public final static native long new_ConstrainedMajorizationLayout__SWIG_3(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, long jarg3,
						double jarg4);
	
	public final static native void ConstrainedMajorizationLayout_setXConstraints(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2,
						CompoundConstraintsVector jarg2_);
	
	public final static native void ConstrainedMajorizationLayout_setYConstraints(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2,
						CompoundConstraintsVector jarg2_);
	
	public final static native void ConstrainedMajorizationLayout_setUnsatisfiableConstraintInfo(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2,
						long jarg3);
	
	public final static native void ConstrainedMajorizationLayout_setStickyNodes(long jarg1, ConstrainedMajorizationLayout jarg1_, double jarg2, long jarg3,
						long jarg4);
	
	public final static native void ConstrainedMajorizationLayout_setScaling(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedMajorizationLayout_setExternalSolver(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedMajorizationLayout_setAvoidOverlaps__SWIG_0(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedMajorizationLayout_setAvoidOverlaps__SWIG_1(long jarg1, ConstrainedMajorizationLayout jarg1_);
	
	public final static native void ConstrainedMajorizationLayout_setNonOverlappingClusters(long jarg1, ConstrainedMajorizationLayout jarg1_);
	
	public final static native void ConstrainedMajorizationLayout_setStraightenEdges__SWIG_0(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2,
						double jarg3, double jarg4, boolean jarg5);
	
	public final static native void ConstrainedMajorizationLayout_setStraightenEdges__SWIG_1(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2,
						double jarg3, double jarg4);
	
	public final static native void ConstrainedMajorizationLayout_setStraightenEdges__SWIG_2(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2,
						double jarg3);
	
	public final static native void ConstrainedMajorizationLayout_setStraightenEdges__SWIG_3(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2);
	
	public final static native void ConstrainedMajorizationLayout_moveBoundingBoxes(long jarg1, ConstrainedMajorizationLayout jarg1_);
	
	public final static native void delete_ConstrainedMajorizationLayout(long jarg1);
	
	public final static native void ConstrainedMajorizationLayout_run__SWIG_0(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2, boolean jarg3);
	
	public final static native void ConstrainedMajorizationLayout_run__SWIG_1(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedMajorizationLayout_run__SWIG_2(long jarg1, ConstrainedMajorizationLayout jarg1_);
	
	public final static native void ConstrainedMajorizationLayout_runOnce__SWIG_0(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2, boolean jarg3);
	
	public final static native void ConstrainedMajorizationLayout_runOnce__SWIG_1(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedMajorizationLayout_runOnce__SWIG_2(long jarg1, ConstrainedMajorizationLayout jarg1_);
	
	public final static native void ConstrainedMajorizationLayout_straighten(long jarg1, ConstrainedMajorizationLayout jarg1_, long jarg2, int jarg3);
	
	public final static native void ConstrainedMajorizationLayout_setConstrainedLayout(long jarg1, ConstrainedMajorizationLayout jarg1_, boolean jarg2);
	
	public final static native double ConstrainedMajorizationLayout_computeStress(long jarg1, ConstrainedMajorizationLayout jarg1_);
	
	public final static native long bounds(long jarg1, RectPtrVector jarg1_);
	
	public final static native long new_ConstrainedFDLayout__SWIG_0(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, double jarg3, long jarg4,
						long jarg5, TestConvergence jarg5_, long jarg6, PreIteration jarg6_);
	
	public final static native long new_ConstrainedFDLayout__SWIG_1(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, double jarg3, long jarg4,
						long jarg5, TestConvergence jarg5_);
	
	public final static native long new_ConstrainedFDLayout__SWIG_2(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, double jarg3, long jarg4);
	
	public final static native long new_ConstrainedFDLayout__SWIG_3(long jarg1, RectPtrVector jarg1_, long jarg2, EdgeVector jarg2_, double jarg3);
	
	public final static native void ConstrainedFDLayout_run__SWIG_0(long jarg1, ConstrainedFDLayout jarg1_, boolean jarg2, boolean jarg3);
	
	public final static native void ConstrainedFDLayout_run__SWIG_1(long jarg1, ConstrainedFDLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedFDLayout_run__SWIG_2(long jarg1, ConstrainedFDLayout jarg1_);
	
	public final static native void ConstrainedFDLayout_runOnce__SWIG_0(long jarg1, ConstrainedFDLayout jarg1_, boolean jarg2, boolean jarg3);
	
	public final static native void ConstrainedFDLayout_runOnce__SWIG_1(long jarg1, ConstrainedFDLayout jarg1_, boolean jarg2);
	
	public final static native void ConstrainedFDLayout_runOnce__SWIG_2(long jarg1, ConstrainedFDLayout jarg1_);
	
	public final static native void ConstrainedFDLayout_setXConstraints(long jarg1, ConstrainedFDLayout jarg1_, long jarg2, CompoundConstraintsVector jarg2_);
	
	public final static native void ConstrainedFDLayout_setYConstraints(long jarg1, ConstrainedFDLayout jarg1_, long jarg2, CompoundConstraintsVector jarg2_);
	
	public final static native void ConstrainedFDLayout_setTopology(long jarg1, ConstrainedFDLayout jarg1_, long jarg2, TopologyNodePtrVector jarg2_,
						long jarg3, TopologyEdgePtrVector jarg3_);
	
	public final static native void ConstrainedFDLayout_setDesiredPositions(long jarg1, ConstrainedFDLayout jarg1_, long jarg2, ColaDesiredPositions jarg2_);
	
	public final static native void ConstrainedFDLayout_setUnsatisfiableConstraintInfo(long jarg1, ConstrainedFDLayout jarg1_, long jarg2, long jarg3);
	
	public final static native void delete_ConstrainedFDLayout(long jarg1);
	
	public final static native double ConstrainedFDLayout_computeStress(long jarg1, ConstrainedFDLayout jarg1_);
	
	public final static native void dijkstra(long jarg1, long jarg2, long jarg3, long jarg4, EdgeVector jarg4_, long jarg5);
	
	public final static native void removeClusterOverlapFast(long jarg1, long jarg2, RectPtrVector jarg2_, long jarg3, ColaLocks jarg3_);
	
	public final static native void Cluster_varWeight_set(long jarg1, Cluster jarg1_, double jarg2);
	
	public final static native double Cluster_varWeight_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_internalEdgeWeightFactor_set(long jarg1, Cluster jarg1_, double jarg2);
	
	public final static native double Cluster_internalEdgeWeightFactor_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_nodes_set(long jarg1, Cluster jarg1_, long jarg2, UnsignedVector jarg2_);
	
	public final static native long Cluster_nodes_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_clusters_set(long jarg1, Cluster jarg1_, long jarg2, ClusterVector jarg2_);
	
	public final static native long Cluster_clusters_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_hullX_set(long jarg1, Cluster jarg1_, long jarg2);
	
	public final static native long Cluster_hullX_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_hullY_set(long jarg1, Cluster jarg1_, long jarg2);
	
	public final static native long Cluster_hullY_get(long jarg1, Cluster jarg1_);
	
	public final static native void delete_Cluster(long jarg1);
	
	public final static native void Cluster_computeBoundary(long jarg1, Cluster jarg1_, long jarg2, RectPtrVector jarg2_);
	
	public final static native void Cluster_computeBoundingRect(long jarg1, Cluster jarg1_, long jarg2, RectPtrVector jarg2_);
	
	public final static native void Cluster_bounds_set(long jarg1, Cluster jarg1_, long jarg2, Rectangle jarg2_);
	
	public final static native long Cluster_bounds_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_setDesiredBounds(long jarg1, Cluster jarg1_, long jarg2, Rectangle jarg2_);
	
	public final static native void Cluster_unsetDesiredBounds(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_createVars(long jarg1, Cluster jarg1_, int jarg2, long jarg3, RectPtrVector jarg3_, long jarg4);
	
	public final static native void Cluster_vXMin_set(long jarg1, Cluster jarg1_, long jarg2);
	
	public final static native long Cluster_vXMin_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_vXMax_set(long jarg1, Cluster jarg1_, long jarg2);
	
	public final static native long Cluster_vXMax_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_vYMin_set(long jarg1, Cluster jarg1_, long jarg2);
	
	public final static native long Cluster_vYMin_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_vYMax_set(long jarg1, Cluster jarg1_, long jarg2);
	
	public final static native long Cluster_vYMax_get(long jarg1, Cluster jarg1_);
	
	public final static native void Cluster_generateNonOverlapConstraints(long jarg1, Cluster jarg1_, int jarg2, long jarg3, long jarg4, RectPtrVector jarg4_,
						long jarg5, long jarg6);
	
	public final static native void Cluster_clear(long jarg1, Cluster jarg1_);
	
	public final static native double Cluster_area(long jarg1, Cluster jarg1_, long jarg2, RectPtrVector jarg2_);
	
	public final static native void Cluster_updateBounds(long jarg1, Cluster jarg1_, int jarg2);
	
	public final static native void RectangularCluster_computeBoundary(long jarg1, RectangularCluster jarg1_, long jarg2, RectPtrVector jarg2_);
	
	public final static native long new_RectangularCluster();
	
	public final static native void delete_RectangularCluster(long jarg1);
	
	public final static native void RootCluster_computeBoundary(long jarg1, RootCluster jarg1_, long jarg2, RectPtrVector jarg2_);
	
	public final static native long new_RootCluster();
	
	public final static native void delete_RootCluster(long jarg1);
	
	public final static native void ConvexCluster_computeBoundary(long jarg1, ConvexCluster jarg1_, long jarg2, RectPtrVector jarg2_);
	
	public final static native void ConvexCluster_hullRIDs_set(long jarg1, ConvexCluster jarg1_, long jarg2);
	
	public final static native long ConvexCluster_hullRIDs_get(long jarg1, ConvexCluster jarg1_);
	
	public final static native void ConvexCluster_hullCorners_set(long jarg1, ConvexCluster jarg1_, long jarg2);
	
	public final static native long ConvexCluster_hullCorners_get(long jarg1, ConvexCluster jarg1_);
	
	public final static native long new_ConvexCluster();
	
	public final static native void delete_ConvexCluster(long jarg1);
	
	public final static native void convex__SWIG_0(long jarg1, long jarg2, long jarg3, long jarg4, UnsignedVector jarg4_);
	
	public final static native void convex__SWIG_1(long jarg1, long jarg2, long jarg3, UnsignedVector jarg3_);
	
	public final static native void CompoundConstraint_generateVariables(long jarg1, CompoundConstraint jarg1_, long jarg2);
	
	public final static native void CompoundConstraint_generateSeparationConstraints(long jarg1, CompoundConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void CompoundConstraint_updatePosition(long jarg1, CompoundConstraint jarg1_);
	
	public final static native void delete_CompoundConstraint(long jarg1);
	
	public final static native void generateVariablesAndConstraints(long jarg1, CompoundConstraintsVector jarg1_, long jarg2, long jarg3);
	
	public final static native long new_BoundaryConstraint(double jarg1);
	
	public final static native void BoundaryConstraint_updatePosition(long jarg1, BoundaryConstraint jarg1_);
	
	public final static native void BoundaryConstraint_generateVariables(long jarg1, BoundaryConstraint jarg1_, long jarg2);
	
	public final static native void BoundaryConstraint_generateSeparationConstraints(long jarg1, BoundaryConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void BoundaryConstraint_position_set(long jarg1, BoundaryConstraint jarg1_, double jarg2);
	
	public final static native double BoundaryConstraint_position_get(long jarg1, BoundaryConstraint jarg1_);
	
	public final static native void BoundaryConstraint_leftOffsets_set(long jarg1, BoundaryConstraint jarg1_, long jarg2, OffsetList jarg2_);
	
	public final static native long BoundaryConstraint_leftOffsets_get(long jarg1, BoundaryConstraint jarg1_);
	
	public final static native void BoundaryConstraint_rightOffsets_set(long jarg1, BoundaryConstraint jarg1_, long jarg2, OffsetList jarg2_);
	
	public final static native long BoundaryConstraint_rightOffsets_get(long jarg1, BoundaryConstraint jarg1_);
	
	public final static native void BoundaryConstraint_variable_set(long jarg1, BoundaryConstraint jarg1_, long jarg2);
	
	public final static native long BoundaryConstraint_variable_get(long jarg1, BoundaryConstraint jarg1_);
	
	public final static native void delete_BoundaryConstraint(long jarg1);
	
	public final static native long new_AlignmentConstraint(double jarg1);
	
	public final static native void AlignmentConstraint_updatePosition(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void AlignmentConstraint_fixPos(long jarg1, AlignmentConstraint jarg1_, double jarg2);
	
	public final static native void AlignmentConstraint_unfixPos(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void AlignmentConstraint_offsets_set(long jarg1, AlignmentConstraint jarg1_, long jarg2, OffsetList jarg2_);
	
	public final static native long AlignmentConstraint_offsets_get(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void AlignmentConstraint_guide_set(long jarg1, AlignmentConstraint jarg1_, long jarg2);
	
	public final static native long AlignmentConstraint_guide_get(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void AlignmentConstraint_position_set(long jarg1, AlignmentConstraint jarg1_, double jarg2);
	
	public final static native double AlignmentConstraint_position_get(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void AlignmentConstraint_isFixed_set(long jarg1, AlignmentConstraint jarg1_, boolean jarg2);
	
	public final static native boolean AlignmentConstraint_isFixed_get(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void AlignmentConstraint_generateVariables(long jarg1, AlignmentConstraint jarg1_, long jarg2);
	
	public final static native void AlignmentConstraint_generateSeparationConstraints(long jarg1, AlignmentConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void AlignmentConstraint_variable_set(long jarg1, AlignmentConstraint jarg1_, long jarg2);
	
	public final static native long AlignmentConstraint_variable_get(long jarg1, AlignmentConstraint jarg1_);
	
	public final static native void delete_AlignmentConstraint(long jarg1);
	
	public final static native long new_SeparationConstraint__SWIG_0(long jarg1, long jarg2, double jarg3, boolean jarg4);
	
	public final static native long new_SeparationConstraint__SWIG_1(long jarg1, long jarg2, double jarg3);
	
	public final static native long new_SeparationConstraint__SWIG_2(long jarg1, AlignmentConstraint jarg1_, long jarg2, AlignmentConstraint jarg2_,
						double jarg3, boolean jarg4);
	
	public final static native long new_SeparationConstraint__SWIG_3(long jarg1, AlignmentConstraint jarg1_, long jarg2, AlignmentConstraint jarg2_, double jarg3);
	
	public final static native void SeparationConstraint_left_set(long jarg1, SeparationConstraint jarg1_, long jarg2);
	
	public final static native long SeparationConstraint_left_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void SeparationConstraint_right_set(long jarg1, SeparationConstraint jarg1_, long jarg2);
	
	public final static native long SeparationConstraint_right_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void SeparationConstraint_al_set(long jarg1, SeparationConstraint jarg1_, long jarg2, AlignmentConstraint jarg2_);
	
	public final static native long SeparationConstraint_al_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void SeparationConstraint_ar_set(long jarg1, SeparationConstraint jarg1_, long jarg2, AlignmentConstraint jarg2_);
	
	public final static native long SeparationConstraint_ar_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void SeparationConstraint_gap_set(long jarg1, SeparationConstraint jarg1_, double jarg2);
	
	public final static native double SeparationConstraint_gap_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void SeparationConstraint_equality_set(long jarg1, SeparationConstraint jarg1_, boolean jarg2);
	
	public final static native boolean SeparationConstraint_equality_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void SeparationConstraint_generateVariables(long jarg1, SeparationConstraint jarg1_, long jarg2);
	
	public final static native void SeparationConstraint_generateSeparationConstraints(long jarg1, SeparationConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void SeparationConstraint_setSeparation(long jarg1, SeparationConstraint jarg1_, double jarg2);
	
	public final static native void SeparationConstraint_vpscConstraint_set(long jarg1, SeparationConstraint jarg1_, long jarg2);
	
	public final static native long SeparationConstraint_vpscConstraint_get(long jarg1, SeparationConstraint jarg1_);
	
	public final static native void delete_SeparationConstraint(long jarg1);
	
	public final static native long new_OrthogonalEdgeConstraint(long jarg1, long jarg2);
	
	public final static native void OrthogonalEdgeConstraint_left_set(long jarg1, OrthogonalEdgeConstraint jarg1_, long jarg2);
	
	public final static native long OrthogonalEdgeConstraint_left_get(long jarg1, OrthogonalEdgeConstraint jarg1_);
	
	public final static native void OrthogonalEdgeConstraint_right_set(long jarg1, OrthogonalEdgeConstraint jarg1_, long jarg2);
	
	public final static native long OrthogonalEdgeConstraint_right_get(long jarg1, OrthogonalEdgeConstraint jarg1_);
	
	public final static native void OrthogonalEdgeConstraint_generateVariables(long jarg1, OrthogonalEdgeConstraint jarg1_, long jarg2);
	
	public final static native void OrthogonalEdgeConstraint_generateSeparationConstraints(long jarg1, OrthogonalEdgeConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void OrthogonalEdgeConstraint_generateTopologyConstraints(long jarg1, OrthogonalEdgeConstraint jarg1_, int jarg2, long jarg3,
						RectPtrVector jarg3_, long jarg4, long jarg5);
	
	public final static native void OrthogonalEdgeConstraint_vpscConstraint_set(long jarg1, OrthogonalEdgeConstraint jarg1_, long jarg2);
	
	public final static native long OrthogonalEdgeConstraint_vpscConstraint_get(long jarg1, OrthogonalEdgeConstraint jarg1_);
	
	public final static native void delete_OrthogonalEdgeConstraint(long jarg1);
	
	public final static native long new_MultiSeparationConstraint__SWIG_0(double jarg1, boolean jarg2);
	
	public final static native long new_MultiSeparationConstraint__SWIG_1(double jarg1);
	
	public final static native long new_MultiSeparationConstraint__SWIG_2();
	
	public final static native void MultiSeparationConstraint_generateVariables(long jarg1, MultiSeparationConstraint jarg1_, long jarg2);
	
	public final static native void MultiSeparationConstraint_generateSeparationConstraints(long jarg1, MultiSeparationConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void MultiSeparationConstraint_setSeparation(long jarg1, MultiSeparationConstraint jarg1_, double jarg2);
	
	public final static native void MultiSeparationConstraint_cs_set(long jarg1, MultiSeparationConstraint jarg1_, long jarg2);
	
	public final static native long MultiSeparationConstraint_cs_get(long jarg1, MultiSeparationConstraint jarg1_);
	
	public final static native void MultiSeparationConstraint_acs_set(long jarg1, MultiSeparationConstraint jarg1_, long jarg2,
						AlignmentConstraintPairList jarg2_);
	
	public final static native long MultiSeparationConstraint_acs_get(long jarg1, MultiSeparationConstraint jarg1_);
	
	public final static native void MultiSeparationConstraint_indicator_set(long jarg1, MultiSeparationConstraint jarg1_, long jarg2);
	
	public final static native long MultiSeparationConstraint_indicator_get(long jarg1, MultiSeparationConstraint jarg1_);
	
	public final static native void MultiSeparationConstraint_sep_set(long jarg1, MultiSeparationConstraint jarg1_, double jarg2);
	
	public final static native double MultiSeparationConstraint_sep_get(long jarg1, MultiSeparationConstraint jarg1_);
	
	public final static native void MultiSeparationConstraint_equality_set(long jarg1, MultiSeparationConstraint jarg1_, boolean jarg2);
	
	public final static native boolean MultiSeparationConstraint_equality_get(long jarg1, MultiSeparationConstraint jarg1_);
	
	public final static native void delete_MultiSeparationConstraint(long jarg1);
	
	public final static native long new_DistributionConstraint();
	
	public final static native void DistributionConstraint_generateVariables(long jarg1, DistributionConstraint jarg1_, long jarg2);
	
	public final static native void DistributionConstraint_generateSeparationConstraints(long jarg1, DistributionConstraint jarg1_, long jarg2, long jarg3);
	
	public final static native void DistributionConstraint_setSeparation(long jarg1, DistributionConstraint jarg1_, double jarg2);
	
	public final static native void DistributionConstraint_cs_set(long jarg1, DistributionConstraint jarg1_, long jarg2);
	
	public final static native long DistributionConstraint_cs_get(long jarg1, DistributionConstraint jarg1_);
	
	public final static native void DistributionConstraint_acs_set(long jarg1, DistributionConstraint jarg1_, long jarg2, AlignmentConstraintPairList jarg2_);
	
	public final static native long DistributionConstraint_acs_get(long jarg1, DistributionConstraint jarg1_);
	
	public final static native void DistributionConstraint_indicator_set(long jarg1, DistributionConstraint jarg1_, long jarg2);
	
	public final static native long DistributionConstraint_indicator_get(long jarg1, DistributionConstraint jarg1_);
	
	public final static native void DistributionConstraint_sep_set(long jarg1, DistributionConstraint jarg1_, double jarg2);
	
	public final static native double DistributionConstraint_sep_get(long jarg1, DistributionConstraint jarg1_);
	
	public final static native void delete_DistributionConstraint(long jarg1);
	
	public final static native long new_PageBoundaryConstraints__SWIG_0(double jarg1, double jarg2, double jarg3);
	
	public final static native long new_PageBoundaryConstraints__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4);
	
	public final static native void PageBoundaryConstraints_generateVariables(long jarg1, PageBoundaryConstraints jarg1_, long jarg2);
	
	public final static native void PageBoundaryConstraints_generateSeparationConstraints(long jarg1, PageBoundaryConstraints jarg1_, long jarg2, long jarg3);
	
	public final static native void PageBoundaryConstraints_updatePosition(long jarg1, PageBoundaryConstraints jarg1_);
	
	public final static native double PageBoundaryConstraints_getActualLeftMargin(long jarg1, PageBoundaryConstraints jarg1_);
	
	public final static native double PageBoundaryConstraints_getActualRightMargin(long jarg1, PageBoundaryConstraints jarg1_);
	
	public final static native void PageBoundaryConstraints_offsets_set(long jarg1, PageBoundaryConstraints jarg1_, long jarg2, OffsetList jarg2_);
	
	public final static native long PageBoundaryConstraints_offsets_get(long jarg1, PageBoundaryConstraints jarg1_);
	
	public final static native void delete_PageBoundaryConstraints(long jarg1);
	
	public final static native long new_UnsatisfiableConstraintInfo(long jarg1);
	
	public final static native void UnsatisfiableConstraintInfo_vlid_set(long jarg1, UnsatisfiableConstraintInfo jarg1_, long jarg2);
	
	public final static native long UnsatisfiableConstraintInfo_vlid_get(long jarg1, UnsatisfiableConstraintInfo jarg1_);
	
	public final static native void UnsatisfiableConstraintInfo_vrid_set(long jarg1, UnsatisfiableConstraintInfo jarg1_, long jarg2);
	
	public final static native long UnsatisfiableConstraintInfo_vrid_get(long jarg1, UnsatisfiableConstraintInfo jarg1_);
	
	public final static native void UnsatisfiableConstraintInfo_gap_set(long jarg1, UnsatisfiableConstraintInfo jarg1_, double jarg2);
	
	public final static native double UnsatisfiableConstraintInfo_gap_get(long jarg1, UnsatisfiableConstraintInfo jarg1_);
	
	public final static native void delete_UnsatisfiableConstraintInfo(long jarg1);
	
	public final static native void dim_set(int jarg1);
	
	public final static native int dim_get();
	
	public final static native long Node_id_get(long jarg1, Node jarg1_);
	
	public final static native void Node_rect_set(long jarg1, Node jarg1_, long jarg2, Rectangle jarg2_);
	
	public final static native long Node_rect_get(long jarg1, Node jarg1_);
	
	public final static native long new_Node__SWIG_0(long jarg1, long jarg2, Rectangle jarg2_, long jarg3);
	
	public final static native long new_Node__SWIG_1(long jarg1, long jarg2, Rectangle jarg2_);
	
	public final static native void Node_setDesiredPos__SWIG_0(long jarg1, Node jarg1_, double jarg2, double jarg3);
	
	public final static native void Node_setDesiredPos__SWIG_1(long jarg1, Node jarg1_, double jarg2);
	
	public final static native double Node_initialPos(long jarg1, Node jarg1_);
	
	public final static native double Node_finalPos(long jarg1, Node jarg1_);
	
	public final static native double Node_posOnLine(long jarg1, Node jarg1_, double jarg2);
	
	public final static native long Node_getVarOrig(long jarg1, Node jarg1_);
	
	public final static native void Node_var_set(long jarg1, Node jarg1_, long jarg2);
	
	public final static native long Node_var_get(long jarg1, Node jarg1_);
	
	public final static native void delete_Node(long jarg1);
	
	public final static native void setNodeVariables(long jarg1, TopologyNodePtrVector jarg1_, long jarg2);
	
	public final static native void EdgePoint_node_set(long jarg1, EdgePoint jarg1_, long jarg2, Node jarg2_);
	
	public final static native long EdgePoint_node_get(long jarg1, EdgePoint jarg1_);
	
	public final static native void EdgePoint_rectIntersect_set(long jarg1, EdgePoint jarg1_, int jarg2);
	
	public final static native int EdgePoint_rectIntersect_get(long jarg1, EdgePoint jarg1_);
	
	public final static native long new_EdgePoint(long jarg1, Node jarg1_, int jarg2);
	
	public final static native double EdgePoint_pos(long jarg1, EdgePoint jarg1_, int jarg2);
	
	public final static native double EdgePoint_posX(long jarg1, EdgePoint jarg1_);
	
	public final static native double EdgePoint_posY(long jarg1, EdgePoint jarg1_);
	
	public final static native int EdgePoint_rectIntersectAsVertexNumber(long jarg1, EdgePoint jarg1_);
	
	public final static native boolean EdgePoint_uniqueCheck(long jarg1, EdgePoint jarg1_, long jarg2, EdgePoint jarg2_);
	
	public final static native void delete_EdgePoint(long jarg1);
	
	public final static native boolean EdgePoint_isEnd(long jarg1, EdgePoint jarg1_);
	
	public final static native boolean EdgePoint_assertConvexBend(long jarg1, EdgePoint jarg1_);
	
	public final static native double EdgePoint_offset(long jarg1, EdgePoint jarg1_);
	
	public final static native void Edge_id_set(long jarg1, Edge jarg1_, long jarg2);
	
	public final static native long Edge_id_get(long jarg1, Edge jarg1_);
	
	public final static native void Edge_idealLength_set(long jarg1, Edge jarg1_, double jarg2);
	
	public final static native double Edge_idealLength_get(long jarg1, Edge jarg1_);
	
	public final static native void Edge_nSegments_set(long jarg1, Edge jarg1_, long jarg2);
	
	public final static native long Edge_nSegments_get(long jarg1, Edge jarg1_);
	
	public final static native long new_Edge(long jarg1, double jarg2, long jarg3, TopologyEdgePointPtrVector jarg3_);
	
	public final static native void delete_Edge(long jarg1);
	
	public final static native double Edge_pathLength(long jarg1, Edge jarg1_);
	
	public final static native void Edge_getPath(long jarg1, Edge jarg1_, long jarg2, TopologyEdgePointConstPtrVector jarg2_);
	
	public final static native boolean Edge_assertConvexBends(long jarg1, Edge jarg1_);
	
	public final static native boolean Edge_cycle(long jarg1, Edge jarg1_);
	
	public final static native double crossProduct(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
	
	public final static native int ConnType_PolyLine_get();
	
	public final static native int ConnType_Orthogonal_get();
	
	public final static native double ATTACH_POS_TOP_get();
	
	public final static native double ATTACH_POS_CENTER_get();
	
	public final static native double ATTACH_POS_BOTTOM_get();
	
	public final static native double ATTACH_POS_LEFT_get();
	
	public final static native double ATTACH_POS_RIGHT_get();
	
	public final static native long new_ConnRef__SWIG_0(long jarg1, long jarg2);
	
	public final static native long new_ConnRef__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4);
	
	public final static native void delete_ConnRef(long jarg1);
	
	public final static native void ConnRef_setType(long jarg1, ConnRef jarg1_, long jarg2);
	
	public final static native long ConnRef_route(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_set_route(long jarg1, ConnRef jarg1_, long jarg2);
	
	public final static native long ConnRef_display_route(long jarg1, ConnRef jarg1_);
	
	public final static native boolean ConnRef_needsReroute(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_freeRoute(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_calcRouteDist(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_updateEndPoint__SWIG_0(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native void ConnRef_updateEndPoint__SWIG_1(long jarg1, ConnRef jarg1_, long jarg2, long jarg3, double jarg4, double jarg5);
	
	public final static native void ConnRef_updateEndPoint__SWIG_2(long jarg1, ConnRef jarg1_, long jarg2, long jarg3, double jarg4);
	
	public final static native void ConnRef_updateEndPoint__SWIG_3(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native boolean ConnRef_updateEndPoint__SWIG_4(long jarg1, ConnRef jarg1_, long jarg2, long jarg3, long jarg4);
	
	public final static native boolean ConnRef_updateEndPoint__SWIG_5(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native void ConnRef_setEndPointId(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native long ConnRef_getSrcShapeId(long jarg1, ConnRef jarg1_);
	
	public final static native long ConnRef_getDstShapeId(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_makeActive(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_makeInactive(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_lateSetup(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native long ConnRef_id(long jarg1, ConnRef jarg1_);
	
	public final static native long ConnRef_src(long jarg1, ConnRef jarg1_);
	
	public final static native long ConnRef_dst(long jarg1, ConnRef jarg1_);
	
	public final static native long ConnRef_start(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_removeFromGraph(long jarg1, ConnRef jarg1_);
	
	public final static native boolean ConnRef_isInitialised(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_unInitialise(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_setCallback(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native void ConnRef_handleInvalid(long jarg1, ConnRef jarg1_);
	
	public final static native int ConnRef_generatePath__SWIG_0(long jarg1, ConnRef jarg1_);
	
	public final static native int ConnRef_generatePath__SWIG_1(long jarg1, ConnRef jarg1_, long jarg2, long jarg3);
	
	public final static native void ConnRef_makePathInvalid(long jarg1, ConnRef jarg1_);
	
	public final static native long ConnRef_router(long jarg1, ConnRef jarg1_);
	
	public final static native void ConnRef_setHateCrossings(long jarg1, ConnRef jarg1_, boolean jarg2);
	
	public final static native boolean ConnRef_doesHateCrossings(long jarg1, ConnRef jarg1_);
	
	public final static native long new_PointRep(long jarg1);
	
	public final static native boolean PointRep_follow_inner(long jarg1, PointRep jarg1_, long jarg2, PointRep jarg2_);
	
	public final static native void PointRep_point_set(long jarg1, PointRep jarg1_, long jarg2);
	
	public final static native long PointRep_point_get(long jarg1, PointRep jarg1_);
	
	public final static native void PointRep_inner_set_set(long jarg1, PointRep jarg1_, long jarg2);
	
	public final static native long PointRep_inner_set_get(long jarg1, PointRep jarg1_);
	
	public final static native void delete_PointRep(long jarg1);
	
	public final static native long new_PtOrder();
	
	public final static native void delete_PtOrder(long jarg1);
	
	public final static native boolean PtOrder_addPoints(long jarg1, PtOrder jarg1_, long jarg2, long jarg3, boolean jarg4);
	
	public final static native void PtOrder_sort(long jarg1, PtOrder jarg1_);
	
	public final static native void PtOrder_connList_set(long jarg1, PtOrder jarg1_, long jarg2);
	
	public final static native long PtOrder_connList_get(long jarg1, PtOrder jarg1_);
	
	public final static native int countRealCrossings__SWIG_0(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_, int jarg4, boolean jarg5,
						boolean jarg6, long jarg7, long jarg8, long jarg9, long jarg10);
	
	public final static native int countRealCrossings__SWIG_1(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_, int jarg4, boolean jarg5,
						boolean jarg6, long jarg7, long jarg8, long jarg9);
	
	public final static native int countRealCrossings__SWIG_2(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_, int jarg4, boolean jarg5,
						boolean jarg6, long jarg7, long jarg8);
	
	public final static native int countRealCrossings__SWIG_3(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_, int jarg4, boolean jarg5,
						boolean jarg6, long jarg7);
	
	public final static native int countRealCrossings__SWIG_4(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_, int jarg4, boolean jarg5,
						boolean jarg6);
	
	public final static native int countRealCrossings__SWIG_5(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_, int jarg4, boolean jarg5);
	
	public final static native void splitBranchingSegments(long jarg1, Polygon jarg1_, boolean jarg2, long jarg3, Polygon jarg3_);
	
	public final static native boolean validateBendPoint(long jarg1, long jarg2, long jarg3);
	
	public final static native double dist(long jarg1, long jarg2);
	
	public final static native double totalLength(long jarg1);
	
	public final static native double angle(long jarg1, long jarg2, long jarg3);
	
	public final static native boolean segmentIntersect(long jarg1, long jarg2, long jarg3, long jarg4);
	
	public final static native boolean segmentShapeIntersect(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
	
	public final static native boolean inPoly__SWIG_0(long jarg1, long jarg2, boolean jarg3);
	
	public final static native boolean inPoly__SWIG_1(long jarg1, long jarg2);
	
	public final static native boolean inPolyGen(long jarg1, long jarg2);
	
	public final static native boolean inValidRegion(boolean jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
	
	public final static native int cornerSide(long jarg1, long jarg2, long jarg3, long jarg4);
	
	public final static native boolean pointOnLine__SWIG_0(long jarg1, long jarg2, long jarg3, double jarg4);
	
	public final static native boolean pointOnLine__SWIG_1(long jarg1, long jarg2, long jarg3);
	
	public final static native boolean inBetween(long jarg1, long jarg2, long jarg3);
	
	public final static native int vecDir__SWIG_0(long jarg1, long jarg2, long jarg3, double jarg4);
	
	public final static native int vecDir__SWIG_1(long jarg1, long jarg2, long jarg3);
	
	public final static native long projection(long jarg1, long jarg2, long jarg3);
	
	public final static native int DONT_INTERSECT_get();
	
	public final static native int DO_INTERSECT_get();
	
	public final static native int PARALLEL_get();
	
	public final static native int segmentIntersectPoint(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
	
	public final static native int rayIntersectPoint(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
	
	public final static native long new_Point__SWIG_0();
	
	public final static native long new_Point__SWIG_1(double jarg1, double jarg2);
	
	public final static native void Point_x_set(long jarg1, Point jarg1_, double jarg2);
	
	public final static native double Point_x_get(long jarg1, Point jarg1_);
	
	public final static native void Point_y_set(long jarg1, Point jarg1_, double jarg2);
	
	public final static native double Point_y_get(long jarg1, Point jarg1_);
	
	public final static native void Point_id_set(long jarg1, Point jarg1_, long jarg2);
	
	public final static native long Point_id_get(long jarg1, Point jarg1_);
	
	public final static native void Point_vn_set(long jarg1, Point jarg1_, int jarg2);
	
	public final static native int Point_vn_get(long jarg1, Point jarg1_);
	
	public final static native void delete_Point(long jarg1);
	
	public final static native int kUnassignedVertexNumber_get();
	
	public final static native void delete_PolygonInterface(long jarg1);
	
	public final static native void PolygonInterface_clear(long jarg1, PolygonInterface jarg1_);
	
	public final static native boolean PolygonInterface_empty(long jarg1, PolygonInterface jarg1_);
	
	public final static native int PolygonInterface_size(long jarg1, PolygonInterface jarg1_);
	
	public final static native int PolygonInterface_id(long jarg1, PolygonInterface jarg1_);
	
	public final static native long PolygonInterface_at(long jarg1, PolygonInterface jarg1_, int jarg2);
	
	public final static native void Avoid_Edge_a_set(long jarg1, Avoid_Edge jarg1_, long jarg2, Point jarg2_);
	
	public final static native long Avoid_Edge_a_get(long jarg1, Avoid_Edge jarg1_);
	
	public final static native void Avoid_Edge_b_set(long jarg1, Avoid_Edge jarg1_, long jarg2, Point jarg2_);
	
	public final static native long Avoid_Edge_b_get(long jarg1, Avoid_Edge jarg1_);
	
	public final static native long new_Avoid_Edge();
	
	public final static native void delete_Avoid_Edge(long jarg1);
	
	public final static native long new_Polygon__SWIG_0();
	
	public final static native long new_Polygon__SWIG_1(int jarg1);
	
	public final static native long new_Polygon__SWIG_2(long jarg1, PolygonInterface jarg1_);
	
	public final static native void Polygon_clear(long jarg1, Polygon jarg1_);
	
	public final static native boolean Polygon_empty(long jarg1, Polygon jarg1_);
	
	public final static native int Polygon_size(long jarg1, Polygon jarg1_);
	
	public final static native int Polygon_id(long jarg1, Polygon jarg1_);
	
	public final static native long Polygon_at(long jarg1, Polygon jarg1_, int jarg2);
	
	public final static native long Polygon_curvedPolyline(long jarg1, Polygon jarg1_, double jarg2);
	
	public final static native void Polygon__id_set(long jarg1, Polygon jarg1_, int jarg2);
	
	public final static native int Polygon__id_get(long jarg1, Polygon jarg1_);
	
	public final static native void Polygon_ps_set(long jarg1, Polygon jarg1_, long jarg2);
	
	public final static native long Polygon_ps_get(long jarg1, Polygon jarg1_);
	
	public final static native void Polygon_ts_set(long jarg1, Polygon jarg1_, long jarg2);
	
	public final static native long Polygon_ts_get(long jarg1, Polygon jarg1_);
	
	public final static native void delete_Polygon(long jarg1);
	
	public final static native long new_ReferencingPolygon__SWIG_0();
	
	public final static native long new_ReferencingPolygon__SWIG_1(long jarg1, Polygon jarg1_, long jarg2, Router jarg2_);
	
	public final static native void ReferencingPolygon_clear(long jarg1, ReferencingPolygon jarg1_);
	
	public final static native boolean ReferencingPolygon_empty(long jarg1, ReferencingPolygon jarg1_);
	
	public final static native int ReferencingPolygon_size(long jarg1, ReferencingPolygon jarg1_);
	
	public final static native int ReferencingPolygon_id(long jarg1, ReferencingPolygon jarg1_);
	
	public final static native long ReferencingPolygon_at(long jarg1, ReferencingPolygon jarg1_, int jarg2);
	
	public final static native void ReferencingPolygon__id_set(long jarg1, ReferencingPolygon jarg1_, int jarg2);
	
	public final static native int ReferencingPolygon__id_get(long jarg1, ReferencingPolygon jarg1_);
	
	public final static native void ReferencingPolygon_ps_set(long jarg1, ReferencingPolygon jarg1_, long jarg2);
	
	public final static native long ReferencingPolygon_ps_get(long jarg1, ReferencingPolygon jarg1_);
	
	public final static native void delete_ReferencingPolygon(long jarg1);
	
	public final static native long runningTo_get();
	
	public final static native long runningFrom_get();
	
	public final static native long runningToAndFrom_get();
	
	public final static native long new_Router();
	
	public final static native void Router_shapeRefs_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_shapeRefs_get(long jarg1, Router jarg1_);
	
	public final static native void Router_connRefs_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_connRefs_get(long jarg1, Router jarg1_);
	
	public final static native void Router_clusterRefs_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_clusterRefs_get(long jarg1, Router jarg1_);
	
	public final static native void Router_visGraph_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_visGraph_get(long jarg1, Router jarg1_);
	
	public final static native void Router_invisGraph_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_invisGraph_get(long jarg1, Router jarg1_);
	
	public final static native void Router_contains_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_contains_get(long jarg1, Router jarg1_);
	
	public final static native void Router_vertices_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_vertices_get(long jarg1, Router jarg1_);
	
	public final static native void Router_enclosingClusters_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_enclosingClusters_get(long jarg1, Router jarg1_);
	
	public final static native void Router_PartialTime_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_PartialTime_get(long jarg1, Router jarg1_);
	
	public final static native void Router_SimpleRouting_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_SimpleRouting_get(long jarg1, Router jarg1_);
	
	public final static native void Router_segmt_penalty_set(long jarg1, Router jarg1_, double jarg2);
	
	public final static native double Router_segmt_penalty_get(long jarg1, Router jarg1_);
	
	public final static native void Router_angle_penalty_set(long jarg1, Router jarg1_, double jarg2);
	
	public final static native double Router_angle_penalty_get(long jarg1, Router jarg1_);
	
	public final static native void Router_crossing_penalty_set(long jarg1, Router jarg1_, double jarg2);
	
	public final static native double Router_crossing_penalty_get(long jarg1, Router jarg1_);
	
	public final static native void Router_cluster_crossing_penalty_set(long jarg1, Router jarg1_, double jarg2);
	
	public final static native double Router_cluster_crossing_penalty_get(long jarg1, Router jarg1_);
	
	public final static native void Router_UseAStarSearch_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_UseAStarSearch_get(long jarg1, Router jarg1_);
	
	public final static native void Router_IgnoreRegions_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_IgnoreRegions_get(long jarg1, Router jarg1_);
	
	public final static native void Router_SelectiveReroute_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_SelectiveReroute_get(long jarg1, Router jarg1_);
	
	public final static native void Router_IncludeEndpoints_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_IncludeEndpoints_get(long jarg1, Router jarg1_);
	
	public final static native void Router_UseLeesAlgorithm_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_UseLeesAlgorithm_get(long jarg1, Router jarg1_);
	
	public final static native void Router_InvisibilityGrph_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_InvisibilityGrph_get(long jarg1, Router jarg1_);
	
	public final static native void Router_ConsolidateMoves_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_ConsolidateMoves_get(long jarg1, Router jarg1_);
	
	public final static native void Router_PartialFeedback_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_PartialFeedback_get(long jarg1, Router jarg1_);
	
	public final static native void Router_RubberBandRouting_set(long jarg1, Router jarg1_, boolean jarg2);
	
	public final static native boolean Router_RubberBandRouting_get(long jarg1, Router jarg1_);
	
	public final static native void Router_timers_set(long jarg1, Router jarg1_, long jarg2);
	
	public final static native long Router_timers_get(long jarg1, Router jarg1_);
	
	public final static native void Router_st_checked_edges_set(long jarg1, Router jarg1_, int jarg2);
	
	public final static native int Router_st_checked_edges_get(long jarg1, Router jarg1_);
	
	public final static native void Router_addShape(long jarg1, Router jarg1_, long jarg2);
	
	public final static native void Router_delShape(long jarg1, Router jarg1_, long jarg2);
	
	public final static native void Router_moveShape__SWIG_0(long jarg1, Router jarg1_, long jarg2, long jarg3, Polygon jarg3_, boolean jarg4);
	
	public final static native void Router_moveShape__SWIG_1(long jarg1, Router jarg1_, long jarg2, long jarg3, Polygon jarg3_);
	
	public final static native void Router_processMoves(long jarg1, Router jarg1_);
	
	public final static native void Router_addCluster(long jarg1, Router jarg1_, long jarg2);
	
	public final static native void Router_delCluster(long jarg1, Router jarg1_, long jarg2);
	
	public final static native void Router_attachedConns(long jarg1, Router jarg1_, long jarg2, long jarg3, long jarg4);
	
	public final static native void Router_attachedShapes(long jarg1, Router jarg1_, long jarg2, long jarg3, long jarg4);
	
	public final static native void Router_markConnectors(long jarg1, Router jarg1_, long jarg2);
	
	public final static native void Router_generateContains(long jarg1, Router jarg1_, long jarg2);
	
	public final static native void Router_printInfo(long jarg1, Router jarg1_);
	
	public final static native void delete_Router(long jarg1);
	
	public final static native long new_ShapeRef(long jarg1, Router jarg1_, long jarg2, long jarg3, Polygon jarg3_);
	
	public final static native void delete_ShapeRef(long jarg1);
	
	public final static native void ShapeRef_setNewPoly(long jarg1, ShapeRef jarg1_, long jarg2, Polygon jarg2_);
	
	public final static native long ShapeRef_firstVert(long jarg1, ShapeRef jarg1_);
	
	public final static native long ShapeRef_lastVert(long jarg1, ShapeRef jarg1_);
	
	public final static native long ShapeRef_id(long jarg1, ShapeRef jarg1_);
	
	public final static native long ShapeRef_poly(long jarg1, ShapeRef jarg1_);
	
	public final static native long ShapeRef_router(long jarg1, ShapeRef jarg1_);
	
	public final static native void ShapeRef_boundingBox(long jarg1, ShapeRef jarg1_, long jarg2, Avoid_Edge jarg2_);
	
	public final static native void ShapeRef_makeActive(long jarg1, ShapeRef jarg1_);
	
	public final static native void ShapeRef_makeInactive(long jarg1, ShapeRef jarg1_);
	
	public final static native void ShapeRef_removeFromGraph(long jarg1, ShapeRef jarg1_);
	
	public final static native void ShapeRef_markForMove(long jarg1, ShapeRef jarg1_);
	
	public final static native void ShapeRef_clearMoveMark(long jarg1, ShapeRef jarg1_);
	
	public final static native long ShapeRef_getPointVertex(long jarg1, ShapeRef jarg1_, long jarg2, Point jarg2_);
	
	public final static native long SWIGRectangularClusterUpcast(long jarg1);
	
	public final static native long SWIGRootClusterUpcast(long jarg1);
	
	public final static native long SWIGConvexClusterUpcast(long jarg1);
	
	public final static native long SWIGBoundaryConstraintUpcast(long jarg1);
	
	public final static native long SWIGAlignmentConstraintUpcast(long jarg1);
	
	public final static native long SWIGSeparationConstraintUpcast(long jarg1);
	
	public final static native long SWIGOrthogonalEdgeConstraintUpcast(long jarg1);
	
	public final static native long SWIGMultiSeparationConstraintUpcast(long jarg1);
	
	public final static native long SWIGDistributionConstraintUpcast(long jarg1);
	
	public final static native long SWIGPageBoundaryConstraintsUpcast(long jarg1);
	
	public final static native long SWIGPolygonUpcast(long jarg1);
	
	public final static native long SWIGReferencingPolygonUpcast(long jarg1);
}
