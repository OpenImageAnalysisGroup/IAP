/*
 * ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * -----------------------------------------------------------------------------
 */

package colajava;

public class Rectangle {
	private long swigCPtr;
	protected boolean swigCMemOwn;
	
	protected Rectangle(long cPtr, boolean cMemoryOwn) {
		swigCMemOwn = cMemoryOwn;
		swigCPtr = cPtr;
	}
	
	protected static long getCPtr(Rectangle obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}
	
	@Override
	protected void finalize() {
		delete();
	}
	
	public synchronized void delete() {
		if (swigCPtr != 0 && swigCMemOwn) {
			swigCMemOwn = false;
			colaJNI.delete_Rectangle(swigCPtr);
		}
		swigCPtr = 0;
	}
	
	public static void setXBorder(double value) {
		colaJNI.Rectangle_xBorder_set(value);
	}
	
	public static double getXBorder() {
		return colaJNI.Rectangle_xBorder_get();
	}
	
	public static void setYBorder(double value) {
		colaJNI.Rectangle_yBorder_set(value);
	}
	
	public static double getYBorder() {
		return colaJNI.Rectangle_yBorder_get();
	}
	
	public Rectangle(double x, double X, double y, double Y, boolean allowOverlap) {
		this(colaJNI.new_Rectangle__SWIG_0(x, X, y, Y, allowOverlap), true);
	}
	
	public Rectangle(double x, double X, double y, double Y) {
		this(colaJNI.new_Rectangle__SWIG_1(x, X, y, Y), true);
	}
	
	public Rectangle(Rectangle Other) {
		this(colaJNI.new_Rectangle__SWIG_2(Rectangle.getCPtr(Other), Other), true);
	}
	
	public Rectangle() {
		this(colaJNI.new_Rectangle__SWIG_3(), true);
	}
	
	public void reset(long d, double x, double X) {
		colaJNI.Rectangle_reset(swigCPtr, this, d, x, X);
	}
	
	public double getMaxX() {
		return colaJNI.Rectangle_getMaxX(swigCPtr, this);
	}
	
	public double getMaxY() {
		return colaJNI.Rectangle_getMaxY(swigCPtr, this);
	}
	
	public double getMinX() {
		return colaJNI.Rectangle_getMinX(swigCPtr, this);
	}
	
	public double getMinY() {
		return colaJNI.Rectangle_getMinY(swigCPtr, this);
	}
	
	public double getMinD(long d) {
		return colaJNI.Rectangle_getMinD(swigCPtr, this, d);
	}
	
	public double getMaxD(long d) {
		return colaJNI.Rectangle_getMaxD(swigCPtr, this, d);
	}
	
	public double getCentreX() {
		return colaJNI.Rectangle_getCentreX(swigCPtr, this);
	}
	
	public double getCentreY() {
		return colaJNI.Rectangle_getCentreY(swigCPtr, this);
	}
	
	public double getCentreD(long d) {
		return colaJNI.Rectangle_getCentreD(swigCPtr, this, d);
	}
	
	public double width() {
		return colaJNI.Rectangle_width(swigCPtr, this);
	}
	
	public double height() {
		return colaJNI.Rectangle_height(swigCPtr, this);
	}
	
	public double length(long d) {
		return colaJNI.Rectangle_length(swigCPtr, this, d);
	}
	
	public void set_width(double w) {
		colaJNI.Rectangle_set_width(swigCPtr, this, w);
	}
	
	public void set_height(double h) {
		colaJNI.Rectangle_set_height(swigCPtr, this, h);
	}
	
	public void moveCentreD(long d, double p) {
		colaJNI.Rectangle_moveCentreD(swigCPtr, this, d, p);
	}
	
	public void moveCentreX(double x) {
		colaJNI.Rectangle_moveCentreX(swigCPtr, this, x);
	}
	
	public void moveCentreY(double y) {
		colaJNI.Rectangle_moveCentreY(swigCPtr, this, y);
	}
	
	public void moveCentre(double x, double y) {
		colaJNI.Rectangle_moveCentre(swigCPtr, this, x, y);
	}
	
	public void moveMinX(double x) {
		colaJNI.Rectangle_moveMinX(swigCPtr, this, x);
	}
	
	public void moveMinY(double y) {
		colaJNI.Rectangle_moveMinY(swigCPtr, this, y);
	}
	
	public double overlapD(long d, Rectangle r) {
		return colaJNI.Rectangle_overlapD(swigCPtr, this, d, Rectangle.getCPtr(r), r);
	}
	
	public double overlapX(Rectangle r) {
		return colaJNI.Rectangle_overlapX(swigCPtr, this, Rectangle.getCPtr(r), r);
	}
	
	public double overlapY(Rectangle r) {
		return colaJNI.Rectangle_overlapY(swigCPtr, this, Rectangle.getCPtr(r), r);
	}
	
	public boolean allowOverlap() {
		return colaJNI.Rectangle_allowOverlap(swigCPtr, this);
	}
	
	public void offset(double dx, double dy) {
		colaJNI.Rectangle_offset(swigCPtr, this, dx, dy);
	}
	
	public void lineIntersections(double x1, double y1, double x2, double y2, RectangleIntersections ri) {
		colaJNI.Rectangle_lineIntersections(swigCPtr, this, x1, y1, x2, y2, RectangleIntersections.getCPtr(ri), ri);
	}
	
	public boolean inside(double x, double y) {
		return colaJNI.Rectangle_inside(swigCPtr, this, x, y);
	}
	
	public boolean overlaps(double x1, double y1, double x2, double y2) {
		return colaJNI.Rectangle_overlaps(swigCPtr, this, x1, y1, x2, y2);
	}
	
	public void routeAround(double x1, double y1, double x2, double y2, SWIGTYPE_p_std__vectorTdouble_t xs, SWIGTYPE_p_std__vectorTdouble_t ys) {
		colaJNI.Rectangle_routeAround(swigCPtr, this, x1, y1, x2, y2, SWIGTYPE_p_std__vectorTdouble_t.getCPtr(xs), SWIGTYPE_p_std__vectorTdouble_t.getCPtr(ys));
	}
	
}
