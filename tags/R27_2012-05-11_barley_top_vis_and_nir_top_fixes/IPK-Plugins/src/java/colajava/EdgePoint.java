/*
 * ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * -----------------------------------------------------------------------------
 */

package colajava;

public class EdgePoint {
	private long swigCPtr;
	protected boolean swigCMemOwn;
	
	protected EdgePoint(long cPtr, boolean cMemoryOwn) {
		swigCMemOwn = cMemoryOwn;
		swigCPtr = cPtr;
	}
	
	protected static long getCPtr(EdgePoint obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}
	
	@Override
	protected void finalize() {
		delete();
	}
	
	public synchronized void delete() {
		if (swigCPtr != 0 && swigCMemOwn) {
			swigCMemOwn = false;
			colaJNI.delete_EdgePoint(swigCPtr);
		}
		swigCPtr = 0;
	}
	
	public void setNode(Node value) {
		colaJNI.EdgePoint_node_set(swigCPtr, this, Node.getCPtr(value), value);
	}
	
	public Node getNode() {
		long cPtr = colaJNI.EdgePoint_node_get(swigCPtr, this);
		return (cPtr == 0) ? null : new Node(cPtr, false);
	}
	
	public void setRectIntersect(EdgePoint.RectIntersect value) {
		colaJNI.EdgePoint_rectIntersect_set(swigCPtr, this, value.swigValue());
	}
	
	public EdgePoint.RectIntersect getRectIntersect() {
		return EdgePoint.RectIntersect.swigToEnum(colaJNI.EdgePoint_rectIntersect_get(swigCPtr, this));
	}
	
	public EdgePoint(Node n, EdgePoint.RectIntersect i) {
		this(colaJNI.new_EdgePoint(Node.getCPtr(n), n, i.swigValue()), true);
	}
	
	public double pos(Dim dim) {
		return colaJNI.EdgePoint_pos(swigCPtr, this, dim.swigValue());
	}
	
	public double posX() {
		return colaJNI.EdgePoint_posX(swigCPtr, this);
	}
	
	public double posY() {
		return colaJNI.EdgePoint_posY(swigCPtr, this);
	}
	
	public int rectIntersectAsVertexNumber() {
		return colaJNI.EdgePoint_rectIntersectAsVertexNumber(swigCPtr, this);
	}
	
	public boolean uniqueCheck(EdgePoint e) {
		return colaJNI.EdgePoint_uniqueCheck(swigCPtr, this, EdgePoint.getCPtr(e), e);
	}
	
	public boolean isEnd() {
		return colaJNI.EdgePoint_isEnd(swigCPtr, this);
	}
	
	public boolean assertConvexBend() {
		return colaJNI.EdgePoint_assertConvexBend(swigCPtr, this);
	}
	
	public double offset() {
		return colaJNI.EdgePoint_offset(swigCPtr, this);
	}
	
	public final static class RectIntersect {
		public final static RectIntersect TR = new RectIntersect("TR");
		public final static RectIntersect BR = new RectIntersect("BR");
		public final static RectIntersect BL = new RectIntersect("BL");
		public final static RectIntersect TL = new RectIntersect("TL");
		public final static RectIntersect CENTRE = new RectIntersect("CENTRE");
		
		public final int swigValue() {
			return swigValue;
		}
		
		@Override
		public String toString() {
			return swigName;
		}
		
		public static RectIntersect swigToEnum(int swigValue) {
			if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
				return swigValues[swigValue];
			for (int i = 0; i < swigValues.length; i++)
				if (swigValues[i].swigValue == swigValue)
					return swigValues[i];
			throw new IllegalArgumentException("No enum " + RectIntersect.class + " with value " + swigValue);
		}
		
		private RectIntersect(String swigName) {
			this.swigName = swigName;
			this.swigValue = swigNext++;
		}
		
		private RectIntersect(String swigName, int swigValue) {
			this.swigName = swigName;
			this.swigValue = swigValue;
			swigNext = swigValue + 1;
		}
		
		private RectIntersect(String swigName, RectIntersect swigEnum) {
			this.swigName = swigName;
			this.swigValue = swigEnum.swigValue;
			swigNext = this.swigValue + 1;
		}
		
		private static RectIntersect[] swigValues = { TR, BR, BL, TL, CENTRE };
		private static int swigNext = 0;
		private final int swigValue;
		private final String swigName;
	}
	
}
