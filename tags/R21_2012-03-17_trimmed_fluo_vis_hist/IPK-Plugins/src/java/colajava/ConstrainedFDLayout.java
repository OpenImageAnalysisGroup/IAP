/*
 * ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * -----------------------------------------------------------------------------
 */

package colajava;

public class ConstrainedFDLayout {
	private long swigCPtr;
	protected boolean swigCMemOwn;
	
	protected ConstrainedFDLayout(long cPtr, boolean cMemoryOwn) {
		swigCMemOwn = cMemoryOwn;
		swigCPtr = cPtr;
	}
	
	protected static long getCPtr(ConstrainedFDLayout obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}
	
	@Override
	protected void finalize() {
		delete();
	}
	
	public synchronized void delete() {
		if (swigCPtr != 0 && swigCMemOwn) {
			swigCMemOwn = false;
			colaJNI.delete_ConstrainedFDLayout(swigCPtr);
		}
		swigCPtr = 0;
	}
	
	public ConstrainedFDLayout(RectPtrVector rs, EdgeVector es, double idealLength, SWIGTYPE_p_double eLengths, TestConvergence done, PreIteration preIteration) {
		this(colaJNI.new_ConstrainedFDLayout__SWIG_0(RectPtrVector.getCPtr(rs), rs, EdgeVector.getCPtr(es), es, idealLength, SWIGTYPE_p_double.getCPtr(eLengths),
							TestConvergence.getCPtr(done), done, PreIteration.getCPtr(preIteration), preIteration), true);
	}
	
	public ConstrainedFDLayout(RectPtrVector rs, EdgeVector es, double idealLength, SWIGTYPE_p_double eLengths, TestConvergence done) {
		this(colaJNI.new_ConstrainedFDLayout__SWIG_1(RectPtrVector.getCPtr(rs), rs, EdgeVector.getCPtr(es), es, idealLength, SWIGTYPE_p_double.getCPtr(eLengths),
							TestConvergence.getCPtr(done), done), true);
	}
	
	public ConstrainedFDLayout(RectPtrVector rs, EdgeVector es, double idealLength, SWIGTYPE_p_double eLengths) {
		this(
							colaJNI.new_ConstrainedFDLayout__SWIG_2(RectPtrVector.getCPtr(rs), rs, EdgeVector.getCPtr(es), es, idealLength, SWIGTYPE_p_double
												.getCPtr(eLengths)), true);
	}
	
	public ConstrainedFDLayout(RectPtrVector rs, EdgeVector es, double idealLength) {
		this(colaJNI.new_ConstrainedFDLayout__SWIG_3(RectPtrVector.getCPtr(rs), rs, EdgeVector.getCPtr(es), es, idealLength), true);
	}
	
	public void run(boolean x, boolean y) {
		colaJNI.ConstrainedFDLayout_run__SWIG_0(swigCPtr, this, x, y);
	}
	
	public void run(boolean x) {
		colaJNI.ConstrainedFDLayout_run__SWIG_1(swigCPtr, this, x);
	}
	
	public void run() {
		colaJNI.ConstrainedFDLayout_run__SWIG_2(swigCPtr, this);
	}
	
	public void runOnce(boolean x, boolean y) {
		colaJNI.ConstrainedFDLayout_runOnce__SWIG_0(swigCPtr, this, x, y);
	}
	
	public void runOnce(boolean x) {
		colaJNI.ConstrainedFDLayout_runOnce__SWIG_1(swigCPtr, this, x);
	}
	
	public void runOnce() {
		colaJNI.ConstrainedFDLayout_runOnce__SWIG_2(swigCPtr, this);
	}
	
	public void setXConstraints(CompoundConstraintsVector ccsx) {
		colaJNI.ConstrainedFDLayout_setXConstraints(swigCPtr, this, CompoundConstraintsVector.getCPtr(ccsx), ccsx);
	}
	
	public void setYConstraints(CompoundConstraintsVector ccsy) {
		colaJNI.ConstrainedFDLayout_setYConstraints(swigCPtr, this, CompoundConstraintsVector.getCPtr(ccsy), ccsy);
	}
	
	public void setTopology(TopologyNodePtrVector tnodes, TopologyEdgePtrVector routes) {
		colaJNI.ConstrainedFDLayout_setTopology(swigCPtr, this, TopologyNodePtrVector.getCPtr(tnodes), tnodes, TopologyEdgePtrVector.getCPtr(routes), routes);
	}
	
	public void setDesiredPositions(ColaDesiredPositions desiredPositions) {
		colaJNI.ConstrainedFDLayout_setDesiredPositions(swigCPtr, this, ColaDesiredPositions.getCPtr(desiredPositions), desiredPositions);
	}
	
	public void setUnsatisfiableConstraintInfo(SWIGTYPE_p_UnsatisfiableConstraintInfos unsatisfiableX, SWIGTYPE_p_UnsatisfiableConstraintInfos unsatisfiableY) {
		colaJNI.ConstrainedFDLayout_setUnsatisfiableConstraintInfo(swigCPtr, this, SWIGTYPE_p_UnsatisfiableConstraintInfos.getCPtr(unsatisfiableX),
							SWIGTYPE_p_UnsatisfiableConstraintInfos.getCPtr(unsatisfiableY));
	}
	
	public double computeStress() {
		return colaJNI.ConstrainedFDLayout_computeStress(swigCPtr, this);
	}
	
}
