package de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.navigation_actions;

import info.clearthought.layout.TableLayout;

import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.JComponent;

import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.DBEnavigationHelper;
import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.ImageAnalysisCommandManager;
import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.MainPanelComponent;
import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.interfaces.NavigationAction;
import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.navigation_model.NavigationGraphicalEntity;
import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.util.ExperimentReference;
import de.ipk_gatersleben.ag_ba.graffiti.plugins.gui.util.MyExperimentInfoPanel;
import de.ipk_gatersleben.ag_nw.graffiti.plugins.gui.editing_tools.script_helper.ExperimentHeaderInterface;

/**
 * @author klukas
 * 
 */
public class DBEexperiment extends AbstractNavigationAction {
	/**
	 * 
	 */
	private final ExperimentHeaderInterface ei;
	/**
	 * 
	 */
	private final String pass;
	/**
	 * 
	 */
	private final String login;
	private NavigationGraphicalEntity src;
	private final ArrayList<NavigationGraphicalEntity> actions = new ArrayList<NavigationGraphicalEntity>();
	private final MyExperimentInfoPanel info = new MyExperimentInfoPanel();

	/**
	 * @param ei
	 * @param pass
	 * @param login
	 */
	public DBEexperiment(ExperimentHeaderInterface ei, String pass, String login) {
		super("Load DBE Experiment");
		this.ei = ei;
		this.pass = pass;
		this.login = login;
	}

	@Override
	public void performActionCalculateResults(NavigationGraphicalEntity src) {
		this.src = src;
		info.setBorder(BorderFactory.createEmptyBorder(10, 10, 20, 10));
		// info.setOpaque(false);
		// info.setBackground(new Color(255,255,255,120));
		info.setExperimentInfo(login, pass, ei, false, null);
		actions.clear();
	}

	@Override
	public ArrayList<NavigationGraphicalEntity> getResultNewNavigationSet(ArrayList<NavigationGraphicalEntity> currentSet) {
		ArrayList<NavigationGraphicalEntity> res = new ArrayList<NavigationGraphicalEntity>(currentSet);
		res.add(src);
		return res;
	}

	@Override
	public ArrayList<NavigationGraphicalEntity> getResultNewActionSet() {
		actions.add(FileManager.getFileManagerEntity(login, pass, ei.getExperimentname()));
		if (ei.getImagefiles() > 0) {
			// actions.add(ImageAnalysisPipeline.getEntity(login, pass,
			// ei.experimentName, "Phenotype Analysis"));
			for (NavigationGraphicalEntity ne : ImageAnalysisCommandManager.getCommands(login, pass,
					new ExperimentReference(login, pass, ei.getExperimentname())))
				actions.add(ne);
		}
		if (ei.getImportusername().equals(login))
			actions.add(Trash.getTrashEntity(login, pass, ei.getExperimentname()));
		for (NavigationGraphicalEntity ne : DBEnavigationHelper.getProcessExperimentDataWithVantedEntities(login, pass,
				new ExperimentReference(login, pass, ei.getExperimentname()))) {
			if (ne.getTitle().contains("Put data")) {
				ne.setTitle("Analyse Data in VANTED");
				actions.add(ne);
			}
		}
		return actions;
	}

	@Override
	public MainPanelComponent getResultMainPanel() {
		JComponent jp = TableLayout.getSplit(info, null, TableLayout.PREFERRED, TableLayout.FILL);
		jp.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		jp = TableLayout.getSplitVertical(jp, null, TableLayout.PREFERRED, TableLayout.FILL);
		jp = TableLayout.getSplitVertical(jp, null, TableLayout.PREFERRED, TableLayout.FILL);

		return new MainPanelComponent(jp);
	}

	public static NavigationGraphicalEntity getExperimentButton(final String login, final String pass,
			final ExperimentHeaderInterface ei) {
		NavigationAction action = new DBEexperiment(ei, pass, login);
		NavigationGraphicalEntity exp = new NavigationGraphicalEntity(action, ei.getExperimentname(),
				"img/ext/image-x-generic.png", "img/ext/image-x-generic-off.png");
		exp.setToolTipText("<html><table>" + "<tr><td>Experiment</td><td>" + ei.getExperimentname() + "</td></tr>"
				+ "<tr><td>Type</td><td>" + ei.getExperimentType() + "</td></tr>" + "<tr><td>Owner</td><td>"
				+ ei.getImportusername() + "</td></tr>" + "<tr><td>Import Time</td><td>" + ei.getStartdate() + "</td></tr>"
				+ "<tr><td>Remark</td><td>" + ei.getRemark() + "</td></tr>");
		return exp;
	}
}