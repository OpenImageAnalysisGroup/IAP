/*
 * ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * -----------------------------------------------------------------------------
 */

package colajava;

public class cola {
	public static void doubleArraySet(SWIGTYPE_p_double a, int i, double val) {
		colaJNI.doubleArraySet(SWIGTYPE_p_double.getCPtr(a), i, val);
	}
	
	public static double doubleArrayGet(SWIGTYPE_p_double a, int i) {
		return colaJNI.doubleArrayGet(SWIGTYPE_p_double.getCPtr(a), i);
	}
	
	public static SWIGTYPE_p_double newDoubleArray(int size) {
		long cPtr = colaJNI.newDoubleArray(size);
		return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
	}
	
	public static void deleteDoubleArray(SWIGTYPE_p_double a) {
		colaJNI.deleteDoubleArray(SWIGTYPE_p_double.getCPtr(a));
	}
	
	public static Dim conjugate(Dim d) {
		return Dim.swigToEnum(colaJNI.conjugate(d.swigValue()));
	}
	
	public static void generateXConstraints(RectPtrVector rs, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t vars, SWIGTYPE_p_std__vectorTvpsc__Constraint_p_t cs,
						boolean useNeighbourLists) {
		colaJNI.generateXConstraints(RectPtrVector.getCPtr(rs), rs, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t.getCPtr(vars),
							SWIGTYPE_p_std__vectorTvpsc__Constraint_p_t.getCPtr(cs), useNeighbourLists);
	}
	
	public static void generateYConstraints(RectPtrVector rs, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t vars, SWIGTYPE_p_std__vectorTvpsc__Constraint_p_t cs) {
		colaJNI.generateYConstraints(RectPtrVector.getCPtr(rs), rs, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t.getCPtr(vars),
							SWIGTYPE_p_std__vectorTvpsc__Constraint_p_t.getCPtr(cs));
	}
	
	public static void removeoverlaps(RectPtrVector rs) {
		colaJNI.removeoverlaps__SWIG_0(RectPtrVector.getCPtr(rs), rs);
	}
	
	public static void removeoverlaps(RectPtrVector rs, SWIGTYPE_p_std__setTunsigned_int_t fixed, boolean thirdPass) {
		colaJNI.removeoverlaps__SWIG_1(RectPtrVector.getCPtr(rs), rs, SWIGTYPE_p_std__setTunsigned_int_t.getCPtr(fixed), thirdPass);
	}
	
	public static void removeoverlaps(RectPtrVector rs, SWIGTYPE_p_std__setTunsigned_int_t fixed) {
		colaJNI.removeoverlaps__SWIG_2(RectPtrVector.getCPtr(rs), rs, SWIGTYPE_p_std__setTunsigned_int_t.getCPtr(fixed));
	}
	
	public static TestConvergence getDefaultTest() {
		long cPtr = colaJNI.defaultTest_get();
		return (cPtr == 0) ? null : new TestConvergence(cPtr, false);
	}
	
	public static Rectangle bounds(RectPtrVector rs) {
		return new Rectangle(colaJNI.bounds(RectPtrVector.getCPtr(rs), rs), true);
	}
	
	public static void dijkstra(long s, long n, SWIGTYPE_p_double d, EdgeVector es, SWIGTYPE_p_double eLengths) {
		colaJNI.dijkstra(s, n, SWIGTYPE_p_double.getCPtr(d), EdgeVector.getCPtr(es), es, SWIGTYPE_p_double.getCPtr(eLengths));
	}
	
	public static void removeClusterOverlapFast(SWIGTYPE_p_RootCluster clusterHierarchy, RectPtrVector rs, ColaLocks locks) {
		colaJNI.removeClusterOverlapFast(SWIGTYPE_p_RootCluster.getCPtr(clusterHierarchy), RectPtrVector.getCPtr(rs), rs, ColaLocks.getCPtr(locks), locks);
	}
	
	public static void convex(long n, SWIGTYPE_p_double X, SWIGTYPE_p_double Y, UnsignedVector hull) {
		colaJNI.convex__SWIG_0(n, SWIGTYPE_p_double.getCPtr(X), SWIGTYPE_p_double.getCPtr(Y), UnsignedVector.getCPtr(hull), hull);
	}
	
	public static void convex(SWIGTYPE_p_std__valarrayTdouble_t X, SWIGTYPE_p_std__valarrayTdouble_t Y, UnsignedVector hull) {
		colaJNI.convex__SWIG_1(SWIGTYPE_p_std__valarrayTdouble_t.getCPtr(X), SWIGTYPE_p_std__valarrayTdouble_t.getCPtr(Y), UnsignedVector.getCPtr(hull), hull);
	}
	
	public static void generateVariablesAndConstraints(CompoundConstraintsVector ccs, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t vars,
						SWIGTYPE_p_std__vectorTvpsc__Constraint_p_t cs) {
		colaJNI.generateVariablesAndConstraints(CompoundConstraintsVector.getCPtr(ccs), ccs, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t.getCPtr(vars),
							SWIGTYPE_p_std__vectorTvpsc__Constraint_p_t.getCPtr(cs));
	}
	
	public static void setDim(Dim value) {
		colaJNI.dim_set(value.swigValue());
	}
	
	public static Dim getDim() {
		return Dim.swigToEnum(colaJNI.dim_get());
	}
	
	public static void setNodeVariables(TopologyNodePtrVector ns, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t vs) {
		colaJNI.setNodeVariables(TopologyNodePtrVector.getCPtr(ns), ns, SWIGTYPE_p_std__vectorTvpsc__Variable_p_t.getCPtr(vs));
	}
	
	public static double crossProduct(double x0, double y0, double x1, double y1, double x2, double y2) {
		return colaJNI.crossProduct(x0, y0, x1, y1, x2, y2);
	}
	
	public static int getConnType_PolyLine() {
		return colaJNI.ConnType_PolyLine_get();
	}
	
	public static int getConnType_Orthogonal() {
		return colaJNI.ConnType_Orthogonal_get();
	}
	
	public static double getATTACH_POS_TOP() {
		return colaJNI.ATTACH_POS_TOP_get();
	}
	
	public static double getATTACH_POS_CENTER() {
		return colaJNI.ATTACH_POS_CENTER_get();
	}
	
	public static double getATTACH_POS_BOTTOM() {
		return colaJNI.ATTACH_POS_BOTTOM_get();
	}
	
	public static double getATTACH_POS_LEFT() {
		return colaJNI.ATTACH_POS_LEFT_get();
	}
	
	public static double getATTACH_POS_RIGHT() {
		return colaJNI.ATTACH_POS_RIGHT_get();
	}
	
	public static int countRealCrossings(Polygon poly, boolean polyIsConn, Polygon conn, int cIndex, boolean checkForBranchingSegments, boolean finalSegment,
						SWIGTYPE_p_std__setTAvoid__Point_t crossingPoints, SWIGTYPE_p_std__mapTVertID_Avoid__PtOrder_t pointOrders, SWIGTYPE_p_bool touches,
						SWIGTYPE_p_bool touchesAtEndpoint) {
		return colaJNI.countRealCrossings__SWIG_0(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn, cIndex, checkForBranchingSegments,
							finalSegment, SWIGTYPE_p_std__setTAvoid__Point_t.getCPtr(crossingPoints),
							SWIGTYPE_p_std__mapTVertID_Avoid__PtOrder_t.getCPtr(pointOrders), SWIGTYPE_p_bool.getCPtr(touches), SWIGTYPE_p_bool
												.getCPtr(touchesAtEndpoint));
	}
	
	public static int countRealCrossings(Polygon poly, boolean polyIsConn, Polygon conn, int cIndex, boolean checkForBranchingSegments, boolean finalSegment,
						SWIGTYPE_p_std__setTAvoid__Point_t crossingPoints, SWIGTYPE_p_std__mapTVertID_Avoid__PtOrder_t pointOrders, SWIGTYPE_p_bool touches) {
		return colaJNI.countRealCrossings__SWIG_1(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn, cIndex, checkForBranchingSegments,
							finalSegment, SWIGTYPE_p_std__setTAvoid__Point_t.getCPtr(crossingPoints),
							SWIGTYPE_p_std__mapTVertID_Avoid__PtOrder_t.getCPtr(pointOrders), SWIGTYPE_p_bool.getCPtr(touches));
	}
	
	public static int countRealCrossings(Polygon poly, boolean polyIsConn, Polygon conn, int cIndex, boolean checkForBranchingSegments, boolean finalSegment,
						SWIGTYPE_p_std__setTAvoid__Point_t crossingPoints, SWIGTYPE_p_std__mapTVertID_Avoid__PtOrder_t pointOrders) {
		return colaJNI
							.countRealCrossings__SWIG_2(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn, cIndex, checkForBranchingSegments,
												finalSegment, SWIGTYPE_p_std__setTAvoid__Point_t.getCPtr(crossingPoints), SWIGTYPE_p_std__mapTVertID_Avoid__PtOrder_t
																	.getCPtr(pointOrders));
	}
	
	public static int countRealCrossings(Polygon poly, boolean polyIsConn, Polygon conn, int cIndex, boolean checkForBranchingSegments, boolean finalSegment,
						SWIGTYPE_p_std__setTAvoid__Point_t crossingPoints) {
		return colaJNI.countRealCrossings__SWIG_3(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn, cIndex, checkForBranchingSegments,
							finalSegment, SWIGTYPE_p_std__setTAvoid__Point_t.getCPtr(crossingPoints));
	}
	
	public static int countRealCrossings(Polygon poly, boolean polyIsConn, Polygon conn, int cIndex, boolean checkForBranchingSegments, boolean finalSegment) {
		return colaJNI.countRealCrossings__SWIG_4(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn, cIndex, checkForBranchingSegments,
							finalSegment);
	}
	
	public static int countRealCrossings(Polygon poly, boolean polyIsConn, Polygon conn, int cIndex, boolean checkForBranchingSegments) {
		return colaJNI.countRealCrossings__SWIG_5(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn, cIndex, checkForBranchingSegments);
	}
	
	public static void splitBranchingSegments(Polygon poly, boolean polyIsConn, Polygon conn) {
		colaJNI.splitBranchingSegments(Polygon.getCPtr(poly), poly, polyIsConn, Polygon.getCPtr(conn), conn);
	}
	
	public static boolean validateBendPoint(SWIGTYPE_p_VertInf aInf, SWIGTYPE_p_VertInf bInf, SWIGTYPE_p_VertInf cInf) {
		return colaJNI.validateBendPoint(SWIGTYPE_p_VertInf.getCPtr(aInf), SWIGTYPE_p_VertInf.getCPtr(bInf), SWIGTYPE_p_VertInf.getCPtr(cInf));
	}
	
	public static double dist(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b) {
		return colaJNI.dist(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b));
	}
	
	public static double totalLength(SWIGTYPE_p_Polygon poly) {
		return colaJNI.totalLength(SWIGTYPE_p_Polygon.getCPtr(poly));
	}
	
	public static double angle(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c) {
		return colaJNI.angle(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c));
	}
	
	public static boolean segmentIntersect(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c, SWIGTYPE_p_Point d) {
		return colaJNI.segmentIntersect(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c), SWIGTYPE_p_Point.getCPtr(d));
	}
	
	public static boolean segmentShapeIntersect(SWIGTYPE_p_Point e1, SWIGTYPE_p_Point e2, SWIGTYPE_p_Point s1, SWIGTYPE_p_Point s2,
						SWIGTYPE_p_bool seenIntersectionAtEndpoint) {
		return colaJNI.segmentShapeIntersect(SWIGTYPE_p_Point.getCPtr(e1), SWIGTYPE_p_Point.getCPtr(e2), SWIGTYPE_p_Point.getCPtr(s1), SWIGTYPE_p_Point
							.getCPtr(s2), SWIGTYPE_p_bool.getCPtr(seenIntersectionAtEndpoint));
	}
	
	public static boolean inPoly(SWIGTYPE_p_Polygon poly, SWIGTYPE_p_Point q, boolean countBorder) {
		return colaJNI.inPoly__SWIG_0(SWIGTYPE_p_Polygon.getCPtr(poly), SWIGTYPE_p_Point.getCPtr(q), countBorder);
	}
	
	public static boolean inPoly(SWIGTYPE_p_Polygon poly, SWIGTYPE_p_Point q) {
		return colaJNI.inPoly__SWIG_1(SWIGTYPE_p_Polygon.getCPtr(poly), SWIGTYPE_p_Point.getCPtr(q));
	}
	
	public static boolean inPolyGen(SWIGTYPE_p_PolygonInterface poly, SWIGTYPE_p_Point q) {
		return colaJNI.inPolyGen(SWIGTYPE_p_PolygonInterface.getCPtr(poly), SWIGTYPE_p_Point.getCPtr(q));
	}
	
	public static boolean inValidRegion(boolean IgnoreRegions, SWIGTYPE_p_Point a0, SWIGTYPE_p_Point a1, SWIGTYPE_p_Point a2, SWIGTYPE_p_Point b) {
		return colaJNI.inValidRegion(IgnoreRegions, SWIGTYPE_p_Point.getCPtr(a0), SWIGTYPE_p_Point.getCPtr(a1), SWIGTYPE_p_Point.getCPtr(a2), SWIGTYPE_p_Point
							.getCPtr(b));
	}
	
	public static int cornerSide(SWIGTYPE_p_Point c1, SWIGTYPE_p_Point c2, SWIGTYPE_p_Point c3, SWIGTYPE_p_Point p) {
		return colaJNI.cornerSide(SWIGTYPE_p_Point.getCPtr(c1), SWIGTYPE_p_Point.getCPtr(c2), SWIGTYPE_p_Point.getCPtr(c3), SWIGTYPE_p_Point.getCPtr(p));
	}
	
	public static boolean pointOnLine(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c, double tolerance) {
		return colaJNI.pointOnLine__SWIG_0(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c), tolerance);
	}
	
	public static boolean pointOnLine(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c) {
		return colaJNI.pointOnLine__SWIG_1(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c));
	}
	
	public static boolean inBetween(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c) {
		return colaJNI.inBetween(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c));
	}
	
	public static int vecDir(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c, double maybeZero) {
		return colaJNI.vecDir__SWIG_0(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c), maybeZero);
	}
	
	public static int vecDir(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c) {
		return colaJNI.vecDir__SWIG_1(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c));
	}
	
	public static SWIGTYPE_p_Point projection(SWIGTYPE_p_Point a, SWIGTYPE_p_Point b, SWIGTYPE_p_Point c) {
		return new SWIGTYPE_p_Point(colaJNI.projection(SWIGTYPE_p_Point.getCPtr(a), SWIGTYPE_p_Point.getCPtr(b), SWIGTYPE_p_Point.getCPtr(c)), true);
	}
	
	public static int getDONT_INTERSECT() {
		return colaJNI.DONT_INTERSECT_get();
	}
	
	public static int getDO_INTERSECT() {
		return colaJNI.DO_INTERSECT_get();
	}
	
	public static int getPARALLEL() {
		return colaJNI.PARALLEL_get();
	}
	
	public static int segmentIntersectPoint(SWIGTYPE_p_Point a1, SWIGTYPE_p_Point a2, SWIGTYPE_p_Point b1, SWIGTYPE_p_Point b2, SWIGTYPE_p_double x,
						SWIGTYPE_p_double y) {
		return colaJNI.segmentIntersectPoint(SWIGTYPE_p_Point.getCPtr(a1), SWIGTYPE_p_Point.getCPtr(a2), SWIGTYPE_p_Point.getCPtr(b1), SWIGTYPE_p_Point
							.getCPtr(b2), SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(y));
	}
	
	public static int rayIntersectPoint(SWIGTYPE_p_Point a1, SWIGTYPE_p_Point a2, SWIGTYPE_p_Point b1, SWIGTYPE_p_Point b2, SWIGTYPE_p_double x,
						SWIGTYPE_p_double y) {
		return colaJNI.rayIntersectPoint(SWIGTYPE_p_Point.getCPtr(a1), SWIGTYPE_p_Point.getCPtr(a2), SWIGTYPE_p_Point.getCPtr(b1), SWIGTYPE_p_Point.getCPtr(b2),
							SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(y));
	}
	
	public static int getKUnassignedVertexNumber() {
		return colaJNI.kUnassignedVertexNumber_get();
	}
	
	public static long getRunningTo() {
		return colaJNI.runningTo_get();
	}
	
	public static long getRunningFrom() {
		return colaJNI.runningFrom_get();
	}
	
	public static long getRunningToAndFrom() {
		return colaJNI.runningToAndFrom_get();
	}
	
}
