package org.graffiti.plugins.ios.importers.gml;

import java_cup.runtime.Symbol;

class Sample {
	public static void main(String argv[]) throws java.io.IOException {
		Yylex yy = new Yylex(System.in);
		// Yytoken t;
		// while ((t = yy.yylex()) != null) System.out.println(t);
		Symbol t;
		while ((t = yy.next_token()) != null)
			System.out.print(t);
		System.out.println();
	}
}

class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;
	
	private int nodeCount = 0;
	private int edgeCount = 0;
	private int graphicsCount = 0;
	private int pointCount = 0;
	private int lineCount = 0;
	private int stateBeforeGraphics = -1;
	private int stateBeforePoint = -1;
	private int stateBeforeLine = -1;
	private int ignoreCount = 0;
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;
	
	Yylex(java.io.Reader reader) {
		this();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}
	
	Yylex(java.io.InputStream instream) {
		this();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}
	
	private Yylex() {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}
	
	private final int EDGESTYLE = 10;
	private final int EDGE = 3;
	private final int EDGELABELGRAPHICS = 8;
	private final int NODE = 2;
	private final int EMPTY = 11;
	private final int NODESTYLE = 9;
	private final int POINT = 6;
	private final int GRAPH = 1;
	private final int YYINITIAL = 0;
	private final int GRAPHICS = 4;
	private final int NODELABELGRAPHICS = 7;
	private final int LINE = 5;
	private final int yy_state_dtrans[] = {
						0,
						18,
						179,
						185,
						192,
						217,
						218,
						219,
						220,
						221,
						222,
						82
	};
	
	private void yybegin(int state) {
		yy_lexical_state = state;
	}
	
	private int yy_advance()
						throws java.io.IOException {
		int next_read;
		int i;
		int j;
		
		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}
		
		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
								yy_buffer_read,
								yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		
		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
								yy_buffer_read,
								yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	
	private void yy_move_end() {
		if (yy_buffer_end > yy_buffer_start &&
							'\n' == yy_buffer[yy_buffer_end - 1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
							'\r' == yy_buffer[yy_buffer_end - 1])
			yy_buffer_end--;
	}
	
	private boolean yy_last_was_cr = false;
	
	private void yy_mark_start() {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr = true;
			} else
				yy_last_was_cr = false;
		}
		yychar = yychar
							+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	
	private void yy_mark_end() {
		yy_buffer_end = yy_buffer_index;
	}
	
	private void yy_to_mark() {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
							('\r' == yy_buffer[yy_buffer_end - 1] ||
												'\n' == yy_buffer[yy_buffer_end - 1] ||
												2028/* LS */== yy_buffer[yy_buffer_end - 1] ||
							2029/* PS */== yy_buffer[yy_buffer_end - 1]);
	}
	
	private java.lang.String yytext() {
		return (new java.lang.String(yy_buffer,
							yy_buffer_start,
							yy_buffer_end - yy_buffer_start));
	}
	
	private char[] yy_double(char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2 * buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	
	private final int YY_E_INTERNAL = 0;
	private java.lang.String yy_error_string[] = {
						"Error: Internal error.\n",
						"Error: Unmatched input.\n"
	};
	
	private void yy_error(int code, boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;
		
		int commaIndex;
		String workString;
		
		int res[][] = new int[size1][size2];
		for (int i = 0; i < size1; i++) {
			for (int j = 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex == -1) ? st :
									st.substring(0, commaIndex);
				st = st.substring(commaIndex + 1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j] = Integer.parseInt(workString);
					continue;
				}
				lengthString =
									workString.substring(colonIndex + 1);
				sequenceLength = Integer.parseInt(lengthString);
				workString = workString.substring(0, colonIndex);
				sequenceInteger = Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	
	private int yy_acpt[] = {
						/* 0 */YY_NO_ANCHOR,
						/* 1 */YY_NO_ANCHOR,
						/* 2 */YY_NO_ANCHOR,
						/* 3 */YY_NO_ANCHOR,
						/* 4 */YY_NO_ANCHOR,
						/* 5 */YY_NO_ANCHOR,
						/* 6 */YY_END,
						/* 7 */YY_NOT_ACCEPT,
						/* 8 */YY_NO_ANCHOR,
						/* 9 */YY_NO_ANCHOR,
						/* 10 */YY_NO_ANCHOR,
						/* 11 */YY_NO_ANCHOR,
						/* 12 */YY_NO_ANCHOR,
						/* 13 */YY_NO_ANCHOR,
						/* 14 */YY_NO_ANCHOR,
						/* 15 */YY_END,
						/* 16 */YY_END,
						/* 17 */YY_NO_ANCHOR,
						/* 18 */YY_NO_ANCHOR,
						/* 19 */YY_NO_ANCHOR,
						/* 20 */YY_NO_ANCHOR,
						/* 21 */YY_NO_ANCHOR,
						/* 22 */YY_NO_ANCHOR,
						/* 23 */YY_NO_ANCHOR,
						/* 24 */YY_NO_ANCHOR,
						/* 25 */YY_NO_ANCHOR,
						/* 26 */YY_NO_ANCHOR,
						/* 27 */YY_NO_ANCHOR,
						/* 28 */YY_NO_ANCHOR,
						/* 29 */YY_NO_ANCHOR,
						/* 30 */YY_NO_ANCHOR,
						/* 31 */YY_NO_ANCHOR,
						/* 32 */YY_NO_ANCHOR,
						/* 33 */YY_NO_ANCHOR,
						/* 34 */YY_NO_ANCHOR,
						/* 35 */YY_NO_ANCHOR,
						/* 36 */YY_NO_ANCHOR,
						/* 37 */YY_NO_ANCHOR,
						/* 38 */YY_NO_ANCHOR,
						/* 39 */YY_NO_ANCHOR,
						/* 40 */YY_NO_ANCHOR,
						/* 41 */YY_NO_ANCHOR,
						/* 42 */YY_NO_ANCHOR,
						/* 43 */YY_NO_ANCHOR,
						/* 44 */YY_NO_ANCHOR,
						/* 45 */YY_NO_ANCHOR,
						/* 46 */YY_NO_ANCHOR,
						/* 47 */YY_NO_ANCHOR,
						/* 48 */YY_NO_ANCHOR,
						/* 49 */YY_NO_ANCHOR,
						/* 50 */YY_NO_ANCHOR,
						/* 51 */YY_NO_ANCHOR,
						/* 52 */YY_NO_ANCHOR,
						/* 53 */YY_NO_ANCHOR,
						/* 54 */YY_NO_ANCHOR,
						/* 55 */YY_NO_ANCHOR,
						/* 56 */YY_NO_ANCHOR,
						/* 57 */YY_NO_ANCHOR,
						/* 58 */YY_NO_ANCHOR,
						/* 59 */YY_NO_ANCHOR,
						/* 60 */YY_NO_ANCHOR,
						/* 61 */YY_NO_ANCHOR,
						/* 62 */YY_NO_ANCHOR,
						/* 63 */YY_NO_ANCHOR,
						/* 64 */YY_NO_ANCHOR,
						/* 65 */YY_NO_ANCHOR,
						/* 66 */YY_NO_ANCHOR,
						/* 67 */YY_NO_ANCHOR,
						/* 68 */YY_NO_ANCHOR,
						/* 69 */YY_NO_ANCHOR,
						/* 70 */YY_NO_ANCHOR,
						/* 71 */YY_NO_ANCHOR,
						/* 72 */YY_NO_ANCHOR,
						/* 73 */YY_NO_ANCHOR,
						/* 74 */YY_NO_ANCHOR,
						/* 75 */YY_NO_ANCHOR,
						/* 76 */YY_NO_ANCHOR,
						/* 77 */YY_NO_ANCHOR,
						/* 78 */YY_NO_ANCHOR,
						/* 79 */YY_NO_ANCHOR,
						/* 80 */YY_NO_ANCHOR,
						/* 81 */YY_NO_ANCHOR,
						/* 82 */YY_NO_ANCHOR,
						/* 83 */YY_NO_ANCHOR,
						/* 84 */YY_NO_ANCHOR,
						/* 85 */YY_NO_ANCHOR,
						/* 86 */YY_NO_ANCHOR,
						/* 87 */YY_NO_ANCHOR,
						/* 88 */YY_NO_ANCHOR,
						/* 89 */YY_NO_ANCHOR,
						/* 90 */YY_END,
						/* 91 */YY_NOT_ACCEPT,
						/* 92 */YY_NO_ANCHOR,
						/* 93 */YY_NO_ANCHOR,
						/* 94 */YY_NO_ANCHOR,
						/* 95 */YY_NO_ANCHOR,
						/* 96 */YY_NO_ANCHOR,
						/* 97 */YY_NO_ANCHOR,
						/* 98 */YY_END,
						/* 99 */YY_END,
						/* 100 */YY_NO_ANCHOR,
						/* 101 */YY_NO_ANCHOR,
						/* 102 */YY_NO_ANCHOR,
						/* 103 */YY_NO_ANCHOR,
						/* 104 */YY_NO_ANCHOR,
						/* 105 */YY_END,
						/* 106 */YY_NOT_ACCEPT,
						/* 107 */YY_NO_ANCHOR,
						/* 108 */YY_NO_ANCHOR,
						/* 109 */YY_NO_ANCHOR,
						/* 110 */YY_NO_ANCHOR,
						/* 111 */YY_NO_ANCHOR,
						/* 112 */YY_NO_ANCHOR,
						/* 113 */YY_END,
						/* 114 */YY_END,
						/* 115 */YY_NO_ANCHOR,
						/* 116 */YY_NO_ANCHOR,
						/* 117 */YY_NO_ANCHOR,
						/* 118 */YY_NO_ANCHOR,
						/* 119 */YY_NO_ANCHOR,
						/* 120 */YY_END,
						/* 121 */YY_NOT_ACCEPT,
						/* 122 */YY_NO_ANCHOR,
						/* 123 */YY_NO_ANCHOR,
						/* 124 */YY_END,
						/* 125 */YY_END,
						/* 126 */YY_NO_ANCHOR,
						/* 127 */YY_NO_ANCHOR,
						/* 128 */YY_NO_ANCHOR,
						/* 129 */YY_END,
						/* 130 */YY_NOT_ACCEPT,
						/* 131 */YY_NO_ANCHOR,
						/* 132 */YY_END,
						/* 133 */YY_END,
						/* 134 */YY_NO_ANCHOR,
						/* 135 */YY_NO_ANCHOR,
						/* 136 */YY_NO_ANCHOR,
						/* 137 */YY_END,
						/* 138 */YY_NOT_ACCEPT,
						/* 139 */YY_NO_ANCHOR,
						/* 140 */YY_END,
						/* 141 */YY_END,
						/* 142 */YY_NO_ANCHOR,
						/* 143 */YY_NO_ANCHOR,
						/* 144 */YY_NO_ANCHOR,
						/* 145 */YY_NOT_ACCEPT,
						/* 146 */YY_NO_ANCHOR,
						/* 147 */YY_NO_ANCHOR,
						/* 148 */YY_NO_ANCHOR,
						/* 149 */YY_NO_ANCHOR,
						/* 150 */YY_NOT_ACCEPT,
						/* 151 */YY_NO_ANCHOR,
						/* 152 */YY_NO_ANCHOR,
						/* 153 */YY_NO_ANCHOR,
						/* 154 */YY_NO_ANCHOR,
						/* 155 */YY_NOT_ACCEPT,
						/* 156 */YY_NO_ANCHOR,
						/* 157 */YY_NO_ANCHOR,
						/* 158 */YY_NO_ANCHOR,
						/* 159 */YY_NO_ANCHOR,
						/* 160 */YY_NO_ANCHOR,
						/* 161 */YY_NO_ANCHOR,
						/* 162 */YY_NO_ANCHOR,
						/* 163 */YY_NO_ANCHOR,
						/* 164 */YY_NO_ANCHOR,
						/* 165 */YY_NO_ANCHOR,
						/* 166 */YY_NO_ANCHOR,
						/* 167 */YY_NO_ANCHOR,
						/* 168 */YY_NO_ANCHOR,
						/* 169 */YY_NO_ANCHOR,
						/* 170 */YY_NO_ANCHOR,
						/* 171 */YY_NO_ANCHOR,
						/* 172 */YY_NO_ANCHOR,
						/* 173 */YY_NO_ANCHOR,
						/* 174 */YY_NO_ANCHOR,
						/* 175 */YY_NO_ANCHOR,
						/* 176 */YY_NO_ANCHOR,
						/* 177 */YY_NO_ANCHOR,
						/* 178 */YY_NO_ANCHOR,
						/* 179 */YY_NO_ANCHOR,
						/* 180 */YY_NO_ANCHOR,
						/* 181 */YY_NO_ANCHOR,
						/* 182 */YY_NO_ANCHOR,
						/* 183 */YY_NO_ANCHOR,
						/* 184 */YY_NO_ANCHOR,
						/* 185 */YY_NO_ANCHOR,
						/* 186 */YY_NO_ANCHOR,
						/* 187 */YY_NO_ANCHOR,
						/* 188 */YY_NO_ANCHOR,
						/* 189 */YY_NO_ANCHOR,
						/* 190 */YY_NO_ANCHOR,
						/* 191 */YY_NO_ANCHOR,
						/* 192 */YY_NO_ANCHOR,
						/* 193 */YY_NO_ANCHOR,
						/* 194 */YY_NO_ANCHOR,
						/* 195 */YY_NO_ANCHOR,
						/* 196 */YY_NO_ANCHOR,
						/* 197 */YY_NO_ANCHOR,
						/* 198 */YY_NO_ANCHOR,
						/* 199 */YY_NO_ANCHOR,
						/* 200 */YY_NO_ANCHOR,
						/* 201 */YY_NO_ANCHOR,
						/* 202 */YY_NO_ANCHOR,
						/* 203 */YY_NO_ANCHOR,
						/* 204 */YY_NO_ANCHOR,
						/* 205 */YY_NO_ANCHOR,
						/* 206 */YY_NO_ANCHOR,
						/* 207 */YY_NO_ANCHOR,
						/* 208 */YY_NO_ANCHOR,
						/* 209 */YY_NO_ANCHOR,
						/* 210 */YY_NO_ANCHOR,
						/* 211 */YY_NO_ANCHOR,
						/* 212 */YY_NO_ANCHOR,
						/* 213 */YY_NO_ANCHOR,
						/* 214 */YY_NO_ANCHOR,
						/* 215 */YY_NO_ANCHOR,
						/* 216 */YY_NO_ANCHOR,
						/* 217 */YY_NO_ANCHOR,
						/* 218 */YY_NO_ANCHOR,
						/* 219 */YY_NO_ANCHOR,
						/* 220 */YY_NO_ANCHOR,
						/* 221 */YY_NO_ANCHOR,
						/* 222 */YY_NO_ANCHOR,
						/* 223 */YY_NO_ANCHOR,
						/* 224 */YY_NO_ANCHOR,
						/* 225 */YY_NO_ANCHOR,
						/* 226 */YY_NO_ANCHOR,
						/* 227 */YY_NO_ANCHOR,
						/* 228 */YY_NO_ANCHOR,
						/* 229 */YY_NO_ANCHOR,
						/* 230 */YY_NO_ANCHOR,
						/* 231 */YY_NO_ANCHOR,
						/* 232 */YY_NO_ANCHOR,
						/* 233 */YY_NO_ANCHOR,
						/* 234 */YY_NO_ANCHOR,
						/* 235 */YY_NO_ANCHOR,
						/* 236 */YY_NO_ANCHOR,
						/* 237 */YY_NO_ANCHOR,
						/* 238 */YY_NO_ANCHOR,
						/* 239 */YY_NO_ANCHOR,
						/* 240 */YY_NO_ANCHOR,
						/* 241 */YY_NO_ANCHOR,
						/* 242 */YY_NO_ANCHOR,
						/* 243 */YY_NO_ANCHOR,
						/* 244 */YY_NO_ANCHOR,
						/* 245 */YY_NO_ANCHOR,
						/* 246 */YY_NO_ANCHOR,
						/* 247 */YY_NO_ANCHOR,
						/* 248 */YY_NO_ANCHOR,
						/* 249 */YY_NO_ANCHOR,
						/* 250 */YY_NO_ANCHOR,
						/* 251 */YY_NO_ANCHOR,
						/* 252 */YY_NO_ANCHOR,
						/* 253 */YY_NO_ANCHOR,
						/* 254 */YY_NO_ANCHOR,
						/* 255 */YY_NO_ANCHOR,
						/* 256 */YY_NO_ANCHOR,
						/* 257 */YY_NO_ANCHOR,
						/* 258 */YY_NO_ANCHOR,
						/* 259 */YY_NO_ANCHOR,
						/* 260 */YY_NO_ANCHOR,
						/* 261 */YY_NO_ANCHOR,
						/* 262 */YY_NO_ANCHOR,
						/* 263 */YY_NO_ANCHOR,
						/* 264 */YY_NO_ANCHOR,
						/* 265 */YY_NO_ANCHOR,
						/* 266 */YY_NO_ANCHOR,
						/* 267 */YY_NO_ANCHOR,
						/* 268 */YY_NO_ANCHOR,
						/* 269 */YY_NO_ANCHOR,
						/* 270 */YY_NO_ANCHOR,
						/* 271 */YY_NO_ANCHOR,
						/* 272 */YY_NO_ANCHOR,
						/* 273 */YY_NO_ANCHOR,
						/* 274 */YY_NO_ANCHOR,
						/* 275 */YY_NO_ANCHOR,
						/* 276 */YY_NO_ANCHOR,
						/* 277 */YY_NO_ANCHOR,
						/* 278 */YY_NO_ANCHOR,
						/* 279 */YY_NO_ANCHOR,
						/* 280 */YY_NO_ANCHOR,
						/* 281 */YY_NO_ANCHOR,
						/* 282 */YY_NO_ANCHOR,
						/* 283 */YY_NO_ANCHOR,
						/* 284 */YY_NO_ANCHOR,
						/* 285 */YY_NO_ANCHOR,
						/* 286 */YY_NO_ANCHOR,
						/* 287 */YY_NO_ANCHOR,
						/* 288 */YY_NO_ANCHOR,
						/* 289 */YY_NO_ANCHOR,
						/* 290 */YY_NO_ANCHOR,
						/* 291 */YY_NO_ANCHOR,
						/* 292 */YY_NO_ANCHOR,
						/* 293 */YY_NO_ANCHOR,
						/* 294 */YY_NO_ANCHOR,
						/* 295 */YY_NO_ANCHOR,
						/* 296 */YY_NO_ANCHOR,
						/* 297 */YY_NO_ANCHOR,
						/* 298 */YY_NO_ANCHOR,
						/* 299 */YY_NO_ANCHOR,
						/* 300 */YY_NO_ANCHOR,
						/* 301 */YY_NO_ANCHOR,
						/* 302 */YY_NO_ANCHOR,
						/* 303 */YY_NO_ANCHOR,
						/* 304 */YY_NO_ANCHOR,
						/* 305 */YY_NO_ANCHOR,
						/* 306 */YY_NO_ANCHOR,
						/* 307 */YY_NO_ANCHOR,
						/* 308 */YY_NO_ANCHOR,
						/* 309 */YY_NO_ANCHOR,
						/* 310 */YY_NO_ANCHOR,
						/* 311 */YY_NO_ANCHOR,
						/* 312 */YY_NO_ANCHOR,
						/* 313 */YY_NO_ANCHOR,
						/* 314 */YY_NO_ANCHOR,
						/* 315 */YY_NO_ANCHOR,
						/* 316 */YY_NO_ANCHOR,
						/* 317 */YY_NO_ANCHOR,
						/* 318 */YY_NO_ANCHOR,
						/* 319 */YY_NO_ANCHOR,
						/* 320 */YY_NO_ANCHOR,
						/* 321 */YY_NO_ANCHOR,
						/* 322 */YY_NO_ANCHOR,
						/* 323 */YY_NO_ANCHOR,
						/* 324 */YY_NO_ANCHOR,
						/* 325 */YY_NO_ANCHOR,
						/* 326 */YY_NO_ANCHOR,
						/* 327 */YY_NO_ANCHOR,
						/* 328 */YY_NO_ANCHOR,
						/* 329 */YY_NO_ANCHOR,
						/* 330 */YY_NO_ANCHOR,
						/* 331 */YY_NO_ANCHOR,
						/* 332 */YY_NO_ANCHOR,
						/* 333 */YY_NO_ANCHOR,
						/* 334 */YY_NO_ANCHOR,
						/* 335 */YY_NO_ANCHOR,
						/* 336 */YY_NO_ANCHOR,
						/* 337 */YY_NO_ANCHOR,
						/* 338 */YY_NO_ANCHOR,
						/* 339 */YY_NO_ANCHOR,
						/* 340 */YY_NO_ANCHOR,
						/* 341 */YY_NO_ANCHOR,
						/* 342 */YY_NO_ANCHOR,
						/* 343 */YY_NO_ANCHOR,
						/* 344 */YY_NO_ANCHOR,
						/* 345 */YY_NO_ANCHOR,
						/* 346 */YY_NO_ANCHOR,
						/* 347 */YY_NO_ANCHOR,
						/* 348 */YY_NO_ANCHOR,
						/* 349 */YY_NO_ANCHOR,
						/* 350 */YY_NO_ANCHOR,
						/* 351 */YY_NO_ANCHOR,
						/* 352 */YY_NO_ANCHOR,
						/* 353 */YY_NO_ANCHOR,
						/* 354 */YY_NO_ANCHOR,
						/* 355 */YY_NO_ANCHOR,
						/* 356 */YY_NO_ANCHOR,
						/* 357 */YY_NO_ANCHOR,
						/* 358 */YY_NO_ANCHOR,
						/* 359 */YY_NO_ANCHOR,
						/* 360 */YY_NO_ANCHOR,
						/* 361 */YY_NO_ANCHOR,
						/* 362 */YY_NO_ANCHOR,
						/* 363 */YY_NO_ANCHOR,
						/* 364 */YY_NO_ANCHOR,
						/* 365 */YY_NO_ANCHOR,
						/* 366 */YY_NO_ANCHOR,
						/* 367 */YY_NO_ANCHOR,
						/* 368 */YY_NO_ANCHOR,
						/* 369 */YY_NO_ANCHOR,
						/* 370 */YY_NO_ANCHOR,
						/* 371 */YY_NO_ANCHOR,
						/* 372 */YY_NO_ANCHOR,
						/* 373 */YY_NO_ANCHOR,
						/* 374 */YY_NO_ANCHOR,
						/* 375 */YY_NO_ANCHOR,
						/* 376 */YY_NO_ANCHOR,
						/* 377 */YY_NO_ANCHOR,
						/* 378 */YY_NO_ANCHOR,
						/* 379 */YY_NO_ANCHOR,
						/* 380 */YY_NO_ANCHOR,
						/* 381 */YY_NO_ANCHOR,
						/* 382 */YY_NO_ANCHOR,
						/* 383 */YY_NO_ANCHOR,
						/* 384 */YY_NO_ANCHOR,
						/* 385 */YY_NO_ANCHOR,
						/* 386 */YY_NO_ANCHOR,
						/* 387 */YY_NO_ANCHOR,
						/* 388 */YY_NO_ANCHOR,
						/* 389 */YY_NO_ANCHOR,
						/* 390 */YY_NO_ANCHOR,
						/* 391 */YY_NO_ANCHOR,
						/* 392 */YY_NO_ANCHOR,
						/* 393 */YY_NO_ANCHOR,
						/* 394 */YY_NO_ANCHOR,
						/* 395 */YY_NO_ANCHOR,
						/* 396 */YY_NO_ANCHOR,
						/* 397 */YY_NO_ANCHOR,
						/* 398 */YY_NO_ANCHOR,
						/* 399 */YY_NO_ANCHOR,
						/* 400 */YY_NO_ANCHOR,
						/* 401 */YY_NO_ANCHOR,
						/* 402 */YY_NO_ANCHOR,
						/* 403 */YY_NO_ANCHOR,
						/* 404 */YY_NO_ANCHOR,
						/* 405 */YY_NO_ANCHOR,
						/* 406 */YY_NO_ANCHOR,
						/* 407 */YY_NO_ANCHOR,
						/* 408 */YY_NO_ANCHOR,
						/* 409 */YY_NO_ANCHOR,
						/* 410 */YY_NO_ANCHOR,
						/* 411 */YY_NO_ANCHOR,
						/* 412 */YY_NO_ANCHOR,
						/* 413 */YY_NO_ANCHOR,
						/* 414 */YY_NO_ANCHOR,
						/* 415 */YY_NO_ANCHOR,
						/* 416 */YY_NO_ANCHOR,
						/* 417 */YY_NO_ANCHOR,
						/* 418 */YY_NO_ANCHOR,
						/* 419 */YY_NO_ANCHOR,
						/* 420 */YY_NO_ANCHOR,
						/* 421 */YY_NO_ANCHOR,
						/* 422 */YY_NO_ANCHOR,
						/* 423 */YY_NO_ANCHOR,
						/* 424 */YY_NO_ANCHOR,
						/* 425 */YY_NO_ANCHOR,
						/* 426 */YY_NO_ANCHOR,
						/* 427 */YY_NO_ANCHOR,
						/* 428 */YY_NO_ANCHOR,
						/* 429 */YY_NO_ANCHOR,
						/* 430 */YY_NO_ANCHOR,
						/* 431 */YY_NO_ANCHOR,
						/* 432 */YY_NO_ANCHOR,
						/* 433 */YY_NO_ANCHOR,
						/* 434 */YY_NO_ANCHOR,
						/* 435 */YY_NO_ANCHOR,
						/* 436 */YY_NO_ANCHOR,
						/* 437 */YY_NO_ANCHOR,
						/* 438 */YY_NO_ANCHOR,
						/* 439 */YY_NO_ANCHOR,
						/* 440 */YY_NO_ANCHOR,
						/* 441 */YY_NO_ANCHOR,
						/* 442 */YY_NO_ANCHOR,
						/* 443 */YY_NO_ANCHOR,
						/* 444 */YY_NO_ANCHOR,
						/* 445 */YY_NO_ANCHOR,
						/* 446 */YY_NO_ANCHOR,
						/* 447 */YY_NO_ANCHOR,
						/* 448 */YY_NO_ANCHOR,
						/* 449 */YY_NO_ANCHOR,
						/* 450 */YY_NO_ANCHOR,
						/* 451 */YY_NO_ANCHOR,
						/* 452 */YY_NO_ANCHOR,
						/* 453 */YY_NO_ANCHOR,
						/* 454 */YY_NO_ANCHOR,
						/* 455 */YY_NO_ANCHOR,
						/* 456 */YY_NO_ANCHOR,
						/* 457 */YY_NO_ANCHOR,
						/* 458 */YY_NO_ANCHOR,
						/* 459 */YY_NO_ANCHOR,
						/* 460 */YY_NO_ANCHOR,
						/* 461 */YY_NO_ANCHOR,
						/* 462 */YY_NO_ANCHOR,
						/* 463 */YY_NO_ANCHOR,
						/* 464 */YY_NO_ANCHOR,
						/* 465 */YY_NO_ANCHOR,
						/* 466 */YY_NO_ANCHOR,
						/* 467 */YY_NO_ANCHOR,
						/* 468 */YY_NO_ANCHOR,
						/* 469 */YY_NO_ANCHOR,
						/* 470 */YY_NO_ANCHOR,
						/* 471 */YY_NO_ANCHOR,
						/* 472 */YY_NO_ANCHOR,
						/* 473 */YY_NO_ANCHOR,
						/* 474 */YY_NO_ANCHOR,
						/* 475 */YY_NO_ANCHOR,
						/* 476 */YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1, 65538,
						"4:9,5,2,4,5,1,4:18,5,4,28,3,4:7,21,4,21,4:2,20:2,22:8,4:7,32:2,8,32,23,32,4" +
											"2,32,25,32:2,41,32,24,32:7,14,32:4,18,29,19,4,40,4,11,37,38,36,10,26,31,39," +
											"16,48,47,30,35,17,13,34,32,9,15,12,33,46,45,43,27,44,4:1905,6:2,4:63506,0,7")[0];
	
	private int yy_rmap[] = unpackFromString(1, 477,
						"0,1:3,2,3,4,2,5,1,6,5:2,7,5,8,9,5,10,1:2,11,12,13,14:3,1:2,5,1:2,5:5,1:2,5:" +
											"5,15,5:4,16,5:19,1:4,5:3,1:6,17,1:2,18,19:2,1,20,1,21,14,22,23,14,24,14,1:2" +
											",25,26,27,28,11,2,22,19:2,5,19:3,29,30,31,19,32,22,33,34,35,36,37,38,39,40," +
											"41,42,19,43,44,19:2,45,46,47,26,37,48,49,50,51,36,52,53,14,54,55,56,29,57,5" +
											"8,59,60,30,61,62,63,64,19,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,8" +
											"1,49,82,83,50,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,1" +
											"03,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121," +
											"122,123,124,125,126,127,128,129,130,131,68,132,133,134,135,136,137,138,139," +
											"140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158" +
											",159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,17" +
											"7,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,1" +
											"96,197,198,33,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,2" +
											"14,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232," +
											"233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251" +
											",252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,27" +
											"0,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,2" +
											"89,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307," +
											"308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,5,14,324,32" +
											"5,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,3" +
											"44,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362," +
											"5,14,363,364,365,366,367,368,369,370,371,372")[0];
	
	private int yy_nxt[][] = unpackFromString(373, 49,
						"1,2,3,4,88,2,88,1,85,465:5,469,346,102,465,88:2,5,103,5,465,224,472,465:2,1" +
											"18,88,349,352,465:6,418,465:7,469,465:2,-1:50,6,90,7:3,105,90,7:41,-1:3,91:" +
											"4,-1,117:10,91:2,287,91,287,117:5,91:2,117:19,-1:2,90,-1:54,465:10,-1:2,424" +
											",-1,424,465:5,-1:2,465:19,-1:10,130,-1:9,10,-1,10,130,-1:33,465:8,251,465,-" +
											"1:2,424,-1,424,465:5,-1:2,465:19,-1:2,98,-1:48,99,-1:46,1,2,3,4,88,2,88,1,1" +
											"00,466,290,466:3,470,473,115,296,19,20,21,103,104,466,226,475,466:2,118,88," +
											"347,350,466:4,476,466,419,466:7,470,466:2,-1:3,91:4,-1,126:10,91:2,292,91,2" +
											"92,126:5,91:2,126:19,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:10,403,466:" +
											"8,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:10,405,466:8,-1:8,466:10,-1:2," +
											"425,-1,425,466:5,-1:2,466:19,-1:8,465:8,330,465,-1:2,424,-1,424,465:5,-1:2," +
											"465:19,-1:8,465:4,340,465:5,-1:2,424,-1,424,465:5,-1:2,465:9,341,465:9,1,86" +
											",87,101,116,86,116,1,467,116:5,471,116,127,116,83,84,119,135,119,116,228,47" +
											"4,116:2,143,116,348,351,116:6,420,116:7,471,116:2,-1:8,465,421,465:8,-1:2,4" +
											"24,-1,424,465:5,-1:2,465:19,-1,116:6,-1,116:10,-1:2,116:29,-1:3,91:4,-1,91:" +
											"12,289,91,289,91:26,-1:20,10,-1,10,-1:27,106:6,-1,106:20,9,121,106:19,-1:8," +
											"465:2,144,465:7,-1:2,94,-1,94,144,465:4,-1:2,465:19,-1:8,466:8,441,466,-1:2" +
											",425,-1,425,466:5,-1:2,466:19,-1:8,466,422,466:8,-1:2,425,-1,425,466:5,-1:2" +
											",466:19,-1,120,129,101:3,137,90,101:10,7:2,101:29,-1:8,465:10,-1:2,424,-1,4" +
											"24,465:5,-1:2,465:6,8,465:12,-1:20,89,-1,89,-1:27,15,98,150:3,113,98,150:41" +
											",-1,16,99,155:3,114,99,155:41,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:6," +
											"92,466:12,-1:8,465:10,-1:2,94,-1,94,465:5,-1:2,465:19,-1,116:2,148:4,-1,148" +
											":10,91:2,294,148,294,148:26,-1,116,129,116:4,-1,116:10,-1:2,116:29,-1,106:6" +
											",-1,106:20,93,121,106:19,-1,143:6,-1,143:10,106:2,143:8,108,158,143:19,-1:2" +
											"0,123,-1,123,-1:27,116,132,116:4,-1,116:10,-1:2,116:29,-1,116,133,116:4,-1," +
											"116:10,-1:2,116:29,-1:8,466:10,-1:2,139,-1,139,466:5,-1:2,466:19,-1,116:6,-" +
											"1,116:10,-1:2,116:16,107,116:12,-1:8,465:10,-1:2,424,-1,424,465,109,465:3,-" +
											"1:2,465:19,-1:20,123,138,123,-1:34,465:10,-1:2,131,-1,131,465:5,-1:2,465:19" +
											",-1:8,466:10,-1:2,425,-1,425,466,146,466:3,-1:2,466:19,-1,116:6,-1,116:10,-" +
											"1:2,298,116,298,116:26,-1:8,465:2,11,465:7,-1:2,424,-1,424,465:5,-1:2,465:1" +
											"9,-1:8,466:2,152,466:7,-1:2,139,-1,139,152,466:4,-1:2,466:19,-1,124,132,178" +
											":3,140,98,178:10,150:2,178:29,-1,125,133,181:3,141,99,181:10,155:2,181:29,-" +
											"1:8,466:2,22,466:7,-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:10,-1:2,131,1" +
											"38,131,465:5,-1:2,465:19,-1:20,10,138,10,-1:34,466:2,23,466:7,-1:2,425,-1,4" +
											"25,466:5,-1:2,466:19,-1,116:6,-1,116:10,-1:2,156,116,156,116:26,-1:8,465:10" +
											",-1:2,94,138,94,465:5,-1:2,465:19,-1:8,466:10,-1:2,151,-1,151,466:5,-1:2,46" +
											"6:19,-1:8,466:10,-1:2,151,138,151,466:5,-1:2,466:19,-1,116:6,-1,116:10,-1:2" +
											",116:4,160,116:24,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,12,465:18,-1,116:6" +
											",-1,116:2,162,116:7,-1:2,156,116,156,162,116:25,-1:8,466:10,-1:2,139,138,13" +
											"9,466:5,-1:2,466:19,-1,143:6,-1,143:10,106:2,143:8,122,158,143:19,-1:8,465:" +
											"10,-1:2,424,-1,424,465:5,-1:2,465:9,13,465:9,-1:8,466:10,-1:2,425,-1,425,46" +
											"6:5,-1:2,95,466:18,-1,116:6,-1,116:10,-1:2,164,230,164,116:26,-1:8,465:4,14" +
											",465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1,116:6,-1,116:10,-1:2,164,116,16" +
											"4,116:26,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:9,96,466:9,-1,116:6,-1," +
											"116:10,-1:2,156,230,156,116:26,-1,15,98,150:3,113,98,167:10,150:2,167,150,1" +
											"67:6,150:2,167:19,-1:8,466:4,97,466:5,-1:2,425,-1,425,466:5,-1:2,466:19,-1," +
											"116:6,-1,116:10,-1:2,116:10,110,116:18,-1,16,99,155:3,114,99,170:10,155:2,1" +
											"70,155,170:6,155:2,170:19,-1,15,98,150:3,113,98,171:10,150:2,171,150,171:6," +
											"150:2,171:19,-1,116:6,-1,116:10,-1:2,116:19,111,116:9,-1:8,465:10,-1:2,424," +
											"-1,424,465:4,109,-1:2,465:19,-1,16,99,155:3,114,99,174:10,155:2,174,155,174" +
											":6,155:2,174:19,-1,116:6,-1,116:4,112,116:5,-1:2,116:29,-1:8,465:7,17,465:2" +
											",-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:4,146,-1" +
											":2,466:19,1,2,3,4,88,2,88,1,85,465:5,469,465,102,465,27,28,5,103,5,465,224," +
											"472,465:2,118,88,349,352,465:6,418,465:2,432,465:4,469,465:2,-1:8,466:10,-1" +
											":2,425,-1,425,466:5,-1:2,466:6,24,466:12,-1:8,465:7,29,465:2,-1:2,424,-1,42" +
											"4,465:5,-1:2,465:19,-1:8,466:2,25,466:7,-1:2,425,-1,425,466:5,-1:2,466:19,-" +
											"1,116:6,-1,116:10,-1:2,116:7,160,116:21,1,2,3,4,88,2,88,1,85,465:3,402,465," +
											"469,404,102,465,30,31,5,103,5,465,224,472,465:2,118,88,349,352,465:2,368,46" +
											"5:3,418,465:2,315,465:4,469,465:2,-1:8,466:2,26,466:7,-1:2,425,-1,425,466:5" +
											",-1:2,466:19,-1:8,465:2,32,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465" +
											":4,33,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:4,34,465:5,-1:2,424," +
											"-1,424,465:5,-1:2,465:19,-1:8,465:2,35,465:7,-1:2,424,-1,424,465:5,-1:2,465" +
											":19,-1:8,465:7,36,465:2,-1:2,424,-1,424,465:5,-1:2,465:19,1,2,3,4,88,2,88,1" +
											",85,465,407,373,323,451,469,324,291,465,37,38,5,103,5,465,224,472,325,39,11" +
											"8,88,349,352,465:2,374,465,40,408,409,41,465,326,465,42,43,44,452,465,453,-" +
											"1:8,465:2,45,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:4,46,465:5,-1" +
											":2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,47,4" +
											"65:18,-1:8,465:2,48,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:" +
											"2,424,-1,424,465:5,-1:2,465:15,49,465:3,-1:8,465:4,50,465:5,-1:2,424,-1,424" +
											",465:5,-1:2,465:19,-1:8,465:2,51,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1" +
											":8,465:4,52,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1" +
											",424,465:5,-1:2,465:9,53,465:9,-1:8,465:4,54,465:5,-1:2,424,-1,424,465:5,-1" +
											":2,465:19,-1:8,465,55,465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-" +
											"1:2,424,-1,424,465:5,-1:2,465:9,56,465:9,-1:8,465:10,-1:2,424,-1,424,465:5," +
											"-1:2,465:4,57,465:14,-1:8,465:2,58,465:7,-1:2,424,-1,424,465:5,-1:2,465:19," +
											"-1:8,465:2,59,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:2,60,465:7,-" +
											"1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:4,61,-1:2," +
											"465:19,-1:8,465:2,62,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1" +
											":2,424,-1,424,465:5,-1:2,63,465:18,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,4" +
											"65:6,64,465:12,-1:8,465:2,65,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,4" +
											"65:10,-1:2,424,-1,424,465:5,-1:2,465:6,66,465:12,-1:8,465:10,-1:2,424,-1,42" +
											"4,465:5,-1:2,465:6,67,465:12,-1:8,465:7,68,465:2,-1:2,424,-1,424,465:5,-1:2" +
											",465:19,1,2,3,4,88,2,88,1,85,465:5,469,465,102,465,69,70,5,103,5,465,224,47" +
											"2,465:2,118,88,349,352,465:2,374,465:3,418,465:7,469,465:2,1,2,3,4,88,2,88," +
											"1,85,465:5,469,465,102,465,71,72,5,103,5,465,224,472,465,73,118,88,349,352," +
											"465:6,418,465:4,74,75,465,469,465:2,1,2,3,4,88,2,88,1,85,465:5,469,465,102," +
											"465,76,77,5,103,5,465,224,472,465:2,118,88,349,352,465:6,418,465:7,469,465:" +
											"2,1,2,3,4,88,2,88,1,85,465:5,469,465,102,465,78,79,5,103,5,465,224,472,465:" +
											"2,118,88,349,352,465:6,418,465:7,469,465:2,1,2,3,4,88,2,88,1,85,465:5,469,4" +
											"65,102,465,80,88,5,103,5,465,224,472,465:2,118,88,349,352,465:6,418,465:7,4" +
											"69,465:2,1,2,3,4,88,2,88,1,85,465:5,469,465,102,465,81,88,5,103,5,465,224,4" +
											"72,465:2,118,88,349,352,465:6,418,465:7,469,465:2,-1:3,91:4,-1,117:2,149,11" +
											"7:7,91:2,223,91,223,149,117:4,91:2,117:19,-1:8,465:3,128,465:6,-1:2,424,-1," +
											"424,465:5,-1:2,465:19,-1:3,91:4,-1,91:2,145,91:9,225,91,225,145,91:25,-1:8," +
											"466:3,134,466:6,-1:2,425,-1,425,466:5,-1:2,466:19,-1:3,91:4,-1,126:2,157,12" +
											"6:7,91:2,227,91,227,157,126:4,91:2,126:19,-1,116:6,-1,116:3,153,116:6,-1:2," +
											"116:29,-1,116:2,148:4,-1,148:2,166,148:7,91:2,229,148,229,166,148:25,-1:8,4" +
											"65:10,-1:2,424,-1,424,465:5,-1:2,136,465:18,-1:8,466:10,-1:2,425,-1,425,466" +
											":5,-1:2,466,142,466:17,-1,116:6,-1,116:2,169,116:7,-1:2,116:29,-1:8,465:2,1" +
											"54,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:" +
											"5,-1:2,466:6,147,466:12,-1,116:6,-1,116:10,-1:2,116:14,172,116:14,-1:8,465:" +
											"10,-1:2,424,-1,424,465:5,-1:2,465:4,159,465:14,-1:8,466:2,161,466:7,-1:2,42" +
											"5,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116:9,175,-1:2,116:29,-1:8,465:9,163" +
											",-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,4" +
											"66:4,165,466:14,-1,116:6,-1,116,178,116:8,-1:2,116:29,-1:8,465,167,465:8,-1" +
											":2,424,-1,424,465:5,-1:2,465:19,-1:8,466:9,168,-1:2,425,-1,425,466:5,-1:2,4" +
											"66:19,-1,116:6,-1,116:9,181,-1:2,116:29,-1:8,465:9,170,-1:2,424,-1,424,465:" +
											"5,-1:2,465:19,-1:8,466,171,466:8,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6" +
											",-1,116:4,184,116:5,-1:2,116:29,-1:8,465:4,173,465:5,-1:2,424,-1,424,465:5," +
											"-1:2,465:19,-1:8,466:9,174,-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:10,-1" +
											":2,424,-1,424,465:5,-1:2,465:8,176,465:10,-1:8,466:4,177,466:5,-1:2,425,-1," +
											"425,466:5,-1:2,466:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:8,182,465:" +
											"10,-1:8,466:2,180,466:7,-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:9,187,-1" +
											":2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,183," +
											"466:18,-1:8,465:9,188,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,42" +
											"5,-1,425,466:5,-1:2,186,466:18,-1:8,465:2,189,465:7,-1:2,424,-1,424,465:5,-" +
											"1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:8,190,465:10,-1:8,465" +
											":10,-1:2,424,-1,424,465:5,-1:2,465:8,191,465:10,-1:8,465:10,-1:2,424,-1,424" +
											",465:5,-1:2,465:4,193,465:14,-1:8,465:3,268,465:4,380,465,-1:2,424,-1,424,4" +
											"65:4,231,-1:2,465:19,-1:8,465,458,465:7,194,-1:2,424,-1,424,465:5,-1:2,465:" +
											"19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,195,465:18,-1:8,465:9,196,-1:2,42" +
											"4,-1,424,465:5,-1:2,465:19,-1:8,465:5,197,465:4,-1:2,424,-1,424,465:5,-1:2," +
											"465:19,-1:8,465,198,465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:" +
											"2,424,-1,424,465:5,-1:2,465,199,465:17,-1:8,465:9,200,-1:2,424,-1,424,465:5" +
											",-1:2,465:19,-1:8,465:4,201,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,46" +
											"5:9,202,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:5,203,465:4,-1:2,424,-1," +
											"424,465:5,-1:2,465:19,-1:8,465:4,204,465:5,-1:2,424,-1,424,465:5,-1:2,465:1" +
											"9,-1:8,465:3,205,465:6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:9,206,-1:" +
											"2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,207,4" +
											"65:18,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,208,465:18,-1:8,465:10,-1:2,42" +
											"4,-1,424,465:3,209,465,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,2" +
											"10,465:18,-1:8,465:8,211,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:3,2" +
											"12,465:6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:" +
											"5,-1:2,213,465:18,-1:8,465:9,214,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465" +
											":9,215,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5," +
											"-1:2,465:4,216,465:14,-1:3,91:4,-1,117:10,91:2,223,91,223,117:5,91:2,117:19" +
											",-1:8,465:10,-1:2,424,-1,424,465:4,231,-1:2,465:19,-1:3,91:4,-1,91:12,225,9" +
											"1,225,91:26,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:6,232,466:12,-1:8,46" +
											"5:10,-1:2,424,-1,424,465:5,-1:2,465:5,328,8,465:12,-1:3,91:4,-1,126:10,91:2" +
											",227,91,227,126:5,91:2,126:19,-1,116:6,-1,116:10,-1:2,116:17,233,116:11,-1," +
											"116:2,148:4,-1,148:10,91:2,229,148,229,148:26,-1:8,465:10,-1:2,424,-1,424,4" +
											"65:5,-1:2,465:7,234,465:11,-1:8,466:5,235,466:4,-1:2,425,-1,425,466:5,-1:2," +
											"466:19,-1,116:6,-1,116:3,236,116:6,-1:2,116:29,-1:8,465:3,237,465:6,-1:2,42" +
											"4,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:7,238" +
											",466:11,-1,116:6,-1,116:2,239,116:7,-1:2,116:29,-1:8,465:2,240,465:7,-1:2,4" +
											"24,-1,424,465:5,-1:2,465:19,-1:8,466:3,241,466:6,-1:2,425,-1,425,466:5,-1:2" +
											",466:19,-1,116:6,-1,116:5,242,116:4,-1:2,116:29,-1:8,465:5,243,465:4,-1:2,4" +
											"24,-1,424,465:5,-1:2,465:19,-1:8,466:2,244,466:7,-1:2,425,-1,425,466:5,-1:2" +
											",466:19,-1,116:6,-1,116:5,245,116:4,-1:2,116:29,-1:8,465:5,246,465:4,-1:2,4" +
											"24,-1,424,465:5,-1:2,465:19,-1:8,466:5,247,466:4,-1:2,425,-1,425,466:5,-1:2" +
											",466:19,-1,116:6,-1,116:8,248,116,-1:2,116:29,-1:8,465:8,249,465,-1:2,424,-" +
											"1,424,465:5,-1:2,465:19,-1:8,466:5,250,466:4,-1:2,425,-1,425,466:5,-1:2,466" +
											":19,-1:8,465:8,253,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:8,252,466" +
											",-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:3,445,465:4,255,465,-1:2,424,-1" +
											",424,465:5,-1:2,465:19,-1:8,466:4,254,466:5,-1:2,425,-1,425,466:5,-1:2,466:" +
											"19,-1:8,465:8,257,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,42" +
											"5,-1,425,466:4,256,-1:2,466:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465,2" +
											"59,465:17,-1:8,466:10,-1:2,425,-1,425,466:4,258,-1:2,466:19,-1:8,465,260,46" +
											"5:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:8,261,465,-1:2,424,-1,424,46" +
											"5:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:4,262,-1:2,465:19,-1:8,465:" +
											"4,263,465:5,-1:2,424,-1,424,465:5,-1:2,465:4,454,377,465:13,-1:8,465:5,264," +
											"465:2,265,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:8,266,465,-1:2,424" +
											",-1,424,465:5,-1:2,465:19,-1:8,465,267,465:8,-1:2,424,-1,424,465:5,-1:2,465" +
											":19,-1:8,465:3,269,465:6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:8,270,4" +
											"65,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2" +
											",465:6,271,465:12,-1:8,465:2,272,465:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1" +
											":8,465:10,-1:2,424,-1,424,465:5,-1:2,465:9,273,465:9,-1:8,465:5,274,465:4,-" +
											"1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465" +
											":5,275,465:13,-1:8,465:8,276,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465" +
											":10,-1:2,424,-1,424,465:5,-1:2,465:4,277,465:14,-1:8,465:10,-1:2,424,-1,424" +
											",465:5,-1:2,465:7,278,465:11,-1:8,465:8,279,465,-1:2,424,-1,424,465:5,-1:2," +
											"465:19,-1:8,465:10,-1:2,424,-1,424,465:4,280,-1:2,465:19,-1:8,465:3,281,465" +
											":6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:2,282,465:7,-1:2,424,-1,424,4" +
											"65:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:4,283,-1:2,465:19,-1:8,465" +
											":10,-1:2,424,-1,424,465:5,-1:2,465:3,284,465:15,-1:8,465:10,-1:2,424,-1,424" +
											",465:5,-1:2,465:3,285,465:15,-1:8,465:2,286,465:7,-1:2,424,-1,424,465:5,-1:" +
											"2,465:19,-1:8,465:4,288,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:3," +
											"300,466:6,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116:3,293,116:6,-1:" +
											"2,116:29,-1:8,465:3,295,465:6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466,30" +
											"3,466:8,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116,297,116:8,-1:2,11" +
											"6:29,-1:8,465,299,465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2," +
											"425,-1,425,466:5,-1:2,466:5,306,466:13,-1,116:6,-1,116:10,-1:2,116:15,301,1" +
											"16:13,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:5,302,465:13,-1:8,466:4,30" +
											"9,466:5,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116:4,304,116:5,-1:2," +
											"116:29,-1:8,465:4,305,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:8,31" +
											"2,466,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116:8,307,116,-1:2,116:" +
											"29,-1:8,465:8,308,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:9,314,-1:2" +
											",425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116:9,310,-1:2,116:29,-1:8,465:9," +
											"311,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:5,-1:" +
											"2,466:8,316,466:10,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:9,313,465:9,-" +
											"1:8,466:4,318,466:5,-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:5,317,465:4," +
											"-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:4,320,466:5,-1:2,425,-1,425,466:" +
											"5,-1:2,466:19,-1:8,465,319,465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465" +
											":10,-1:2,424,-1,424,465:5,-1:2,465:3,321,465:15,-1:8,465:10,-1:2,424,-1,424" +
											",465:5,-1:2,465:9,322,465:9,-1:8,465,327,465:7,376,-1:2,424,-1,424,465:5,-1" +
											":2,465:19,-1:8,465:5,329,465:4,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:4" +
											",331,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,46" +
											"5:5,-1:2,465:8,332,465:10,-1:8,465:5,333,465:4,-1:2,424,-1,424,465:5,-1:2,4" +
											"65:19,-1:8,465:4,334,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1" +
											":2,424,-1,424,465:5,-1:2,335,465:18,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2," +
											"465:4,336,465:14,-1:8,465:8,337,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8," +
											"465:4,338,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:4,339,465:5,-1:2" +
											",424,-1,424,465:5,-1:2,465:19,-1:8,465:4,342,465:5,-1:2,424,-1,424,465:5,-1" +
											":2,465:19,-1:8,465:5,343,465:4,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:5" +
											",344,465:4,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:4,345,465:5,-1:2,424," +
											"-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:5,355,4" +
											"65:13,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:5,353,466:13,-1,116:6,-1,1" +
											"16:10,-1:2,116:15,354,116:13,-1:8,465:3,358,465:6,-1:2,424,-1,424,465:5,-1:" +
											"2,465:19,-1:8,466:3,356,466:6,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1" +
											",116:3,357,116:6,-1:2,116:29,-1:8,465:7,361,465:2,-1:2,424,-1,424,465:5,-1:" +
											"2,465:19,-1:8,466:7,359,466:2,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1" +
											",116:7,360,116:2,-1:2,116:29,-1:8,465:8,364,465,-1:2,424,-1,424,465:5,-1:2," +
											"465:19,-1:8,466:8,362,466,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116" +
											":8,363,116,-1:2,116:29,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:4,366,465" +
											":14,-1:8,466:2,365,466:7,-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:3,370,4" +
											"65:6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:7,367,466:2,-1:2,425,-1,425" +
											",466:5,-1:2,466:19,-1:8,465:5,371,465:4,-1:2,424,-1,424,465:5,-1:2,465:19,-" +
											"1:8,466:7,369,466:2,-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:10,-1:2,424," +
											"-1,424,465:5,-1:2,465:4,372,465:14,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,4" +
											"65:13,375,465:5,-1:8,465:3,455,465:4,378,465,-1:2,424,-1,424,465:5,-1:2,465" +
											":19,-1:8,465:3,456,465,388,465:4,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465" +
											":4,379,465:5,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:7,381,465:2,-1:2,42" +
											"4,-1,424,465:5,-1:2,465:19,-1:8,465:7,382,465:2,-1:2,424,-1,424,465:5,-1:2," +
											"465:19,-1:8,465:7,383,465:2,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:7,38" +
											"4,465:2,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465,385,465:8,-1:2,424,-1,42" +
											"4,465:5,-1:2,465:19,-1:8,465,386,465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1" +
											":8,465:7,387,465:2,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:5,388,465:4,-" +
											"1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:5,389,466:4,-1:2,425,-1,425,466:5" +
											",-1:2,466:19,-1,116:6,-1,116:5,390,116:4,-1:2,116:29,-1:8,465:2,391,465:7,-" +
											"1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:2,392,466:7,-1:2,425,-1,425,466:5" +
											",-1:2,466:19,-1,116:6,-1,116:2,393,116:7,-1:2,116:29,-1,116:6,-1,116,396,11" +
											"6:8,-1:2,116:29,-1:8,465,394,465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,4" +
											"66,395,466:8,-1:2,425,-1,425,466:5,-1:2,466:19,-1,116:6,-1,116:10,-1:2,116:" +
											"6,399,116:22,-1:8,465:10,-1:2,424,-1,424,465:3,397,465,-1:2,465:19,-1:8,466" +
											":10,-1:2,425,-1,425,466:4,437,-1:2,466:19,-1:8,465:3,434,465:6,-1:2,424,-1," +
											"424,465:5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:3,398,466,-1:2,466:19" +
											",-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:7,436,465:11,-1:8,466,401,466:8" +
											",-1:2,425,-1,425,466:5,-1:2,466:19,-1:8,465:2,438,465:7,-1:2,424,-1,424,465" +
											":5,-1:2,465:19,-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,439,466:18,-1:8,465:1" +
											"0,-1:2,424,-1,424,465:5,-1:2,440,465:18,-1:8,466:2,425,466:7,-1:2,425,-1,42" +
											"5,466:5,-1:2,466:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:12,442,465:6" +
											",-1:8,466:10,-1:2,425,-1,425,466:5,-1:2,466:8,443,466:10,-1:8,465,444,465:8" +
											",-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:7,425,466:2,-1:2,425,-1,425,466" +
											":5,-1:2,466:19,-1:8,465:3,400,465:6,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8," +
											"465:10,-1:2,424,-1,424,465:5,-1:2,465:7,446,465:11,-1:8,465:2,447,465:7,-1:" +
											"2,424,-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,448,4" +
											"65:18,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:12,449,465:6,-1:8,465,450," +
											"465:8,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:3,406,465:6,-1:2,424,-1,42" +
											"4,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:3,410,465:15" +
											",-1:8,465:2,427,465:5,411,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:5," +
											"457,465:4,-1:2,424,-1,424,465:5,-1:2,465:3,412,465:15,-1:8,465:10,-1:2,424," +
											"-1,424,465:5,-1:2,468,465:18,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:8,4" +
											"59,465:10,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:4,413,465:14,-1:8,465:" +
											"8,460,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:2,462,465:7,-1:2,424,-" +
											"1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465:17,463,4" +
											"65,-1:8,465:9,414,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:9,464,-1:2,424" +
											",-1,424,465:5,-1:2,465:19,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465,415,46" +
											"5:17,-1:8,465:10,-1:2,424,-1,424,465:5,-1:2,465,416,465:17,-1:8,465:2,417,4" +
											"65:7,-1:2,424,-1,424,465:5,-1:2,465:19,-1,116:6,-1,116,423,116:8,-1:2,116:2" +
											"9,-1:8,465:8,461,465,-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,465:2,427,465:7" +
											",-1:2,424,-1,424,465:5,-1:2,465:19,-1:8,466:2,428,466:7,-1:2,425,-1,425,466" +
											":5,-1:2,466:19,-1,116:6,-1,116:2,426,116:7,-1:2,116:29,-1:8,465:9,430,-1:2," +
											"424,-1,424,465:5,-1:2,465:19,-1:8,466:4,431,466:5,-1:2,425,-1,425,466:5,-1:" +
											"2,466:19,-1,116:6,-1,116:9,429,-1:2,116:29,-1:8,466:9,433,-1:2,425,-1,425,4" +
											"66:5,-1:2,466:19,-1:8,466:8,435,466,-1:2,425,-1,425,466:5,-1:2,466:19");
	
	public java_cup.runtime.Symbol next_token()
						throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;
		
		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol)
				yy_lookahead = YY_BOL;
			else
				yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			} else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				} else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
						case 0: {
							return new Symbol(sym.KEY, yytext());
						}
						case -2:
							break;
						case 1:

						case -3:
							break;
						case 2: { /* ignore white space */
						}
						case -4:
							break;
						case 3: { /* System.out.println(); new line */
							org.ErrorMsg.setStatusMessage("Process new line (" + (yyline + 1) + ") current state: " + yy_lexical_state);
						}
						case -5:
							break;
						case 4: {
							System.out.println("\nUnmatched input: " + yytext() + " in line "
												+ (yyline + 1));
							org.ErrorMsg.addErrorMessage("Unmatched input: " + yytext() + " in line "
												+ (yyline + 1));
						}
						case -6:
							break;
						case 5: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -7:
							break;
						case 6: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -8:
							break;
						case 8: {
							return new Symbol(sym.ID);
						}
						case -9:
							break;
						case 9: {
							return new Symbol(sym.STRING,
												yytext().substring(1, yytext().length() - 1));
						}
						case -10:
							break;
						case 10: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -11:
							break;
						case 11: {
							return new Symbol(sym.GRAPHICS_STYLE);
						}
						case -12:
							break;
						case 12: {
							return new Symbol(sym.LABEL);
						}
						case -13:
							break;
						case 13: {
							yybegin(GRAPH);
							return new Symbol(sym.GRAPH);
						}
						case -14:
							break;
						case 14: {
							System.out.println(yytext());
						}
						case -15:
							break;
						case 15: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -16:
							break;
						case 16: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -17:
							break;
						case 17: {
							stateBeforeGraphics = yy_lexical_state;
							yybegin(GRAPHICS);
							// System.out.println("\nentering graphics state.");
							return new Symbol(sym.GRAPHICS);
						}
						case -18:
							break;
						case 18: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -19:
							break;
						case 19: {
							return new Symbol(sym.SBRACE);
						}
						case -20:
							break;
						case 20: {
							return new Symbol(sym.CBRACE);
						}
						case -21:
							break;
						case 21: {
							return new Symbol(sym.BOOLEAN, new Boolean(new MyBoolean(yytext()).booleanValue()));
						}
						case -22:
							break;
						case 22: {
							yybegin(EDGE);
							org.ErrorMsg.setStatusMessage("Create Edge: " + yytext() + " (line " + (yyline + 1) + ")");
							return new Symbol(sym.EDGE);
						}
						case -23:
							break;
						case 23: {
							yybegin(NODE);
							org.ErrorMsg.setStatusMessage("Create Node: " + yytext() + " (line " + (yyline + 1) + ")");
							return new Symbol(sym.NODE);
						}
						case -24:
							break;
						case 24: {
							return new Symbol(sym.DIRECTED);
						}
						case -25:
							break;
						case 25: {
							yybegin(EDGESTYLE);
							org.ErrorMsg.setStatusMessage("Process edge style: " + yytext() + " (line " + (yyline + 1) + ")");
							// return new Symbol(sym.EDGE_STYLE);
						}
						case -26:
							break;
						case 26: {
							yybegin(NODESTYLE);
							// return new Symbol(sym.NODE_STYLE); }
							org.ErrorMsg.setStatusMessage("Process node style: " + yytext() + " (line " + (yyline + 1) + ")");
						}
						case -27:
							break;
						case 27: {
							nodeCount++;
							return new Symbol(sym.SBRACE);
						}
						case -28:
							break;
						case 28: {
							nodeCount--;
							if (nodeCount == 0) {
								yybegin(GRAPH);
							}
							return new Symbol(sym.CBRACE);
						}
						case -29:
							break;
						case 29: { // ignore for now
							yybegin(NODELABELGRAPHICS);
						}
						case -30:
							break;
						case 30: {
							edgeCount++;
							return new Symbol(sym.SBRACE);
						}
						case -31:
							break;
						case 31: {
							edgeCount--;
							if (edgeCount == 0) {
								yybegin(GRAPH);
							}
							return new Symbol(sym.CBRACE);
						}
						case -32:
							break;
						case 32: {
							stateBeforeLine = yy_lexical_state;
							yybegin(LINE);
							return new Symbol(sym.GRAPHICS_LINE);
						}
						case -33:
							break;
						case 33: {
							stateBeforePoint = yy_lexical_state;
							yybegin(POINT);
							return new Symbol(sym.GRAPHICS_POINT);
						}
						case -34:
							break;
						case 34: {
							return new Symbol(sym.TARGET);
						}
						case -35:
							break;
						case 35: {
							return new Symbol(sym.SOURCE);
						}
						case -36:
							break;
						case 36: { // ignore for now
							yybegin(EDGELABELGRAPHICS);
						}
						case -37:
							break;
						case 37: {
							graphicsCount++;
							return new Symbol(sym.SBRACE);
						}
						case -38:
							break;
						case 38: {
							graphicsCount--;
							if (graphicsCount == 0) {
								yybegin(stateBeforeGraphics);
							}
							return new Symbol(sym.CBRACE);
						}
						case -39:
							break;
						case 39: {
							return new Symbol(sym.GRAPHICS_Y);
						}
						case -40:
							break;
						case 40: {
							return new Symbol(sym.GRAPHICS_D);
						}
						case -41:
							break;
						case 41: {
							return new Symbol(sym.GRAPHICS_H);
						}
						case -42:
							break;
						case 42: {
							return new Symbol(sym.GRAPHICS_X);
						}
						case -43:
							break;
						case 43: {
							return new Symbol(sym.GRAPHICS_Z);
						}
						case -44:
							break;
						case 44: {
							return new Symbol(sym.GRAPHICS_W);
						}
						case -45:
							break;
						case 45: {
							return new Symbol(sym.GRAPHICS_TYPE);
						}
						case -46:
							break;
						case 46: {
							return new Symbol(sym.GRAPHICS_FONT);
						}
						case -47:
							break;
						case 47: {
							return new Symbol(sym.GRAPHICS_FILL);
						}
						case -48:
							break;
						case 48: {
							stateBeforeLine = yy_lexical_state;
							yybegin(LINE);
							return new Symbol(sym.GRAPHICS_LINE);
						}
						case -49:
							break;
						case 49: {
							return new Symbol(sym.GRAPHICS_ARROW);
						}
						case -50:
							break;
						case 50: {
							return new Symbol(sym.GRAPHICS_START);
						}
						case -51:
							break;
						case 51: {
							return new Symbol(sym.GRAPHICS_IMAGE);
						}
						case -52:
							break;
						case 52: {
							stateBeforePoint = yy_lexical_state;
							yybegin(POINT);
							return new Symbol(sym.GRAPHICS_POINT);
						}
						case -53:
							break;
						case 53: {
							return new Symbol(sym.GRAPHICS_WIDTH);
						}
						case -54:
							break;
						case 54: {
							return new Symbol(sym.GRAPHICS_EXTENT);
						}
						case -55:
							break;
						case 55: {
							return new Symbol(sym.GRAPHICS_ANCHOR);
						}
						case -56:
							break;
						case 56: {
							return new Symbol(sym.GRAPHICS_SMOOTH);
						}
						case -57:
							break;
						case 57: {
							return new Symbol(sym.GRAPHICS_BITMAP);
						}
						case -58:
							break;
						case 58: {
							return new Symbol(sym.GRAPHICS_OUTLINE);
						}
						case -59:
							break;
						case 59: {
							return new Symbol(sym.GRAPHICS_STIPPLE);
						}
						case -60:
							break;
						case 60: {
							return new Symbol(sym.GRAPHICS_VISIBLE);
						}
						case -61:
							break;
						case 61: {
							return new Symbol(sym.GRAPHICS_JUSTIFY);
						}
						case -62:
							break;
						case 62: {
							return new Symbol(sym.GRAPHICS_CAPSTYLE);
						}
						case -63:
							break;
						case 63: {
							return new Symbol(sym.GRAPHICS_ARROW_TAIL);
						}
						case -64:
							break;
						case 64: {
							return new Symbol(sym.GRAPHICS_ARROW_HEAD);
						}
						case -65:
							break;
						case 65: {
							return new Symbol(sym.GRAPHICS_JOINSTYLE);
						}
						case -66:
							break;
						case 66: {
							return new Symbol(sym.GRAPHICS_FOREGROUND);
						}
						case -67:
							break;
						case 67: {
							return new Symbol(sym.GRAPHICS_BACKGROUND);
						}
						case -68:
							break;
						case 68: {
							return new Symbol(sym.GRAPHICS_SPLINESTEPS);
						}
						case -69:
							break;
						case 69: {
							lineCount++;
							return new Symbol(sym.SBRACE);
						}
						case -70:
							break;
						case 70: {
							lineCount--;
							if (lineCount == 0) {
								yybegin(stateBeforeLine);
							}
							return new Symbol(sym.CBRACE);
						}
						case -71:
							break;
						case 71: {
							pointCount++;
							return new Symbol(sym.SBRACE);
						}
						case -72:
							break;
						case 72: {
							pointCount--;
							if (pointCount == 0) {
								yybegin(stateBeforePoint);
							}
							return new Symbol(sym.CBRACE);
						}
						case -73:
							break;
						case 73: {
							return new Symbol(sym.POINT_Y);
						}
						case -74:
							break;
						case 74: {
							return new Symbol(sym.POINT_X);
						}
						case -75:
							break;
						case 75: {
							return new Symbol(sym.POINT_Z);
						}
						case -76:
							break;
						case 76: {
						}
						case -77:
							break;
						case 77: {
							yybegin(NODE);
						}
						case -78:
							break;
						case 78: {
						}
						case -79:
							break;
						case 79: {
							yybegin(EDGE);
						}
						case -80:
							break;
						case 80: {
							ignoreCount = 1;
							/* System.out.println("in nodestyle sbrace"); */
							yybegin(EMPTY);
							// return new Symbol(sym.SBRACE);}
						}
						case -81:
							break;
						case 81: {
							ignoreCount = 1;
							/* System.out.println("in edgestyle sbrace"); */
							yybegin(EMPTY);
							// return new Symbol(sym.SBRACE);}
						}
						case -82:
							break;
						case 82: { /* System.out.println("in empty empty"); */
						}
						case -83:
							break;
						case 83: {
							ignoreCount += 1;
							/* System.out.println("in empty sbrace"); */
							// yybegin(EMPTY);
							// return new Symbol(sym.SBRACE); }
						}
						case -84:
							break;
						case 84: {
							ignoreCount -= 1;
							if (ignoreCount == 0) {
								yybegin(GRAPH);
								/* System.out.println("in empty cbrace, begin graph"); */
								// return new Symbol(sym.CBRACE);
							} else {
								/* System.out.println("in empty cbrace"); */
							};
							// return new Symbol(sym.CBRACE);}
						}
						case -85:
							break;
						case 85: {
							return new Symbol(sym.KEY, yytext());
						}
						case -86:
							break;
						case 86: { /* ignore white space */
						}
						case -87:
							break;
						case 87: { /* System.out.println(); new line */
							org.ErrorMsg.setStatusMessage("Process new line (" + (yyline + 1) + ") current state: " + yy_lexical_state);
						}
						case -88:
							break;
						case 88: {
							System.out.println("\nUnmatched input: " + yytext() + " in line "
												+ (yyline + 1));
							org.ErrorMsg.addErrorMessage("Unmatched input: " + yytext() + " in line "
												+ (yyline + 1));
						}
						case -89:
							break;
						case 89: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -90:
							break;
						case 90: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -91:
							break;
						case 92: {
							return new Symbol(sym.ID);
						}
						case -92:
							break;
						case 93: {
							return new Symbol(sym.STRING,
												yytext().substring(1, yytext().length() - 1));
						}
						case -93:
							break;
						case 94: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -94:
							break;
						case 95: {
							return new Symbol(sym.LABEL);
						}
						case -95:
							break;
						case 96: {
							yybegin(GRAPH);
							return new Symbol(sym.GRAPH);
						}
						case -96:
							break;
						case 97: {
							System.out.println(yytext());
						}
						case -97:
							break;
						case 98: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -98:
							break;
						case 99: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -99:
							break;
						case 100: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -100:
							break;
						case 101: { /* System.out.println("in empty empty"); */
						}
						case -101:
							break;
						case 102: {
							return new Symbol(sym.KEY, yytext());
						}
						case -102:
							break;
						case 103: {
							System.out.println("\nUnmatched input: " + yytext() + " in line "
												+ (yyline + 1));
							org.ErrorMsg.addErrorMessage("Unmatched input: " + yytext() + " in line "
												+ (yyline + 1));
						}
						case -103:
							break;
						case 104: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -104:
							break;
						case 105: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -105:
							break;
						case 107: {
							return new Symbol(sym.ID);
						}
						case -106:
							break;
						case 108: {
							return new Symbol(sym.STRING,
												yytext().substring(1, yytext().length() - 1));
						}
						case -107:
							break;
						case 109: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -108:
							break;
						case 110: {
							return new Symbol(sym.LABEL);
						}
						case -109:
							break;
						case 111: {
							yybegin(GRAPH);
							return new Symbol(sym.GRAPH);
						}
						case -110:
							break;
						case 112: {
							System.out.println(yytext());
						}
						case -111:
							break;
						case 113: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -112:
							break;
						case 114: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -113:
							break;
						case 115: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -114:
							break;
						case 116: { /* System.out.println("in empty empty"); */
						}
						case -115:
							break;
						case 117: {
							return new Symbol(sym.KEY, yytext());
						}
						case -116:
							break;
						case 118: {
							System.out.println("\nUnmatched input: " + yytext() + " in line "
												+ (yyline + 1));
							org.ErrorMsg.addErrorMessage("Unmatched input: " + yytext() + " in line "
												+ (yyline + 1));
						}
						case -117:
							break;
						case 119: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -118:
							break;
						case 120: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -119:
							break;
						case 122: {
							return new Symbol(sym.STRING,
												yytext().substring(1, yytext().length() - 1));
						}
						case -120:
							break;
						case 123: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -121:
							break;
						case 124: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -122:
							break;
						case 125: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -123:
							break;
						case 126: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -124:
							break;
						case 127: { /* System.out.println("in empty empty"); */
						}
						case -125:
							break;
						case 128: {
							return new Symbol(sym.KEY, yytext());
						}
						case -126:
							break;
						case 129: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -127:
							break;
						case 131: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -128:
							break;
						case 132: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -129:
							break;
						case 133: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -130:
							break;
						case 134: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -131:
							break;
						case 135: { /* System.out.println("in empty empty"); */
						}
						case -132:
							break;
						case 136: {
							return new Symbol(sym.KEY, yytext());
						}
						case -133:
							break;
						case 137: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -134:
							break;
						case 139: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -135:
							break;
						case 140: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -136:
							break;
						case 141: {
							System.out.println(yytext()); /* ignore comments */
						}
						case -137:
							break;
						case 142: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -138:
							break;
						case 143: { /* System.out.println("in empty empty"); */
						}
						case -139:
							break;
						case 144: {
							return new Symbol(sym.KEY, yytext());
						}
						case -140:
							break;
						case 146: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -141:
							break;
						case 147: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -142:
							break;
						case 148: { /* System.out.println("in empty empty"); */
						}
						case -143:
							break;
						case 149: {
							return new Symbol(sym.KEY, yytext());
						}
						case -144:
							break;
						case 151: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -145:
							break;
						case 152: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -146:
							break;
						case 153: { /* System.out.println("in empty empty"); */
						}
						case -147:
							break;
						case 154: {
							return new Symbol(sym.KEY, yytext());
						}
						case -148:
							break;
						case 156: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -149:
							break;
						case 157: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -150:
							break;
						case 158: { /* System.out.println("in empty empty"); */
						}
						case -151:
							break;
						case 159: {
							return new Symbol(sym.KEY, yytext());
						}
						case -152:
							break;
						case 160: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -153:
							break;
						case 161: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -154:
							break;
						case 162: { /* System.out.println("in empty empty"); */
						}
						case -155:
							break;
						case 163: {
							return new Symbol(sym.KEY, yytext());
						}
						case -156:
							break;
						case 164: {
							return new Symbol(sym.REAL, new Double(yytext()));
						}
						case -157:
							break;
						case 165: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -158:
							break;
						case 166: { /* System.out.println("in empty empty"); */
						}
						case -159:
							break;
						case 167: {
							return new Symbol(sym.KEY, yytext());
						}
						case -160:
							break;
						case 168: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -161:
							break;
						case 169: { /* System.out.println("in empty empty"); */
						}
						case -162:
							break;
						case 170: {
							return new Symbol(sym.KEY, yytext());
						}
						case -163:
							break;
						case 171: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -164:
							break;
						case 172: { /* System.out.println("in empty empty"); */
						}
						case -165:
							break;
						case 173: {
							return new Symbol(sym.KEY, yytext());
						}
						case -166:
							break;
						case 174: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -167:
							break;
						case 175: { /* System.out.println("in empty empty"); */
						}
						case -168:
							break;
						case 176: {
							return new Symbol(sym.KEY, yytext());
						}
						case -169:
							break;
						case 177: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -170:
							break;
						case 178: { /* System.out.println("in empty empty"); */
						}
						case -171:
							break;
						case 179: {
							return new Symbol(sym.KEY, yytext());
						}
						case -172:
							break;
						case 180: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -173:
							break;
						case 181: { /* System.out.println("in empty empty"); */
						}
						case -174:
							break;
						case 182: {
							return new Symbol(sym.KEY, yytext());
						}
						case -175:
							break;
						case 183: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -176:
							break;
						case 184: { /* System.out.println("in empty empty"); */
						}
						case -177:
							break;
						case 185: {
							return new Symbol(sym.KEY, yytext());
						}
						case -178:
							break;
						case 186: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -179:
							break;
						case 187: {
							return new Symbol(sym.KEY, yytext());
						}
						case -180:
							break;
						case 188: {
							return new Symbol(sym.KEY, yytext());
						}
						case -181:
							break;
						case 189: {
							return new Symbol(sym.KEY, yytext());
						}
						case -182:
							break;
						case 190: {
							return new Symbol(sym.KEY, yytext());
						}
						case -183:
							break;
						case 191: {
							return new Symbol(sym.KEY, yytext());
						}
						case -184:
							break;
						case 192: {
							return new Symbol(sym.KEY, yytext());
						}
						case -185:
							break;
						case 193: {
							return new Symbol(sym.KEY, yytext());
						}
						case -186:
							break;
						case 194: {
							return new Symbol(sym.KEY, yytext());
						}
						case -187:
							break;
						case 195: {
							return new Symbol(sym.KEY, yytext());
						}
						case -188:
							break;
						case 196: {
							return new Symbol(sym.KEY, yytext());
						}
						case -189:
							break;
						case 197: {
							return new Symbol(sym.KEY, yytext());
						}
						case -190:
							break;
						case 198: {
							return new Symbol(sym.KEY, yytext());
						}
						case -191:
							break;
						case 199: {
							return new Symbol(sym.KEY, yytext());
						}
						case -192:
							break;
						case 200: {
							return new Symbol(sym.KEY, yytext());
						}
						case -193:
							break;
						case 201: {
							return new Symbol(sym.KEY, yytext());
						}
						case -194:
							break;
						case 202: {
							return new Symbol(sym.KEY, yytext());
						}
						case -195:
							break;
						case 203: {
							return new Symbol(sym.KEY, yytext());
						}
						case -196:
							break;
						case 204: {
							return new Symbol(sym.KEY, yytext());
						}
						case -197:
							break;
						case 205: {
							return new Symbol(sym.KEY, yytext());
						}
						case -198:
							break;
						case 206: {
							return new Symbol(sym.KEY, yytext());
						}
						case -199:
							break;
						case 207: {
							return new Symbol(sym.KEY, yytext());
						}
						case -200:
							break;
						case 208: {
							return new Symbol(sym.KEY, yytext());
						}
						case -201:
							break;
						case 209: {
							return new Symbol(sym.KEY, yytext());
						}
						case -202:
							break;
						case 210: {
							return new Symbol(sym.KEY, yytext());
						}
						case -203:
							break;
						case 211: {
							return new Symbol(sym.KEY, yytext());
						}
						case -204:
							break;
						case 212: {
							return new Symbol(sym.KEY, yytext());
						}
						case -205:
							break;
						case 213: {
							return new Symbol(sym.KEY, yytext());
						}
						case -206:
							break;
						case 214: {
							return new Symbol(sym.KEY, yytext());
						}
						case -207:
							break;
						case 215: {
							return new Symbol(sym.KEY, yytext());
						}
						case -208:
							break;
						case 216: {
							return new Symbol(sym.KEY, yytext());
						}
						case -209:
							break;
						case 217: {
							return new Symbol(sym.KEY, yytext());
						}
						case -210:
							break;
						case 218: {
							return new Symbol(sym.KEY, yytext());
						}
						case -211:
							break;
						case 219: {
							return new Symbol(sym.KEY, yytext());
						}
						case -212:
							break;
						case 220: {
							return new Symbol(sym.KEY, yytext());
						}
						case -213:
							break;
						case 221: {
							return new Symbol(sym.KEY, yytext());
						}
						case -214:
							break;
						case 222: {
							return new Symbol(sym.KEY, yytext());
						}
						case -215:
							break;
						case 223: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -216:
							break;
						case 224: {
							return new Symbol(sym.KEY, yytext());
						}
						case -217:
							break;
						case 225: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -218:
							break;
						case 226: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -219:
							break;
						case 227: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -220:
							break;
						case 228: { /* System.out.println("in empty empty"); */
						}
						case -221:
							break;
						case 229: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -222:
							break;
						case 230: { /* System.out.println("in empty empty"); */
						}
						case -223:
							break;
						case 231: {
							return new Symbol(sym.KEY, yytext());
						}
						case -224:
							break;
						case 232: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -225:
							break;
						case 233: { /* System.out.println("in empty empty"); */
						}
						case -226:
							break;
						case 234: {
							return new Symbol(sym.KEY, yytext());
						}
						case -227:
							break;
						case 235: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -228:
							break;
						case 236: { /* System.out.println("in empty empty"); */
						}
						case -229:
							break;
						case 237: {
							return new Symbol(sym.KEY, yytext());
						}
						case -230:
							break;
						case 238: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -231:
							break;
						case 239: { /* System.out.println("in empty empty"); */
						}
						case -232:
							break;
						case 240: {
							return new Symbol(sym.KEY, yytext());
						}
						case -233:
							break;
						case 241: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -234:
							break;
						case 242: { /* System.out.println("in empty empty"); */
						}
						case -235:
							break;
						case 243: {
							return new Symbol(sym.KEY, yytext());
						}
						case -236:
							break;
						case 244: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -237:
							break;
						case 245: { /* System.out.println("in empty empty"); */
						}
						case -238:
							break;
						case 246: {
							return new Symbol(sym.KEY, yytext());
						}
						case -239:
							break;
						case 247: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -240:
							break;
						case 248: { /* System.out.println("in empty empty"); */
						}
						case -241:
							break;
						case 249: {
							return new Symbol(sym.KEY, yytext());
						}
						case -242:
							break;
						case 250: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -243:
							break;
						case 251: {
							return new Symbol(sym.KEY, yytext());
						}
						case -244:
							break;
						case 252: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -245:
							break;
						case 253: {
							return new Symbol(sym.KEY, yytext());
						}
						case -246:
							break;
						case 254: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -247:
							break;
						case 255: {
							return new Symbol(sym.KEY, yytext());
						}
						case -248:
							break;
						case 256: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -249:
							break;
						case 257: {
							return new Symbol(sym.KEY, yytext());
						}
						case -250:
							break;
						case 258: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -251:
							break;
						case 259: {
							return new Symbol(sym.KEY, yytext());
						}
						case -252:
							break;
						case 260: {
							return new Symbol(sym.KEY, yytext());
						}
						case -253:
							break;
						case 261: {
							return new Symbol(sym.KEY, yytext());
						}
						case -254:
							break;
						case 262: {
							return new Symbol(sym.KEY, yytext());
						}
						case -255:
							break;
						case 263: {
							return new Symbol(sym.KEY, yytext());
						}
						case -256:
							break;
						case 264: {
							return new Symbol(sym.KEY, yytext());
						}
						case -257:
							break;
						case 265: {
							return new Symbol(sym.KEY, yytext());
						}
						case -258:
							break;
						case 266: {
							return new Symbol(sym.KEY, yytext());
						}
						case -259:
							break;
						case 267: {
							return new Symbol(sym.KEY, yytext());
						}
						case -260:
							break;
						case 268: {
							return new Symbol(sym.KEY, yytext());
						}
						case -261:
							break;
						case 269: {
							return new Symbol(sym.KEY, yytext());
						}
						case -262:
							break;
						case 270: {
							return new Symbol(sym.KEY, yytext());
						}
						case -263:
							break;
						case 271: {
							return new Symbol(sym.KEY, yytext());
						}
						case -264:
							break;
						case 272: {
							return new Symbol(sym.KEY, yytext());
						}
						case -265:
							break;
						case 273: {
							return new Symbol(sym.KEY, yytext());
						}
						case -266:
							break;
						case 274: {
							return new Symbol(sym.KEY, yytext());
						}
						case -267:
							break;
						case 275: {
							return new Symbol(sym.KEY, yytext());
						}
						case -268:
							break;
						case 276: {
							return new Symbol(sym.KEY, yytext());
						}
						case -269:
							break;
						case 277: {
							return new Symbol(sym.KEY, yytext());
						}
						case -270:
							break;
						case 278: {
							return new Symbol(sym.KEY, yytext());
						}
						case -271:
							break;
						case 279: {
							return new Symbol(sym.KEY, yytext());
						}
						case -272:
							break;
						case 280: {
							return new Symbol(sym.KEY, yytext());
						}
						case -273:
							break;
						case 281: {
							return new Symbol(sym.KEY, yytext());
						}
						case -274:
							break;
						case 282: {
							return new Symbol(sym.KEY, yytext());
						}
						case -275:
							break;
						case 283: {
							return new Symbol(sym.KEY, yytext());
						}
						case -276:
							break;
						case 284: {
							return new Symbol(sym.KEY, yytext());
						}
						case -277:
							break;
						case 285: {
							return new Symbol(sym.KEY, yytext());
						}
						case -278:
							break;
						case 286: {
							return new Symbol(sym.KEY, yytext());
						}
						case -279:
							break;
						case 287: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -280:
							break;
						case 288: {
							return new Symbol(sym.KEY, yytext());
						}
						case -281:
							break;
						case 289: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -282:
							break;
						case 290: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -283:
							break;
						case 291: {
							return new Symbol(sym.KEY, yytext());
						}
						case -284:
							break;
						case 292: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -285:
							break;
						case 293: { /* System.out.println("in empty empty"); */
						}
						case -286:
							break;
						case 294: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -287:
							break;
						case 295: {
							return new Symbol(sym.KEY, yytext());
						}
						case -288:
							break;
						case 296: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -289:
							break;
						case 297: { /* System.out.println("in empty empty"); */
						}
						case -290:
							break;
						case 298: {
							return new Symbol(sym.INTEGER, new Integer(yytext()));
						}
						case -291:
							break;
						case 299: {
							return new Symbol(sym.KEY, yytext());
						}
						case -292:
							break;
						case 300: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -293:
							break;
						case 301: { /* System.out.println("in empty empty"); */
						}
						case -294:
							break;
						case 302: {
							return new Symbol(sym.KEY, yytext());
						}
						case -295:
							break;
						case 303: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -296:
							break;
						case 304: { /* System.out.println("in empty empty"); */
						}
						case -297:
							break;
						case 305: {
							return new Symbol(sym.KEY, yytext());
						}
						case -298:
							break;
						case 306: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -299:
							break;
						case 307: { /* System.out.println("in empty empty"); */
						}
						case -300:
							break;
						case 308: {
							return new Symbol(sym.KEY, yytext());
						}
						case -301:
							break;
						case 309: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -302:
							break;
						case 310: { /* System.out.println("in empty empty"); */
						}
						case -303:
							break;
						case 311: {
							return new Symbol(sym.KEY, yytext());
						}
						case -304:
							break;
						case 312: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -305:
							break;
						case 313: {
							return new Symbol(sym.KEY, yytext());
						}
						case -306:
							break;
						case 314: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -307:
							break;
						case 315: {
							return new Symbol(sym.KEY, yytext());
						}
						case -308:
							break;
						case 316: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -309:
							break;
						case 317: {
							return new Symbol(sym.KEY, yytext());
						}
						case -310:
							break;
						case 318: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -311:
							break;
						case 319: {
							return new Symbol(sym.KEY, yytext());
						}
						case -312:
							break;
						case 320: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -313:
							break;
						case 321: {
							return new Symbol(sym.KEY, yytext());
						}
						case -314:
							break;
						case 322: {
							return new Symbol(sym.KEY, yytext());
						}
						case -315:
							break;
						case 323: {
							return new Symbol(sym.KEY, yytext());
						}
						case -316:
							break;
						case 324: {
							return new Symbol(sym.KEY, yytext());
						}
						case -317:
							break;
						case 325: {
							return new Symbol(sym.KEY, yytext());
						}
						case -318:
							break;
						case 326: {
							return new Symbol(sym.KEY, yytext());
						}
						case -319:
							break;
						case 327: {
							return new Symbol(sym.KEY, yytext());
						}
						case -320:
							break;
						case 328: {
							return new Symbol(sym.KEY, yytext());
						}
						case -321:
							break;
						case 329: {
							return new Symbol(sym.KEY, yytext());
						}
						case -322:
							break;
						case 330: {
							return new Symbol(sym.KEY, yytext());
						}
						case -323:
							break;
						case 331: {
							return new Symbol(sym.KEY, yytext());
						}
						case -324:
							break;
						case 332: {
							return new Symbol(sym.KEY, yytext());
						}
						case -325:
							break;
						case 333: {
							return new Symbol(sym.KEY, yytext());
						}
						case -326:
							break;
						case 334: {
							return new Symbol(sym.KEY, yytext());
						}
						case -327:
							break;
						case 335: {
							return new Symbol(sym.KEY, yytext());
						}
						case -328:
							break;
						case 336: {
							return new Symbol(sym.KEY, yytext());
						}
						case -329:
							break;
						case 337: {
							return new Symbol(sym.KEY, yytext());
						}
						case -330:
							break;
						case 338: {
							return new Symbol(sym.KEY, yytext());
						}
						case -331:
							break;
						case 339: {
							return new Symbol(sym.KEY, yytext());
						}
						case -332:
							break;
						case 340: {
							return new Symbol(sym.KEY, yytext());
						}
						case -333:
							break;
						case 341: {
							return new Symbol(sym.KEY, yytext());
						}
						case -334:
							break;
						case 342: {
							return new Symbol(sym.KEY, yytext());
						}
						case -335:
							break;
						case 343: {
							return new Symbol(sym.KEY, yytext());
						}
						case -336:
							break;
						case 344: {
							return new Symbol(sym.KEY, yytext());
						}
						case -337:
							break;
						case 345: {
							return new Symbol(sym.KEY, yytext());
						}
						case -338:
							break;
						case 346: {
							return new Symbol(sym.KEY, yytext());
						}
						case -339:
							break;
						case 347: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -340:
							break;
						case 348: { /* System.out.println("in empty empty"); */
						}
						case -341:
							break;
						case 349: {
							return new Symbol(sym.KEY, yytext());
						}
						case -342:
							break;
						case 350: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -343:
							break;
						case 351: { /* System.out.println("in empty empty"); */
						}
						case -344:
							break;
						case 352: {
							return new Symbol(sym.KEY, yytext());
						}
						case -345:
							break;
						case 353: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -346:
							break;
						case 354: { /* System.out.println("in empty empty"); */
						}
						case -347:
							break;
						case 355: {
							return new Symbol(sym.KEY, yytext());
						}
						case -348:
							break;
						case 356: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -349:
							break;
						case 357: { /* System.out.println("in empty empty"); */
						}
						case -350:
							break;
						case 358: {
							return new Symbol(sym.KEY, yytext());
						}
						case -351:
							break;
						case 359: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -352:
							break;
						case 360: { /* System.out.println("in empty empty"); */
						}
						case -353:
							break;
						case 361: {
							return new Symbol(sym.KEY, yytext());
						}
						case -354:
							break;
						case 362: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -355:
							break;
						case 363: { /* System.out.println("in empty empty"); */
						}
						case -356:
							break;
						case 364: {
							return new Symbol(sym.KEY, yytext());
						}
						case -357:
							break;
						case 365: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -358:
							break;
						case 366: {
							return new Symbol(sym.KEY, yytext());
						}
						case -359:
							break;
						case 367: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -360:
							break;
						case 368: {
							return new Symbol(sym.KEY, yytext());
						}
						case -361:
							break;
						case 369: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -362:
							break;
						case 370: {
							return new Symbol(sym.KEY, yytext());
						}
						case -363:
							break;
						case 371: {
							return new Symbol(sym.KEY, yytext());
						}
						case -364:
							break;
						case 372: {
							return new Symbol(sym.KEY, yytext());
						}
						case -365:
							break;
						case 373: {
							return new Symbol(sym.KEY, yytext());
						}
						case -366:
							break;
						case 374: {
							return new Symbol(sym.KEY, yytext());
						}
						case -367:
							break;
						case 375: {
							return new Symbol(sym.KEY, yytext());
						}
						case -368:
							break;
						case 376: {
							return new Symbol(sym.KEY, yytext());
						}
						case -369:
							break;
						case 377: {
							return new Symbol(sym.KEY, yytext());
						}
						case -370:
							break;
						case 378: {
							return new Symbol(sym.KEY, yytext());
						}
						case -371:
							break;
						case 379: {
							return new Symbol(sym.KEY, yytext());
						}
						case -372:
							break;
						case 380: {
							return new Symbol(sym.KEY, yytext());
						}
						case -373:
							break;
						case 381: {
							return new Symbol(sym.KEY, yytext());
						}
						case -374:
							break;
						case 382: {
							return new Symbol(sym.KEY, yytext());
						}
						case -375:
							break;
						case 383: {
							return new Symbol(sym.KEY, yytext());
						}
						case -376:
							break;
						case 384: {
							return new Symbol(sym.KEY, yytext());
						}
						case -377:
							break;
						case 385: {
							return new Symbol(sym.KEY, yytext());
						}
						case -378:
							break;
						case 386: {
							return new Symbol(sym.KEY, yytext());
						}
						case -379:
							break;
						case 387: {
							return new Symbol(sym.KEY, yytext());
						}
						case -380:
							break;
						case 388: {
							return new Symbol(sym.KEY, yytext());
						}
						case -381:
							break;
						case 389: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -382:
							break;
						case 390: { /* System.out.println("in empty empty"); */
						}
						case -383:
							break;
						case 391: {
							return new Symbol(sym.KEY, yytext());
						}
						case -384:
							break;
						case 392: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -385:
							break;
						case 393: { /* System.out.println("in empty empty"); */
						}
						case -386:
							break;
						case 394: {
							return new Symbol(sym.KEY, yytext());
						}
						case -387:
							break;
						case 395: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -388:
							break;
						case 396: { /* System.out.println("in empty empty"); */
						}
						case -389:
							break;
						case 397: {
							return new Symbol(sym.KEY, yytext());
						}
						case -390:
							break;
						case 398: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -391:
							break;
						case 399: { /* System.out.println("in empty empty"); */
						}
						case -392:
							break;
						case 400: {
							return new Symbol(sym.KEY, yytext());
						}
						case -393:
							break;
						case 401: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -394:
							break;
						case 402: {
							return new Symbol(sym.KEY, yytext());
						}
						case -395:
							break;
						case 403: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -396:
							break;
						case 404: {
							return new Symbol(sym.KEY, yytext());
						}
						case -397:
							break;
						case 405: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -398:
							break;
						case 406: {
							return new Symbol(sym.KEY, yytext());
						}
						case -399:
							break;
						case 407: {
							return new Symbol(sym.KEY, yytext());
						}
						case -400:
							break;
						case 408: {
							return new Symbol(sym.KEY, yytext());
						}
						case -401:
							break;
						case 409: {
							return new Symbol(sym.KEY, yytext());
						}
						case -402:
							break;
						case 410: {
							return new Symbol(sym.KEY, yytext());
						}
						case -403:
							break;
						case 411: {
							return new Symbol(sym.KEY, yytext());
						}
						case -404:
							break;
						case 412: {
							return new Symbol(sym.KEY, yytext());
						}
						case -405:
							break;
						case 413: {
							return new Symbol(sym.KEY, yytext());
						}
						case -406:
							break;
						case 414: {
							return new Symbol(sym.KEY, yytext());
						}
						case -407:
							break;
						case 415: {
							return new Symbol(sym.KEY, yytext());
						}
						case -408:
							break;
						case 416: {
							return new Symbol(sym.KEY, yytext());
						}
						case -409:
							break;
						case 417: {
							return new Symbol(sym.KEY, yytext());
						}
						case -410:
							break;
						case 418: {
							return new Symbol(sym.KEY, yytext());
						}
						case -411:
							break;
						case 419: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -412:
							break;
						case 420: { /* System.out.println("in empty empty"); */
						}
						case -413:
							break;
						case 421: {
							return new Symbol(sym.KEY, yytext());
						}
						case -414:
							break;
						case 422: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -415:
							break;
						case 423: { /* System.out.println("in empty empty"); */
						}
						case -416:
							break;
						case 424: {
							return new Symbol(sym.KEY, yytext());
						}
						case -417:
							break;
						case 425: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -418:
							break;
						case 426: { /* System.out.println("in empty empty"); */
						}
						case -419:
							break;
						case 427: {
							return new Symbol(sym.KEY, yytext());
						}
						case -420:
							break;
						case 428: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -421:
							break;
						case 429: { /* System.out.println("in empty empty"); */
						}
						case -422:
							break;
						case 430: {
							return new Symbol(sym.KEY, yytext());
						}
						case -423:
							break;
						case 431: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -424:
							break;
						case 432: {
							return new Symbol(sym.KEY, yytext());
						}
						case -425:
							break;
						case 433: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -426:
							break;
						case 434: {
							return new Symbol(sym.KEY, yytext());
						}
						case -427:
							break;
						case 435: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -428:
							break;
						case 436: {
							return new Symbol(sym.KEY, yytext());
						}
						case -429:
							break;
						case 437: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -430:
							break;
						case 438: {
							return new Symbol(sym.KEY, yytext());
						}
						case -431:
							break;
						case 439: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -432:
							break;
						case 440: {
							return new Symbol(sym.KEY, yytext());
						}
						case -433:
							break;
						case 441: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -434:
							break;
						case 442: {
							return new Symbol(sym.KEY, yytext());
						}
						case -435:
							break;
						case 443: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -436:
							break;
						case 444: {
							return new Symbol(sym.KEY, yytext());
						}
						case -437:
							break;
						case 445: {
							return new Symbol(sym.KEY, yytext());
						}
						case -438:
							break;
						case 446: {
							return new Symbol(sym.KEY, yytext());
						}
						case -439:
							break;
						case 447: {
							return new Symbol(sym.KEY, yytext());
						}
						case -440:
							break;
						case 448: {
							return new Symbol(sym.KEY, yytext());
						}
						case -441:
							break;
						case 449: {
							return new Symbol(sym.KEY, yytext());
						}
						case -442:
							break;
						case 450: {
							return new Symbol(sym.KEY, yytext());
						}
						case -443:
							break;
						case 451: {
							return new Symbol(sym.KEY, yytext());
						}
						case -444:
							break;
						case 452: {
							return new Symbol(sym.KEY, yytext());
						}
						case -445:
							break;
						case 453: {
							return new Symbol(sym.KEY, yytext());
						}
						case -446:
							break;
						case 454: {
							return new Symbol(sym.KEY, yytext());
						}
						case -447:
							break;
						case 455: {
							return new Symbol(sym.KEY, yytext());
						}
						case -448:
							break;
						case 456: {
							return new Symbol(sym.KEY, yytext());
						}
						case -449:
							break;
						case 457: {
							return new Symbol(sym.KEY, yytext());
						}
						case -450:
							break;
						case 458: {
							return new Symbol(sym.KEY, yytext());
						}
						case -451:
							break;
						case 459: {
							return new Symbol(sym.KEY, yytext());
						}
						case -452:
							break;
						case 460: {
							return new Symbol(sym.KEY, yytext());
						}
						case -453:
							break;
						case 461: {
							return new Symbol(sym.KEY, yytext());
						}
						case -454:
							break;
						case 462: {
							return new Symbol(sym.KEY, yytext());
						}
						case -455:
							break;
						case 463: {
							return new Symbol(sym.KEY, yytext());
						}
						case -456:
							break;
						case 464: {
							return new Symbol(sym.KEY, yytext());
						}
						case -457:
							break;
						case 465: {
							return new Symbol(sym.KEY, yytext());
						}
						case -458:
							break;
						case 466: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -459:
							break;
						case 467: { /* System.out.println("in empty empty"); */
						}
						case -460:
							break;
						case 468: {
							return new Symbol(sym.KEY, yytext());
						}
						case -461:
							break;
						case 469: {
							return new Symbol(sym.KEY, yytext());
						}
						case -462:
							break;
						case 470: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -463:
							break;
						case 471: { /* System.out.println("in empty empty"); */
						}
						case -464:
							break;
						case 472: {
							return new Symbol(sym.KEY, yytext());
						}
						case -465:
							break;
						case 473: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -466:
							break;
						case 474: { /* System.out.println("in empty empty"); */
						}
						case -467:
							break;
						case 475: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -468:
							break;
						case 476: { /* System.out.println("KEY: "+yytext()); */
							return new Symbol(sym.KEY, yytext());
						}
						case -469:
							break;
						default:
							yy_error(YY_E_INTERNAL, false);
						case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
